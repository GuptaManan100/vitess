// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func setAllowCarrats(yylex interface{}, val bool) {
	yylex.(*Tokenizer).allowCaratsInID = val
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const DATA = 57381
const LOAD = 57382
const LINES = 57383
const TERMINATED = 57384
const ESCAPED = 57385
const ENCLOSED = 57386
const DUMPFILE = 57387
const CSV = 57388
const HEADER = 57389
const MANIFEST = 57390
const OVERWRITE = 57391
const STARTING = 57392
const OPTIONALLY = 57393
const VALUES = 57394
const LAST_INSERT_ID = 57395
const NEXT = 57396
const VALUE = 57397
const SHARE = 57398
const MODE = 57399
const SQL_NO_CACHE = 57400
const SQL_CACHE = 57401
const SQL_CALC_FOUND_ROWS = 57402
const JOIN = 57403
const STRAIGHT_JOIN = 57404
const LEFT = 57405
const RIGHT = 57406
const INNER = 57407
const OUTER = 57408
const CROSS = 57409
const NATURAL = 57410
const USE = 57411
const FORCE = 57412
const ON = 57413
const USING = 57414
const ID = 57415
const HEX = 57416
const STRING = 57417
const INTEGRAL = 57418
const FLOAT = 57419
const HEXNUM = 57420
const VALUE_ARG = 57421
const LIST_ARG = 57422
const COMMENT = 57423
const COMMENT_KEYWORD = 57424
const BIT_LITERAL = 57425
const NULL = 57426
const TRUE = 57427
const FALSE = 57428
const OFF = 57429
const OR = 57430
const XOR = 57431
const AND = 57432
const NOT = 57433
const BETWEEN = 57434
const CASE = 57435
const WHEN = 57436
const THEN = 57437
const ELSE = 57438
const END = 57439
const LE = 57440
const GE = 57441
const NE = 57442
const NULL_SAFE_EQUAL = 57443
const IS = 57444
const LIKE = 57445
const REGEXP = 57446
const IN = 57447
const SHIFT_LEFT = 57448
const SHIFT_RIGHT = 57449
const DIV = 57450
const MOD = 57451
const UNARY = 57452
const COLLATE = 57453
const BINARY = 57454
const UNDERSCORE_BINARY = 57455
const UNDERSCORE_UTF8MB4 = 57456
const UNDERSCORE_UTF8 = 57457
const UNDERSCORE_LATIN1 = 57458
const INTERVAL = 57459
const JSON_EXTRACT_OP = 57460
const JSON_UNQUOTE_EXTRACT_OP = 57461
const CREATE = 57462
const ALTER = 57463
const DROP = 57464
const RENAME = 57465
const ANALYZE = 57466
const ADD = 57467
const FLUSH = 57468
const SCHEMA = 57469
const TABLE = 57470
const INDEX = 57471
const VIEW = 57472
const TO = 57473
const IGNORE = 57474
const IF = 57475
const UNIQUE = 57476
const PRIMARY = 57477
const COLUMN = 57478
const SPATIAL = 57479
const FULLTEXT = 57480
const KEY_BLOCK_SIZE = 57481
const CHECK = 57482
const INDEXES = 57483
const ACTION = 57484
const CASCADE = 57485
const CONSTRAINT = 57486
const FOREIGN = 57487
const NO = 57488
const REFERENCES = 57489
const RESTRICT = 57490
const SHOW = 57491
const DESCRIBE = 57492
const EXPLAIN = 57493
const DATE = 57494
const ESCAPE = 57495
const REPAIR = 57496
const OPTIMIZE = 57497
const TRUNCATE = 57498
const MAXVALUE = 57499
const PARTITION = 57500
const REORGANIZE = 57501
const LESS = 57502
const THAN = 57503
const PROCEDURE = 57504
const TRIGGER = 57505
const VINDEX = 57506
const VINDEXES = 57507
const STATUS = 57508
const VARIABLES = 57509
const WARNINGS = 57510
const SEQUENCE = 57511
const BEGIN = 57512
const START = 57513
const TRANSACTION = 57514
const COMMIT = 57515
const ROLLBACK = 57516
const SAVEPOINT = 57517
const RELEASE = 57518
const WORK = 57519
const BIT = 57520
const TINYINT = 57521
const SMALLINT = 57522
const MEDIUMINT = 57523
const INT = 57524
const INTEGER = 57525
const BIGINT = 57526
const INTNUM = 57527
const REAL = 57528
const DOUBLE = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const TIME = 57533
const TIMESTAMP = 57534
const DATETIME = 57535
const YEAR = 57536
const CHAR = 57537
const VARCHAR = 57538
const BOOL = 57539
const CHARACTER = 57540
const VARBINARY = 57541
const NCHAR = 57542
const TEXT = 57543
const TINYTEXT = 57544
const MEDIUMTEXT = 57545
const LONGTEXT = 57546
const BLOB = 57547
const TINYBLOB = 57548
const MEDIUMBLOB = 57549
const LONGBLOB = 57550
const JSON = 57551
const ENUM = 57552
const GEOMETRY = 57553
const POINT = 57554
const LINESTRING = 57555
const POLYGON = 57556
const GEOMETRYCOLLECTION = 57557
const MULTIPOINT = 57558
const MULTILINESTRING = 57559
const MULTIPOLYGON = 57560
const NULLX = 57561
const AUTO_INCREMENT = 57562
const APPROXNUM = 57563
const SIGNED = 57564
const UNSIGNED = 57565
const ZEROFILL = 57566
const COLLATION = 57567
const DATABASES = 57568
const TABLES = 57569
const VITESS_METADATA = 57570
const VSCHEMA = 57571
const FULL = 57572
const PROCESSLIST = 57573
const COLUMNS = 57574
const FIELDS = 57575
const ENGINES = 57576
const PLUGINS = 57577
const EXTENDED = 57578
const KEYSPACES = 57579
const VITESS_KEYSPACES = 57580
const VITESS_SHARDS = 57581
const VITESS_TABLETS = 57582
const NAMES = 57583
const CHARSET = 57584
const GLOBAL = 57585
const SESSION = 57586
const ISOLATION = 57587
const LEVEL = 57588
const READ = 57589
const WRITE = 57590
const ONLY = 57591
const REPEATABLE = 57592
const COMMITTED = 57593
const UNCOMMITTED = 57594
const SERIALIZABLE = 57595
const CURRENT_TIMESTAMP = 57596
const DATABASE = 57597
const CURRENT_DATE = 57598
const CURRENT_TIME = 57599
const LOCALTIME = 57600
const LOCALTIMESTAMP = 57601
const UTC_DATE = 57602
const UTC_TIME = 57603
const UTC_TIMESTAMP = 57604
const REPLACE = 57605
const CONVERT = 57606
const CAST = 57607
const SUBSTR = 57608
const SUBSTRING = 57609
const GROUP_CONCAT = 57610
const SEPARATOR = 57611
const TIMESTAMPADD = 57612
const TIMESTAMPDIFF = 57613
const MATCH = 57614
const AGAINST = 57615
const BOOLEAN = 57616
const LANGUAGE = 57617
const WITH = 57618
const QUERY = 57619
const EXPANSION = 57620
const UNUSED = 57621
const ARRAY = 57622
const CUME_DIST = 57623
const DESCRIPTION = 57624
const DENSE_RANK = 57625
const EMPTY = 57626
const EXCEPT = 57627
const FIRST_VALUE = 57628
const GROUPING = 57629
const GROUPS = 57630
const JSON_TABLE = 57631
const LAG = 57632
const LAST_VALUE = 57633
const LATERAL = 57634
const LEAD = 57635
const MEMBER = 57636
const NTH_VALUE = 57637
const NTILE = 57638
const OF = 57639
const OVER = 57640
const PERCENT_RANK = 57641
const RANK = 57642
const RECURSIVE = 57643
const ROW_NUMBER = 57644
const SYSTEM = 57645
const WINDOW = 57646
const ACTIVE = 57647
const ADMIN = 57648
const BUCKETS = 57649
const CLONE = 57650
const COMPONENT = 57651
const DEFINITION = 57652
const ENFORCED = 57653
const EXCLUDE = 57654
const FOLLOWING = 57655
const GEOMCOLLECTION = 57656
const GET_MASTER_PUBLIC_KEY = 57657
const HISTOGRAM = 57658
const HISTORY = 57659
const INACTIVE = 57660
const INVISIBLE = 57661
const LOCKED = 57662
const MASTER_COMPRESSION_ALGORITHMS = 57663
const MASTER_PUBLIC_KEY_PATH = 57664
const MASTER_TLS_CIPHERSUITES = 57665
const MASTER_ZSTD_COMPRESSION_LEVEL = 57666
const NESTED = 57667
const NETWORK_NAMESPACE = 57668
const NOWAIT = 57669
const NULLS = 57670
const OJ = 57671
const OLD = 57672
const OPTIONAL = 57673
const ORDINALITY = 57674
const ORGANIZATION = 57675
const OTHERS = 57676
const PATH = 57677
const PERSIST = 57678
const PERSIST_ONLY = 57679
const PRECEDING = 57680
const PRIVILEGE_CHECKS_USER = 57681
const PROCESS = 57682
const RANDOM = 57683
const REFERENCE = 57684
const REQUIRE_ROW_FORMAT = 57685
const RESOURCE = 57686
const RESPECT = 57687
const RESTART = 57688
const RETAIN = 57689
const REUSE = 57690
const ROLE = 57691
const SECONDARY = 57692
const SECONDARY_ENGINE = 57693
const SECONDARY_LOAD = 57694
const SECONDARY_UNLOAD = 57695
const SKIP = 57696
const SRID = 57697
const THREAD_PRIORITY = 57698
const TIES = 57699
const UNBOUNDED = 57700
const VCPU = 57701
const VISIBLE = 57702
const FORMAT = 57703
const TREE = 57704
const VITESS = 57705
const TRADITIONAL = 57706

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
	"'@'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	34, 327,
	146, 327,
	158, 327,
	183, 341,
	184, 341,
	-2, 329,
	-1, 50,
	148, 351,
	-2, 349,
	-1, 74,
	54, 387,
	-2, 395,
	-1, 418,
	134, 752,
	-2, 748,
	-1, 419,
	134, 753,
	-2, 749,
	-1, 434,
	54, 388,
	-2, 400,
	-1, 435,
	54, 389,
	-2, 401,
	-1, 455,
	102, 1020,
	-2, 79,
	-1, 456,
	102, 928,
	-2, 80,
	-1, 461,
	102, 890,
	-2, 711,
	-1, 463,
	102, 964,
	-2, 713,
	-1, 977,
	134, 755,
	-2, 751,
	-1, 1064,
	72, 61,
	74, 61,
	-2, 65,
	-1, 1429,
	5, 639,
	18, 639,
	20, 639,
	32, 639,
	75, 639,
	-2, 426,
	-1, 1628,
	44, 682,
	-2, 680,
}

const yyPrivate = 57344

const yyLast = 19744

var yyAct = [...]int{

	418, 1724, 1714, 1476, 1650, 1628, 1351, 1682, 1086, 362,
	1250, 1571, 1554, 1593, 1270, 1058, 643, 377, 1408, 1405,
	1409, 1540, 1445, 763, 1132, 1251, 1095, 1301, 1085, 624,
	770, 1082, 1237, 590, 723, 964, 348, 1415, 1421, 1370,
	94, 898, 391, 1055, 308, 460, 331, 308, 1318, 73,
	3, 1186, 94, 641, 308, 917, 98, 971, 97, 1328,
	71, 1100, 808, 587, 801, 1037, 436, 1060, 768, 791,
	1044, 364, 29, 997, 796, 941, 421, 1128, 427, 773,
	586, 1066, 94, 780, 807, 94, 308, 69, 308, 790,
	805, 633, 349, 360, 353, 352, 912, 96, 457, 798,
	736, 74, 1338, 68, 1117, 1625, 96, 737, 96, 96,
	96, 966, 1104, 96, 927, 1290, 601, 8, 306, 1550,
	1573, 7, 6, 1469, 613, 1717, 1679, 1712, 344, 1658,
	1705, 1477, 1154, 1678, 76, 77, 78, 79, 80, 81,
	1657, 1387, 422, 1506, 296, 595, 1153, 294, 31, 1334,
	1076, 62, 35, 36, 1440, 1441, 442, 446, 1460, 96,
	592, 1439, 594, 1077, 1078, 351, 304, 300, 301, 302,
	1287, 96, 454, 1286, 974, 656, 1288, 630, 403, 632,
	409, 410, 407, 408, 406, 405, 404, 809, 350, 810,
	649, 650, 96, 651, 411, 412, 1309, 652, 649, 650,
	1110, 1152, 1543, 1660, 1353, 1118, 1497, 1495, 341, 926,
	343, 629, 631, 339, 646, 61, 886, 1711, 1704, 1337,
	654, 644, 645, 312, 1342, 1339, 1330, 1340, 1333, 1103,
	1329, 1355, 315, 883, 1331, 1332, 1118, 655, 1651, 1350,
	324, 885, 1038, 1643, 1728, 1136, 297, 1136, 1341, 1594,
	1448, 589, 1732, 639, 1149, 1146, 1147, 887, 1145, 1136,
	1354, 1602, 1596, 1271, 1273, 614, 448, 928, 929, 930,
	597, 1356, 295, 1347, 322, 1111, 891, 884, 659, 1349,
	329, 873, 1104, 1432, 1431, 1430, 593, 1632, 602, 311,
	299, 1156, 1159, 298, 303, 308, 604, 605, 1166, 1522,
	308, 1165, 615, 1438, 627, 1242, 308, 708, 709, 1215,
	313, 1283, 308, 622, 1194, 1072, 628, 784, 721, 620,
	1083, 686, 696, 94, 696, 918, 913, 1016, 634, 84,
	676, 1151, 94, 1595, 609, 1641, 1611, 326, 316, 1419,
	327, 328, 335, 1272, 94, 94, 319, 321, 332, 317,
	318, 337, 336, 1150, 314, 334, 333, 1468, 626, 811,
	657, 669, 1389, 1656, 841, 638, 85, 998, 998, 603,
	1212, 875, 1205, 1726, 612, 1661, 1727, 640, 1725, 596,
	619, 1307, 1107, 1603, 1601, 658, 621, 670, 671, 1108,
	1646, 61, 948, 777, 1670, 665, 1348, 1155, 1346, 1103,
	606, 944, 607, 673, 292, 608, 946, 947, 945, 635,
	636, 1706, 1157, 292, 1549, 292, 292, 292, 1548, 676,
	292, 1322, 63, 600, 1709, 919, 914, 616, 617, 618,
	1707, 706, 1619, 685, 684, 694, 695, 687, 688, 689,
	690, 691, 692, 693, 686, 94, 647, 696, 308, 1321,
	308, 308, 760, 94, 1310, 625, 292, 759, 1202, 94,
	1361, 829, 1708, 668, 1733, 724, 292, 666, 667, 457,
	598, 599, 1700, 761, 674, 675, 673, 1395, 292, 1690,
	685, 684, 694, 695, 687, 688, 689, 690, 691, 692,
	693, 686, 676, 789, 696, 708, 709, 675, 673, 292,
	1698, 1672, 842, 774, 447, 739, 741, 743, 745, 747,
	749, 750, 740, 742, 676, 746, 748, 1396, 751, 1699,
	806, 1734, 788, 1201, 878, 800, 762, 1642, 855, 858,
	859, 860, 861, 862, 863, 1567, 864, 865, 866, 867,
	868, 843, 844, 845, 846, 827, 828, 856, 1546, 830,
	1510, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 847, 848, 849, 850, 851, 852, 853, 854, 685,
	684, 694, 695, 687, 688, 689, 690, 691, 692, 693,
	686, 708, 709, 696, 449, 450, 308, 431, 1021, 1022,
	869, 674, 675, 673, 871, 94, 1397, 874, 1418, 876,
	308, 1319, 452, 308, 94, 94, 94, 911, 772, 676,
	308, 903, 889, 1620, 308, 610, 1608, 308, 896, 897,
	1018, 308, 1517, 94, 857, 1607, 1187, 1456, 94, 94,
	94, 308, 94, 94, 1179, 1180, 1181, 1371, 672, 689,
	690, 691, 692, 693, 686, 94, 94, 696, 872, 1610,
	1200, 72, 1199, 902, 674, 675, 673, 880, 881, 882,
	819, 936, 938, 939, 1599, 1710, 900, 1105, 937, 674,
	675, 673, 676, 1464, 877, 1017, 901, 879, 1373, 1674,
	431, 905, 906, 907, 888, 909, 910, 676, 800, 1599,
	1654, 895, 674, 675, 673, 1599, 431, 965, 915, 916,
	674, 675, 673, 1238, 921, 908, 967, 1323, 1391, 1029,
	676, 1599, 1633, 892, 1277, 1375, 1067, 1379, 676, 1374,
	94, 1372, 942, 674, 675, 673, 1377, 687, 688, 689,
	690, 691, 692, 693, 686, 1376, 70, 696, 975, 986,
	989, 676, 1599, 1598, 920, 999, 923, 1406, 1378, 1380,
	1418, 943, 1041, 94, 94, 981, 380, 379, 382, 383,
	384, 385, 31, 976, 1041, 381, 386, 977, 1538, 1537,
	1524, 431, 94, 1520, 431, 1466, 1465, 1462, 1463, 308,
	724, 31, 94, 1462, 1461, 1238, 308, 1245, 308, 1029,
	431, 1041, 431, 1040, 1068, 1068, 308, 308, 308, 672,
	431, 975, 968, 969, 94, 1030, 431, 94, 1246, 1291,
	978, 818, 817, 1007, 1008, 1075, 1218, 1217, 94, 94,
	457, 1029, 1067, 457, 1019, 890, 1035, 1578, 803, 61,
	977, 424, 61, 1691, 1087, 31, 1041, 1556, 1112, 1011,
	1529, 1031, 1133, 1452, 870, 1056, 1418, 1295, 61, 1023,
	1422, 1423, 1102, 1032, 1069, 1069, 1071, 1067, 1129, 1123,
	1036, 1122, 1039, 1352, 1557, 1033, 1139, 1029, 1719, 1715,
	1454, 1425, 1064, 1406, 308, 94, 1324, 94, 924, 894,
	1158, 1070, 1428, 1427, 308, 308, 308, 308, 308, 1074,
	1695, 308, 308, 1134, 1073, 308, 94, 1065, 61, 1090,
	982, 983, 61, 1135, 988, 991, 992, 1259, 1046, 1049,
	1050, 1051, 1047, 308, 1048, 1052, 1258, 1262, 1677, 308,
	308, 308, 1263, 1398, 1227, 308, 94, 771, 1141, 1006,
	1143, 1509, 1009, 1010, 1693, 1260, 1521, 1119, 1120, 1121,
	1261, 1666, 419, 1130, 1131, 1236, 1235, 1172, 1140, 1170,
	1264, 1176, 1050, 1051, 1663, 1697, 1681, 1683, 1160, 1161,
	1162, 1163, 1164, 431, 1689, 1167, 1168, 1688, 1629, 1169,
	685, 684, 694, 695, 687, 688, 689, 690, 691, 692,
	693, 686, 95, 1225, 696, 1627, 309, 1171, 942, 309,
	420, 1226, 1314, 816, 95, 1175, 309, 623, 1306, 1177,
	437, 685, 684, 694, 695, 687, 688, 689, 690, 691,
	692, 693, 686, 764, 438, 696, 1648, 943, 994, 1647,
	1576, 1182, 1552, 1304, 95, 765, 1297, 95, 309, 1515,
	309, 308, 995, 1014, 1002, 1224, 775, 776, 440, 437,
	439, 1054, 308, 308, 308, 308, 308, 1231, 1142, 893,
	1252, 422, 428, 438, 308, 1195, 425, 426, 308, 1702,
	1196, 1701, 308, 1686, 1667, 1514, 429, 308, 308, 1243,
	1211, 308, 308, 308, 1240, 434, 435, 440, 72, 439,
	1513, 1401, 1234, 1206, 1289, 1238, 94, 1247, 1230, 653,
	1233, 1721, 1720, 1721, 1292, 1296, 1203, 785, 1241, 778,
	1302, 1302, 1087, 1113, 1114, 1115, 1116, 1269, 430, 1239,
	1278, 1630, 1254, 1255, 1280, 1257, 1544, 1015, 900, 1124,
	1125, 1126, 1127, 1265, 424, 70, 75, 67, 1303, 1275,
	1276, 1253, 1, 330, 1256, 1713, 1281, 291, 1284, 1478,
	94, 94, 1279, 1508, 1553, 1148, 1649, 1191, 1192, 1313,
	1592, 1315, 1316, 1317, 1294, 1444, 1093, 1084, 83, 1298,
	1299, 1300, 584, 82, 1640, 637, 1092, 1091, 1209, 1600,
	94, 1308, 1320, 1109, 1542, 1453, 1305, 1645, 824, 822,
	823, 1327, 685, 684, 694, 695, 687, 688, 689, 690,
	691, 692, 693, 686, 1326, 94, 696, 821, 826, 825,
	820, 965, 1336, 1336, 1335, 1335, 1343, 323, 925, 340,
	1053, 1367, 812, 1138, 779, 86, 1345, 1344, 1311, 1312,
	1369, 1144, 1467, 1357, 1106, 320, 1368, 1358, 648, 325,
	293, 1359, 1392, 308, 704, 1360, 1381, 309, 1232, 1285,
	1388, 1382, 309, 94, 458, 451, 1412, 1687, 309, 94,
	94, 1366, 1664, 1662, 309, 1252, 1407, 976, 1626, 1367,
	1572, 977, 1665, 1624, 1696, 95, 1046, 1049, 1050, 1051,
	1047, 1680, 1048, 1052, 95, 94, 1422, 1423, 308, 1013,
	1020, 767, 1512, 1417, 1400, 1210, 95, 95, 733, 1410,
	996, 794, 94, 363, 94, 1426, 94, 935, 378, 1302,
	1302, 1302, 1443, 375, 376, 1024, 1244, 1399, 1087, 1434,
	1087, 1436, 1433, 1437, 1503, 1459, 678, 361, 355, 793,
	1442, 1435, 1404, 1447, 786, 308, 1449, 1450, 1451, 1045,
	1102, 1043, 1042, 799, 1424, 1420, 792, 1028, 433, 993,
	1618, 1505, 432, 1457, 1458, 308, 53, 34, 345, 661,
	441, 94, 28, 1479, 94, 94, 94, 308, 23, 22,
	21, 20, 19, 25, 18, 1471, 684, 694, 695, 687,
	688, 689, 690, 691, 692, 693, 686, 17, 444, 696,
	1472, 16, 1474, 611, 38, 27, 1502, 95, 1484, 1485,
	309, 26, 309, 309, 15, 95, 14, 13, 12, 1470,
	1493, 95, 11, 10, 9, 5, 4, 685, 684, 694,
	695, 687, 688, 689, 690, 691, 692, 693, 686, 1473,
	664, 696, 24, 722, 2, 0, 0, 1516, 1252, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 94, 1526, 0, 0, 1488, 1525, 0,
	0, 1292, 0, 94, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 1535, 0, 0, 1536, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 94, 685,
	684, 694, 695, 687, 688, 689, 690, 691, 692, 693,
	686, 0, 1560, 696, 1555, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1558, 392, 30, 0, 0, 0, 0, 0,
	0, 94, 0, 94, 1551, 94, 0, 0, 309, 0,
	94, 0, 94, 94, 94, 308, 0, 95, 1577, 94,
	1581, 0, 309, 0, 30, 309, 95, 95, 95, 1575,
	1590, 1585, 309, 1586, 1588, 1589, 309, 94, 308, 309,
	1410, 1597, 1604, 309, 1410, 95, 1545, 0, 1547, 1579,
	95, 95, 95, 309, 95, 95, 0, 1605, 1612, 1606,
	0, 0, 0, 423, 1566, 0, 0, 95, 95, 0,
	0, 0, 0, 0, 0, 1639, 1559, 1631, 0, 0,
	94, 0, 0, 0, 1584, 1637, 1638, 0, 1501, 0,
	0, 94, 94, 0, 1591, 1570, 0, 0, 0, 0,
	1653, 1410, 0, 1652, 0, 0, 0, 1555, 1087, 0,
	0, 0, 1613, 94, 0, 0, 1659, 0, 0, 0,
	1252, 1668, 0, 0, 308, 0, 0, 1490, 1491, 0,
	1492, 0, 94, 1494, 0, 1496, 0, 0, 0, 0,
	0, 1676, 95, 0, 0, 0, 0, 0, 1685, 1684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1692,
	1694, 694, 695, 687, 688, 689, 690, 691, 692, 693,
	686, 0, 94, 696, 0, 95, 95, 0, 0, 0,
	0, 685, 684, 694, 695, 687, 688, 689, 690, 691,
	692, 693, 686, 1703, 95, 696, 1718, 0, 1671, 0,
	0, 309, 1539, 1729, 95, 0, 0, 0, 309, 0,
	309, 0, 0, 0, 0, 677, 0, 0, 309, 309,
	309, 0, 0, 0, 0, 0, 95, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 979, 980, 0,
	95, 95, 0, 0, 0, 680, 0, 683, 0, 0,
	0, 354, 0, 697, 698, 699, 700, 701, 702, 703,
	734, 681, 682, 679, 685, 684, 694, 695, 687, 688,
	689, 690, 691, 692, 693, 686, 1012, 1500, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 769, 0,
	0, 0, 0, 0, 0, 0, 309, 95, 0, 95,
	0, 0, 0, 0, 0, 0, 309, 309, 309, 309,
	309, 0, 0, 309, 309, 0, 642, 309, 95, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 1188, 309, 0, 0, 0, 30,
	0, 309, 309, 309, 0, 0, 0, 309, 95, 0,
	0, 0, 705, 707, 685, 684, 694, 695, 687, 688,
	689, 690, 691, 692, 693, 686, 0, 0, 696, 0,
	685, 684, 694, 695, 687, 688, 689, 690, 691, 692,
	693, 686, 0, 720, 696, 0, 0, 725, 726, 727,
	728, 729, 730, 731, 732, 0, 735, 738, 738, 738,
	744, 738, 738, 744, 738, 752, 753, 754, 755, 756,
	757, 758, 0, 0, 0, 0, 0, 30, 685, 684,
	694, 695, 687, 688, 689, 690, 691, 692, 693, 686,
	0, 0, 696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 0, 0, 0, 357,
	0, 0, 0, 0, 309, 309, 309, 309, 309, 0,
	0, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	309, 0, 1189, 0, 309, 904, 1190, 0, 0, 309,
	309, 0, 0, 309, 309, 309, 0, 1197, 1198, 0,
	0, 0, 0, 1204, 0, 0, 1207, 1208, 95, 0,
	0, 0, 922, 0, 1214, 0, 0, 0, 1216, 0,
	0, 1219, 1220, 1221, 1222, 1223, 0, 0, 0, 0,
	0, 931, 932, 933, 934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 95, 0, 0, 0, 389, 0, 0,
	1267, 1268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 985, 642, 0,
	0, 0, 95, 0, 0, 0, 0, 642, 642, 642,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 95, 0, 342,
	0, 642, 642, 642, 0, 642, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 459,
	0, 0, 588, 0, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	1081, 95, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	309, 0, 0, 0, 0, 0, 1364, 1365, 0, 0,
	0, 0, 0, 0, 95, 0, 95, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 309, 0, 0,
	0, 0, 0, 95, 0, 0, 95, 95, 95, 309,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1213, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 642, 0,
	642, 0, 0, 0, 0, 95, 1228, 1229, 769, 0,
	0, 1487, 0, 0, 0, 1489, 0, 0, 0, 642,
	459, 0, 0, 95, 0, 0, 1498, 1499, 0, 459,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1519, 0, 0,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 95, 0, 95, 1534, 0,
	0, 0, 95, 0, 95, 95, 95, 309, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 1193,
	0, 0, 423, 0, 0, 0, 0, 0, 0, 95,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 782, 0, 0, 0, 0, 0, 0, 0,
	459, 0, 95, 0, 795, 0, 813, 0, 0, 0,
	0, 1248, 1249, 95, 95, 795, 795, 795, 795, 795,
	0, 0, 0, 0, 0, 0, 1587, 0, 0, 0,
	0, 1057, 0, 1274, 0, 95, 0, 0, 0, 0,
	795, 0, 0, 0, 795, 0, 309, 0, 0, 0,
	0, 1390, 0, 0, 95, 0, 1614, 1615, 1616, 1617,
	0, 1621, 0, 1622, 1623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1402, 0, 0,
	0, 1634, 0, 1635, 1636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1655, 642, 0, 0, 0, 940, 0,
	0, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 0, 0, 0, 0,
	0, 0, 459, 642, 1673, 0, 0, 0, 0, 0,
	0, 459, 459, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 459, 459, 459, 1003, 459,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 459, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	33, 62, 35, 36, 0, 0, 0, 1730, 1731, 0,
	1411, 0, 30, 0, 0, 0, 0, 0, 66, 0,
	1507, 0, 0, 37, 56, 57, 0, 59, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 390, 0,
	354, 795, 0, 0, 0, 0, 0, 0, 1527, 0,
	0, 1528, 0, 0, 1530, 0, 0, 970, 0, 459,
	0, 46, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 338, 0, 0, 0, 0,
	1004, 1005, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 0, 0, 0, 445, 445, 0, 0, 782,
	0, 0, 459, 0, 307, 0, 307, 0, 0, 39,
	40, 42, 41, 44, 0, 58, 0, 0, 0, 0,
	0, 459, 1574, 354, 459, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 459, 588, 0, 45, 65,
	64, 0, 0, 54, 55, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1183, 1184, 1185, 47,
	48, 0, 49, 50, 51, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 1531, 1532, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 459, 0, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 459, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1178, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 0, 30, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 307, 0,
	0, 0, 1411, 0, 307, 0, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 1363, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 1383, 1384, 0, 1385, 1386, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1393, 1394, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 445, 0, 0, 1716, 0, 1325, 459, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 307, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 459, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	459, 0, 0, 1000, 0, 0, 1414, 1416, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 307, 0, 0, 0, 0, 459,
	0, 459, 0, 1446, 0, 0, 0, 0, 307, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 307, 0, 0, 307, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 1480, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1561, 1562, 1563, 1564, 1565, 0, 0, 0, 1568, 1569,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 445,
	899, 0, 0, 0, 445, 445, 0, 0, 445, 445,
	445, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 0, 0, 445, 445, 445, 445, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 0, 0, 459, 0, 307, 0, 0,
	0, 0, 0, 899, 307, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 307, 1062, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1580, 0,
	1582, 0, 1583, 0, 0, 0, 0, 1541, 0, 1541,
	1541, 1541, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 307, 307, 307, 307, 307, 0, 0, 307,
	307, 0, 0, 307, 0, 0, 0, 1644, 0, 0,
	0, 0, 0, 0, 0, 0, 1722, 0, 459, 459,
	0, 307, 0, 0, 0, 0, 0, 1173, 1174, 307,
	0, 0, 0, 307, 0, 0, 0, 0, 1000, 0,
	1669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1675,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1541,
	0, 0, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 445, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1001,
	307, 307, 307, 307, 307, 0, 0, 0, 0, 0,
	0, 0, 1266, 0, 0, 0, 307, 0, 0, 0,
	1062, 0, 0, 0, 0, 307, 307, 0, 0, 307,
	1282, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 0, 0, 0,
	0, 570, 558, 0, 0, 514, 573, 487, 504, 581,
	505, 508, 545, 472, 527, 195, 502, 0, 491, 467,
	498, 468, 489, 516, 131, 520, 486, 560, 530, 572,
	163, 0, 492, 547, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 579, 166,
	536, 0, 245, 183, 0, 0, 0, 518, 562, 525,
	555, 513, 546, 477, 535, 574, 503, 543, 575, 1001,
	0, 0, 96, 0, 1088, 1089, 0, 0, 0, 0,
	0, 118, 307, 540, 569, 500, 542, 544, 583, 466,
	537, 0, 470, 473, 580, 565, 495, 496, 1293, 0,
	0, 0, 0, 0, 0, 517, 526, 552, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 493, 0, 534,
	0, 0, 0, 474, 471, 0, 0, 0, 0, 515,
	0, 0, 0, 476, 0, 494, 553, 0, 464, 142,
	557, 564, 512, 310, 568, 510, 509, 571, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 561, 490, 499, 124, 497, 226, 203, 268,
	533, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 469, 0, 246, 271, 290, 116, 485,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 481, 484, 479,
	480, 528, 529, 576, 577, 578, 554, 475, 0, 482,
	483, 0, 559, 566, 567, 532, 99, 108, 165, 287,
	219, 138, 272, 465, 478, 128, 488, 0, 0, 501,
	506, 507, 519, 521, 522, 523, 524, 531, 538, 539,
	541, 548, 549, 550, 551, 556, 563, 582, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 570, 558, 292,
	0, 514, 573, 487, 504, 581, 505, 508, 545, 472,
	527, 195, 502, 0, 491, 467, 498, 468, 489, 516,
	131, 520, 486, 560, 530, 572, 163, 0, 492, 547,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 579, 166, 536, 0, 245, 183,
	0, 0, 0, 518, 562, 525, 555, 513, 546, 477,
	535, 574, 503, 543, 575, 0, 0, 0, 96, 0,
	1088, 1089, 0, 0, 0, 0, 0, 118, 0, 540,
	569, 500, 542, 544, 583, 466, 537, 0, 470, 473,
	580, 565, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 517, 526, 552, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 493, 0, 534, 0, 0, 0, 474,
	471, 0, 0, 0, 0, 515, 0, 0, 0, 476,
	0, 494, 553, 0, 464, 142, 557, 564, 512, 310,
	568, 510, 509, 571, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 561, 490,
	499, 124, 497, 226, 203, 268, 533, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 469,
	0, 246, 271, 290, 116, 485, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 481, 484, 479, 480, 528, 529, 576,
	577, 578, 554, 475, 0, 482, 483, 0, 559, 566,
	567, 532, 99, 108, 165, 287, 219, 138, 272, 465,
	478, 128, 488, 0, 0, 501, 506, 507, 519, 521,
	522, 523, 524, 531, 538, 539, 541, 548, 549, 550,
	551, 556, 563, 582, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 570, 558, 292, 0, 514, 573, 487,
	504, 581, 505, 508, 545, 472, 527, 195, 502, 0,
	491, 467, 498, 468, 489, 516, 131, 520, 486, 560,
	530, 572, 163, 0, 492, 547, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	579, 166, 536, 0, 245, 183, 0, 0, 0, 518,
	562, 525, 555, 513, 546, 477, 535, 574, 503, 543,
	575, 61, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 540, 569, 500, 542, 544,
	583, 466, 537, 0, 470, 473, 580, 565, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 517, 526, 552,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 534, 0, 0, 0, 474, 471, 0, 0, 0,
	0, 515, 0, 0, 0, 476, 0, 494, 553, 0,
	464, 142, 557, 564, 512, 310, 568, 510, 509, 571,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 561, 490, 499, 124, 497, 226,
	203, 268, 533, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 469, 0, 246, 271, 290,
	116, 485, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 481,
	484, 479, 480, 528, 529, 576, 577, 578, 554, 475,
	0, 482, 483, 0, 559, 566, 567, 532, 99, 108,
	165, 287, 219, 138, 272, 465, 478, 128, 488, 0,
	0, 501, 506, 507, 519, 521, 522, 523, 524, 531,
	538, 539, 541, 548, 549, 550, 551, 556, 563, 582,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 570,
	558, 292, 0, 514, 573, 487, 504, 581, 505, 508,
	545, 472, 527, 195, 502, 0, 491, 467, 498, 468,
	489, 516, 131, 520, 486, 560, 530, 572, 163, 0,
	492, 547, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 579, 166, 536, 0,
	245, 183, 0, 0, 0, 518, 562, 525, 555, 513,
	546, 477, 535, 574, 503, 543, 575, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 540, 569, 500, 542, 544, 583, 466, 537, 0,
	470, 473, 580, 565, 495, 496, 0, 0, 0, 0,
	0, 0, 0, 517, 526, 552, 511, 0, 0, 0,
	0, 0, 0, 1403, 0, 493, 0, 534, 0, 0,
	0, 474, 471, 0, 0, 0, 0, 515, 0, 0,
	0, 476, 0, 494, 553, 0, 464, 142, 557, 564,
	512, 310, 568, 510, 509, 571, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	561, 490, 499, 124, 497, 226, 203, 268, 533, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 469, 0, 246, 271, 290, 116, 485, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 481, 484, 479, 480, 528,
	529, 576, 577, 578, 554, 475, 0, 482, 483, 0,
	559, 566, 567, 532, 99, 108, 165, 287, 219, 138,
	272, 465, 478, 128, 488, 0, 0, 501, 506, 507,
	519, 521, 522, 523, 524, 531, 538, 539, 541, 548,
	549, 550, 551, 556, 563, 582, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 570, 558, 292, 0, 514,
	573, 487, 504, 581, 505, 508, 545, 472, 527, 195,
	502, 0, 491, 467, 498, 468, 489, 516, 131, 520,
	486, 560, 530, 572, 163, 0, 492, 547, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 579, 166, 536, 0, 245, 183, 0, 0,
	0, 518, 562, 525, 555, 513, 546, 477, 535, 574,
	503, 543, 575, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 540, 569, 500,
	542, 544, 583, 466, 537, 0, 470, 473, 580, 565,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 517,
	526, 552, 511, 0, 0, 0, 0, 0, 0, 1283,
	0, 493, 0, 534, 0, 0, 0, 474, 471, 0,
	0, 0, 0, 515, 0, 0, 0, 476, 0, 494,
	553, 0, 464, 142, 557, 564, 512, 310, 568, 510,
	509, 571, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 561, 490, 499, 124,
	497, 226, 203, 268, 533, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 469, 0, 246,
	271, 290, 116, 485, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 481, 484, 479, 480, 528, 529, 576, 577, 578,
	554, 475, 0, 482, 483, 0, 559, 566, 567, 532,
	99, 108, 165, 287, 219, 138, 272, 465, 478, 128,
	488, 0, 0, 501, 506, 507, 519, 521, 522, 523,
	524, 531, 538, 539, 541, 548, 549, 550, 551, 556,
	563, 582, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 570, 558, 292, 0, 514, 573, 487, 504, 581,
	505, 508, 545, 472, 527, 195, 502, 0, 491, 467,
	498, 468, 489, 516, 131, 520, 486, 560, 530, 572,
	163, 0, 492, 547, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 579, 166,
	536, 0, 245, 183, 0, 0, 0, 518, 562, 525,
	555, 513, 546, 477, 535, 574, 503, 543, 575, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 540, 569, 500, 542, 544, 583, 466,
	537, 0, 470, 473, 580, 565, 495, 496, 0, 0,
	0, 0, 0, 0, 0, 517, 526, 552, 511, 0,
	0, 0, 0, 0, 0, 1034, 0, 493, 0, 534,
	0, 0, 0, 474, 471, 0, 0, 0, 0, 515,
	0, 0, 0, 476, 0, 494, 553, 0, 464, 142,
	557, 564, 512, 310, 568, 510, 509, 571, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 561, 490, 499, 124, 497, 226, 203, 268,
	533, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 469, 0, 246, 271, 290, 116, 485,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 481, 484, 479,
	480, 528, 529, 576, 577, 578, 554, 475, 0, 482,
	483, 0, 559, 566, 567, 532, 99, 108, 165, 287,
	219, 138, 272, 465, 478, 128, 488, 0, 0, 501,
	506, 507, 519, 521, 522, 523, 524, 531, 538, 539,
	541, 548, 549, 550, 551, 556, 563, 582, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 570, 558, 292,
	0, 514, 573, 487, 504, 581, 505, 508, 545, 472,
	527, 195, 502, 0, 491, 467, 498, 468, 489, 516,
	131, 520, 486, 560, 530, 572, 163, 0, 492, 547,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 579, 166, 536, 0, 245, 183,
	0, 0, 0, 518, 562, 525, 555, 513, 546, 477,
	535, 574, 503, 543, 575, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 540,
	569, 500, 542, 544, 583, 466, 537, 0, 470, 473,
	580, 565, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 517, 526, 552, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 493, 0, 534, 0, 0, 0, 474,
	471, 0, 0, 0, 0, 515, 0, 0, 0, 476,
	0, 494, 553, 0, 464, 142, 557, 564, 512, 310,
	568, 510, 509, 571, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 561, 490,
	499, 124, 497, 226, 203, 268, 533, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 469,
	0, 246, 271, 290, 116, 485, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 481, 484, 479, 480, 528, 529, 576,
	577, 578, 554, 475, 0, 482, 483, 0, 559, 566,
	567, 532, 99, 108, 165, 287, 219, 138, 272, 465,
	478, 128, 488, 0, 0, 501, 506, 507, 519, 521,
	522, 523, 524, 531, 538, 539, 541, 548, 549, 550,
	551, 556, 563, 582, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 570, 558, 292, 0, 514, 573, 487,
	504, 581, 505, 508, 545, 472, 527, 195, 502, 0,
	491, 467, 498, 468, 489, 516, 131, 520, 486, 560,
	530, 572, 163, 0, 492, 547, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	579, 166, 536, 0, 245, 183, 0, 0, 0, 518,
	562, 525, 555, 513, 546, 477, 535, 574, 503, 543,
	575, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 540, 569, 500, 542, 544,
	583, 466, 537, 0, 470, 473, 580, 565, 495, 496,
	0, 0, 0, 0, 0, 0, 0, 517, 526, 552,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 534, 0, 0, 0, 474, 471, 0, 0, 0,
	0, 515, 0, 0, 0, 476, 0, 494, 553, 0,
	464, 142, 557, 564, 512, 310, 568, 510, 509, 571,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 561, 490, 499, 124, 497, 226,
	203, 268, 533, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 462, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 469, 0, 246, 271, 290,
	116, 485, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 463, 461, 456, 455,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 481,
	484, 479, 480, 528, 529, 576, 577, 578, 554, 475,
	0, 482, 483, 0, 559, 566, 567, 532, 99, 108,
	165, 287, 219, 138, 272, 465, 478, 128, 488, 0,
	0, 501, 506, 507, 519, 521, 522, 523, 524, 531,
	538, 539, 541, 548, 549, 550, 551, 556, 563, 582,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 570,
	558, 292, 0, 514, 573, 487, 504, 581, 505, 508,
	545, 472, 527, 195, 502, 0, 491, 467, 498, 468,
	489, 516, 131, 520, 486, 560, 530, 572, 163, 0,
	492, 547, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 579, 166, 536, 0,
	245, 183, 0, 0, 0, 518, 562, 525, 555, 513,
	546, 477, 535, 574, 503, 543, 575, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 540, 569, 500, 542, 544, 583, 466, 537, 0,
	470, 473, 580, 565, 495, 496, 0, 0, 0, 0,
	0, 0, 0, 517, 526, 552, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 493, 0, 534, 0, 0,
	0, 474, 471, 0, 0, 0, 0, 515, 0, 0,
	0, 476, 0, 494, 553, 0, 464, 142, 557, 564,
	512, 310, 568, 510, 509, 571, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	561, 490, 499, 124, 497, 226, 203, 268, 533, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 804, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 462,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 469, 0, 246, 271, 290, 116, 485, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 463, 461, 456, 455, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 481, 484, 479, 480, 528,
	529, 576, 577, 578, 554, 475, 0, 482, 483, 0,
	559, 566, 567, 532, 99, 108, 165, 287, 219, 138,
	272, 465, 478, 128, 488, 0, 0, 501, 506, 507,
	519, 521, 522, 523, 524, 531, 538, 539, 541, 548,
	549, 550, 551, 556, 563, 582, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 570, 558, 292, 0, 514,
	573, 487, 504, 581, 505, 508, 545, 472, 527, 195,
	502, 0, 491, 467, 498, 468, 489, 516, 131, 520,
	486, 560, 530, 572, 163, 0, 492, 547, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 579, 166, 536, 0, 245, 183, 0, 0,
	0, 518, 562, 525, 555, 513, 546, 477, 535, 574,
	503, 543, 575, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 540, 569, 500,
	542, 544, 583, 466, 537, 0, 470, 473, 580, 565,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 517,
	526, 552, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 534, 0, 0, 0, 474, 471, 0,
	0, 0, 0, 515, 0, 0, 0, 476, 0, 494,
	553, 0, 464, 142, 557, 564, 512, 310, 568, 510,
	509, 571, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 561, 490, 499, 124,
	497, 226, 203, 268, 533, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 453,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 462, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 469, 0, 246,
	271, 290, 116, 485, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 463, 461,
	456, 455, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 481, 484, 479, 480, 528, 529, 576, 577, 578,
	554, 475, 0, 482, 483, 0, 559, 566, 567, 532,
	99, 108, 165, 287, 219, 138, 272, 465, 478, 128,
	488, 0, 0, 501, 506, 507, 519, 521, 522, 523,
	524, 531, 538, 539, 541, 548, 549, 550, 551, 556,
	563, 582, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 292, 972, 0, 359, 0, 0, 0,
	131, 0, 358, 0, 0, 0, 163, 0, 973, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 402, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 393, 394, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 96, 380,
	379, 382, 383, 384, 385, 0, 0, 118, 381, 386,
	387, 388, 0, 0, 0, 0, 356, 373, 0, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	371, 443, 0, 0, 0, 416, 0, 372, 0, 0,
	365, 366, 368, 367, 369, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 415, 0, 0, 310,
	0, 0, 413, 0, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 0, 0,
	0, 124, 0, 226, 203, 268, 0, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 0,
	0, 246, 271, 290, 116, 0, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 403, 414, 409, 410, 407, 408, 406,
	405, 404, 417, 395, 396, 397, 398, 400, 0, 411,
	412, 399, 99, 108, 165, 287, 219, 138, 272, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 195, 0, 292, 0, 0, 359, 0,
	0, 0, 131, 0, 358, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 402, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 393, 394, 0,
	0, 0, 0, 0, 0, 1079, 0, 61, 0, 0,
	96, 380, 379, 382, 383, 384, 385, 0, 0, 118,
	381, 386, 387, 388, 1080, 0, 0, 0, 356, 373,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 416, 0, 372,
	0, 0, 365, 366, 368, 367, 369, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 415, 0,
	0, 310, 0, 0, 413, 0, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 0, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 403, 414, 409, 410, 407,
	408, 406, 405, 404, 417, 395, 396, 397, 398, 400,
	0, 411, 412, 399, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 292, 0, 0,
	359, 0, 0, 0, 131, 0, 358, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 402, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 393,
	394, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 431, 96, 380, 379, 382, 383, 384, 385, 0,
	0, 118, 381, 386, 387, 388, 0, 0, 0, 0,
	356, 373, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 0, 0, 0, 0, 416,
	0, 372, 0, 0, 365, 366, 368, 367, 369, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	415, 0, 0, 310, 0, 0, 413, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 403, 414, 409,
	410, 407, 408, 406, 405, 404, 417, 395, 396, 397,
	398, 400, 0, 411, 412, 399, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 145, 266, 280, 195, 0, 292,
	0, 0, 359, 0, 0, 0, 131, 0, 358, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	402, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 393, 394, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 380, 379, 382, 383, 384,
	385, 0, 0, 118, 381, 386, 387, 388, 0, 0,
	0, 0, 356, 373, 0, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 370, 371, 443, 0, 0,
	0, 416, 0, 372, 0, 0, 365, 366, 368, 367,
	369, 374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 415, 0, 0, 310, 0, 0, 413, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 403,
	414, 409, 410, 407, 408, 406, 405, 404, 417, 395,
	396, 397, 398, 400, 0, 411, 412, 399, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 195,
	0, 292, 0, 0, 359, 0, 0, 0, 131, 0,
	358, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 402, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 393, 394, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 96, 380, 990, 382,
	383, 384, 385, 0, 0, 118, 381, 386, 387, 388,
	0, 0, 0, 0, 356, 373, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 370, 371, 443,
	0, 0, 0, 416, 0, 372, 0, 0, 365, 366,
	368, 367, 369, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 415, 0, 0, 310, 0, 0,
	413, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 403, 414, 409, 410, 407, 408, 406, 405, 404,
	417, 395, 396, 397, 398, 400, 0, 411, 412, 399,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 292, 0, 0, 359, 0, 0, 0,
	131, 0, 358, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 402, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 393, 394, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 96, 380,
	987, 382, 383, 384, 385, 0, 0, 118, 381, 386,
	387, 388, 0, 0, 0, 0, 356, 373, 0, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	371, 443, 0, 0, 0, 416, 0, 372, 0, 0,
	365, 366, 368, 367, 369, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 415, 0, 0, 310,
	0, 0, 413, 0, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 0, 0,
	0, 124, 0, 226, 203, 268, 0, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 0,
	0, 246, 271, 290, 116, 0, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 403, 414, 409, 410, 407, 408, 406,
	405, 404, 417, 395, 396, 397, 398, 400, 0, 411,
	412, 399, 99, 108, 165, 287, 219, 138, 272, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 424, 0, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 359, 0, 0, 0, 131, 0, 358, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 402,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	393, 394, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 96, 380, 379, 382, 383, 384, 385,
	0, 0, 118, 381, 386, 387, 388, 0, 0, 0,
	0, 356, 373, 0, 401, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	416, 0, 372, 0, 0, 365, 366, 368, 367, 369,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 415, 0, 0, 310, 0, 0, 413, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 403, 414,
	409, 410, 407, 408, 406, 405, 404, 417, 395, 396,
	397, 398, 400, 0, 411, 412, 399, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	292, 0, 0, 359, 0, 0, 0, 131, 0, 358,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 402, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 393, 394, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 96, 380, 379, 382, 383,
	384, 385, 0, 0, 118, 381, 386, 387, 388, 0,
	0, 0, 0, 356, 373, 0, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 416, 0, 372, 0, 0, 365, 366, 368,
	367, 369, 374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 415, 0, 0, 310, 0, 0, 413,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	403, 414, 409, 410, 407, 408, 406, 405, 404, 417,
	395, 396, 397, 398, 400, 0, 411, 412, 399, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 292, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 402, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 393, 394, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 96, 380, 379,
	382, 383, 384, 385, 0, 0, 118, 381, 386, 387,
	388, 0, 0, 0, 0, 0, 373, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 370, 371,
	0, 0, 0, 0, 416, 0, 372, 0, 0, 365,
	366, 368, 367, 369, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 415, 0, 0, 310, 0,
	0, 413, 0, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 1723, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 403, 414, 409, 410, 407, 408, 406, 405,
	404, 417, 395, 396, 397, 398, 400, 0, 411, 412,
	399, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 195, 0, 292, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 402, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 393, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 431, 96,
	380, 379, 382, 383, 384, 385, 0, 0, 118, 381,
	386, 387, 388, 0, 0, 0, 0, 0, 373, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	370, 371, 0, 0, 0, 0, 416, 0, 372, 0,
	0, 365, 366, 368, 367, 369, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 415, 0, 0,
	310, 0, 0, 413, 0, 216, 0, 249, 146, 162,
	114, 159, 100, 110, 0, 144, 192, 224, 228, 0,
	0, 0, 124, 0, 226, 203, 268, 0, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	0, 0, 246, 271, 290, 116, 0, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 403, 414, 409, 410, 407, 408,
	406, 405, 404, 417, 395, 396, 397, 398, 400, 0,
	411, 412, 399, 99, 108, 165, 287, 219, 138, 272,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 195, 0, 292, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 402, 166, 0,
	0, 245, 183, 0, 0, 0, 0, 0, 393, 394,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 96, 380, 379, 382, 383, 384, 385, 0, 0,
	118, 381, 386, 387, 388, 0, 0, 0, 0, 0,
	373, 0, 401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 0, 0, 0, 0, 416, 0,
	372, 0, 0, 365, 366, 368, 367, 369, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 415,
	0, 0, 310, 0, 0, 413, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 403, 414, 409, 410,
	407, 408, 406, 405, 404, 417, 395, 396, 397, 398,
	400, 0, 411, 412, 399, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 292, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 684, 694, 695, 687, 688, 689, 690, 691, 692,
	693, 686, 0, 0, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 310, 0, 0, 0, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	292, 0, 781, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 0, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 783, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	674, 675, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 310, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 292, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 0, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 90, 91, 0, 87, 0,
	0, 0, 92, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 0, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 195, 0, 292, 0, 0, 0, 0, 0,
	0, 131, 1104, 0, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 0, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 1103,
	310, 0, 0, 0, 1099, 1096, 0, 1097, 1098, 162,
	591, 159, 100, 110, 1094, 1101, 192, 224, 228, 0,
	0, 0, 124, 0, 226, 203, 268, 0, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	0, 0, 246, 271, 290, 116, 0, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 165, 287, 219, 138, 272,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 31, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	0, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 431, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 310, 0, 0, 0, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 195,
	0, 292, 0, 1061, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 0, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 1063, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 310, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 31, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 0, 166, 0,
	0, 245, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 310, 0, 0, 0, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 292, 0,
	1061, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 1063, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 310, 0, 0, 0, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 1059, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	292, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 0, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 1026, 0,
	0, 1027, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 310, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 292, 0, 0, 0, 0, 0, 0, 131,
	0, 815, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 0, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 814,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 310, 0,
	0, 0, 0, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 0, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 195, 0, 292, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 163, 0, 0,
	0, 237, 123, 171, 169, 255, 136, 132, 130, 122,
	152, 175, 205, 252, 199, 0, 166, 0, 0, 245,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 0,
	310, 0, 0, 0, 0, 216, 0, 249, 146, 162,
	591, 159, 100, 110, 589, 144, 192, 224, 228, 0,
	0, 0, 124, 0, 226, 203, 268, 0, 206, 225,
	167, 257, 217, 267, 277, 278, 253, 275, 286, 242,
	103, 251, 265, 119, 236, 0, 0, 0, 105, 263,
	248, 181, 156, 157, 104, 0, 222, 129, 140, 126,
	194, 260, 261, 125, 289, 111, 274, 107, 112, 273,
	188, 256, 264, 182, 174, 106, 262, 180, 173, 161,
	135, 148, 214, 170, 215, 149, 185, 184, 186, 0,
	0, 0, 246, 271, 290, 116, 0, 254, 282, 285,
	0, 218, 117, 141, 134, 213, 139, 164, 281, 283,
	284, 187, 113, 151, 243, 160, 168, 221, 288, 202,
	227, 120, 270, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 165, 287, 219, 138, 272,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	127, 133, 137, 143, 147, 150, 153, 154, 155, 158,
	172, 176, 177, 178, 179, 189, 190, 191, 193, 196,
	197, 198, 200, 201, 204, 207, 208, 209, 210, 211,
	212, 220, 223, 229, 230, 231, 232, 233, 234, 235,
	238, 239, 240, 241, 247, 250, 258, 259, 269, 276,
	279, 145, 266, 280, 195, 0, 292, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 163,
	0, 0, 0, 237, 123, 171, 169, 255, 136, 132,
	130, 122, 152, 175, 205, 252, 199, 0, 166, 0,
	0, 245, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	431, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 310, 0, 0, 0, 0, 216, 0, 249,
	146, 162, 114, 159, 100, 110, 0, 144, 192, 224,
	228, 0, 0, 0, 124, 0, 226, 203, 268, 0,
	206, 225, 167, 257, 217, 267, 277, 278, 253, 275,
	286, 242, 103, 251, 265, 119, 236, 0, 0, 0,
	105, 263, 248, 181, 156, 157, 104, 0, 222, 129,
	140, 126, 194, 260, 261, 125, 289, 111, 274, 107,
	112, 273, 188, 256, 264, 182, 174, 106, 262, 180,
	173, 161, 135, 148, 214, 170, 215, 149, 185, 184,
	186, 0, 0, 0, 246, 271, 290, 116, 0, 254,
	282, 285, 0, 218, 117, 141, 134, 213, 139, 164,
	281, 283, 284, 187, 113, 151, 243, 160, 168, 221,
	288, 202, 227, 120, 270, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 165, 287, 219,
	138, 272, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 127, 133, 137, 143, 147, 150, 153, 154,
	155, 158, 172, 176, 177, 178, 179, 189, 190, 191,
	193, 196, 197, 198, 200, 201, 204, 207, 208, 209,
	210, 211, 212, 220, 223, 229, 230, 231, 232, 233,
	234, 235, 238, 239, 240, 241, 247, 250, 258, 259,
	269, 276, 279, 145, 266, 280, 195, 0, 292, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	0, 163, 0, 0, 0, 237, 123, 171, 169, 255,
	136, 132, 130, 122, 152, 175, 205, 252, 199, 0,
	166, 0, 0, 245, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 310, 0, 0, 0, 0, 216,
	0, 249, 146, 162, 114, 159, 100, 110, 0, 144,
	192, 224, 228, 0, 0, 0, 124, 0, 226, 203,
	268, 0, 206, 225, 167, 257, 217, 267, 277, 278,
	253, 275, 286, 242, 103, 251, 265, 119, 236, 0,
	0, 0, 105, 263, 248, 181, 156, 157, 104, 0,
	222, 129, 140, 126, 194, 260, 261, 125, 289, 111,
	274, 107, 112, 273, 188, 256, 264, 182, 174, 106,
	262, 180, 173, 161, 135, 148, 214, 170, 215, 149,
	185, 184, 186, 0, 0, 0, 246, 271, 290, 116,
	0, 254, 282, 285, 0, 218, 117, 141, 134, 213,
	139, 164, 281, 283, 284, 187, 113, 151, 243, 160,
	168, 221, 288, 202, 227, 120, 270, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 165,
	287, 219, 138, 272, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 127, 133, 137, 143, 147, 150,
	153, 154, 155, 158, 172, 176, 177, 178, 179, 189,
	190, 191, 193, 196, 197, 198, 200, 201, 204, 207,
	208, 209, 210, 211, 212, 220, 223, 229, 230, 231,
	232, 233, 234, 235, 238, 239, 240, 241, 247, 250,
	258, 259, 269, 276, 279, 145, 266, 280, 195, 0,
	292, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 0, 163, 0, 0, 0, 237, 123, 171,
	169, 255, 136, 132, 130, 122, 152, 175, 205, 252,
	199, 0, 166, 0, 0, 245, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 1063, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 310, 0, 0, 0,
	0, 216, 0, 249, 146, 162, 114, 159, 100, 110,
	0, 144, 192, 224, 228, 0, 0, 0, 124, 0,
	226, 203, 268, 0, 206, 225, 167, 257, 217, 267,
	277, 278, 253, 275, 286, 242, 103, 251, 265, 119,
	236, 0, 0, 0, 105, 263, 248, 181, 156, 157,
	104, 0, 222, 129, 140, 126, 194, 260, 261, 125,
	289, 111, 274, 107, 112, 273, 188, 256, 264, 182,
	174, 106, 262, 180, 173, 161, 135, 148, 214, 170,
	215, 149, 185, 184, 186, 0, 0, 0, 246, 271,
	290, 116, 0, 254, 282, 285, 0, 218, 117, 141,
	134, 213, 139, 164, 281, 283, 284, 187, 113, 151,
	243, 160, 168, 221, 288, 202, 227, 120, 270, 244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 165, 287, 219, 138, 272, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 127, 133, 137, 143,
	147, 150, 153, 154, 155, 158, 172, 176, 177, 178,
	179, 189, 190, 191, 193, 196, 197, 198, 200, 201,
	204, 207, 208, 209, 210, 211, 212, 220, 223, 229,
	230, 231, 232, 233, 234, 235, 238, 239, 240, 241,
	247, 250, 258, 259, 269, 276, 279, 145, 266, 280,
	195, 0, 292, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 0, 163, 0, 0, 0, 237,
	123, 171, 169, 255, 136, 132, 130, 122, 152, 175,
	205, 252, 199, 0, 166, 0, 0, 245, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 783,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 310, 0,
	0, 0, 0, 216, 0, 249, 146, 162, 114, 159,
	100, 110, 0, 144, 192, 224, 228, 0, 0, 0,
	124, 0, 226, 203, 268, 0, 206, 225, 167, 257,
	217, 267, 277, 278, 253, 275, 286, 242, 103, 251,
	265, 119, 236, 0, 0, 0, 105, 263, 248, 181,
	156, 157, 104, 0, 222, 129, 140, 126, 194, 260,
	261, 125, 289, 111, 274, 107, 112, 273, 188, 256,
	264, 182, 174, 106, 262, 180, 173, 161, 135, 148,
	214, 170, 215, 149, 185, 184, 186, 0, 0, 0,
	246, 271, 290, 116, 0, 254, 282, 285, 0, 218,
	117, 141, 134, 213, 139, 164, 281, 283, 284, 187,
	113, 151, 243, 160, 168, 221, 288, 202, 227, 120,
	270, 244, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 165, 287, 219, 138, 272, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 127, 133,
	137, 143, 147, 150, 153, 154, 155, 158, 172, 176,
	177, 178, 179, 189, 190, 191, 193, 196, 197, 198,
	200, 201, 204, 207, 208, 209, 210, 211, 212, 220,
	223, 229, 230, 231, 232, 233, 234, 235, 238, 239,
	240, 241, 247, 250, 258, 259, 269, 276, 279, 145,
	266, 280, 797, 0, 292, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 0, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 310, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 195, 0, 292, 0, 0, 0, 0, 0, 787,
	131, 0, 0, 0, 0, 0, 163, 0, 0, 0,
	237, 123, 171, 169, 255, 136, 132, 130, 122, 152,
	175, 205, 252, 199, 0, 166, 0, 0, 245, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 310,
	0, 0, 0, 0, 216, 0, 249, 146, 162, 114,
	159, 100, 110, 0, 144, 192, 224, 228, 0, 0,
	0, 124, 0, 226, 203, 268, 0, 206, 225, 167,
	257, 217, 267, 277, 278, 253, 275, 286, 242, 103,
	251, 265, 119, 236, 0, 0, 0, 105, 263, 248,
	181, 156, 157, 104, 0, 222, 129, 140, 126, 194,
	260, 261, 125, 289, 111, 274, 107, 112, 273, 188,
	256, 264, 182, 174, 106, 262, 180, 173, 161, 135,
	148, 214, 170, 215, 149, 185, 184, 186, 0, 0,
	0, 246, 271, 290, 116, 0, 254, 282, 285, 0,
	218, 117, 141, 134, 213, 139, 164, 281, 283, 284,
	187, 113, 151, 243, 160, 168, 221, 288, 202, 227,
	120, 270, 244, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 165, 287, 219, 138, 272, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 127,
	133, 137, 143, 147, 150, 153, 154, 155, 158, 172,
	176, 177, 178, 179, 189, 190, 191, 193, 196, 197,
	198, 200, 201, 204, 207, 208, 209, 210, 211, 212,
	220, 223, 229, 230, 231, 232, 233, 234, 235, 238,
	239, 240, 241, 247, 250, 258, 259, 269, 276, 279,
	145, 266, 280, 195, 0, 292, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 163, 0,
	0, 0, 237, 123, 171, 169, 255, 136, 132, 130,
	122, 152, 175, 205, 252, 199, 0, 166, 0, 0,
	245, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 663, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 310, 0, 0, 0, 0, 216, 0, 249, 146,
	162, 114, 159, 100, 110, 0, 144, 192, 224, 228,
	0, 0, 0, 124, 0, 226, 203, 268, 0, 206,
	225, 167, 257, 217, 267, 277, 278, 253, 275, 286,
	242, 103, 251, 265, 119, 236, 0, 0, 0, 105,
	263, 248, 181, 156, 157, 104, 0, 222, 129, 140,
	126, 194, 260, 261, 125, 289, 111, 274, 107, 112,
	273, 188, 256, 264, 182, 174, 106, 262, 180, 173,
	161, 135, 148, 214, 170, 215, 149, 185, 184, 186,
	0, 0, 0, 246, 271, 290, 116, 0, 254, 282,
	285, 0, 218, 117, 141, 134, 213, 139, 164, 281,
	283, 284, 187, 113, 151, 243, 160, 168, 221, 288,
	202, 227, 120, 270, 244, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 165, 287, 219, 138,
	272, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 127, 133, 137, 143, 147, 150, 153, 154, 155,
	158, 172, 176, 177, 178, 179, 189, 190, 191, 193,
	196, 197, 198, 200, 201, 204, 207, 208, 209, 210,
	211, 212, 220, 223, 229, 230, 231, 232, 233, 234,
	235, 238, 239, 240, 241, 247, 250, 258, 259, 269,
	276, 279, 145, 266, 280, 195, 0, 292, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	163, 0, 0, 0, 237, 123, 171, 169, 255, 136,
	132, 130, 122, 152, 175, 205, 252, 199, 0, 166,
	0, 0, 245, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 0, 142,
	0, 0, 0, 310, 0, 0, 0, 0, 216, 0,
	249, 146, 162, 114, 159, 100, 110, 0, 144, 192,
	224, 228, 0, 0, 0, 124, 0, 226, 203, 268,
	0, 206, 225, 167, 257, 217, 267, 277, 278, 253,
	275, 286, 242, 103, 251, 265, 119, 236, 0, 0,
	0, 105, 263, 248, 181, 156, 157, 104, 0, 222,
	129, 140, 126, 194, 260, 261, 125, 289, 111, 274,
	107, 112, 273, 188, 256, 264, 182, 174, 106, 262,
	180, 173, 161, 135, 148, 214, 170, 215, 149, 185,
	184, 186, 0, 0, 0, 246, 271, 290, 116, 0,
	254, 282, 285, 0, 218, 117, 141, 134, 213, 139,
	164, 281, 283, 284, 187, 113, 151, 243, 160, 168,
	221, 288, 202, 227, 120, 270, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 165, 287,
	219, 138, 272, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 127, 133, 137, 143, 147, 150, 153,
	154, 155, 158, 172, 176, 177, 178, 179, 189, 190,
	191, 193, 196, 197, 198, 200, 201, 204, 207, 208,
	209, 210, 211, 212, 220, 223, 229, 230, 231, 232,
	233, 234, 235, 238, 239, 240, 241, 247, 250, 258,
	259, 269, 276, 279, 346, 266, 280, 195, 0, 292,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 163, 0, 0, 0, 237, 123, 171, 169,
	255, 136, 132, 130, 122, 152, 175, 205, 252, 199,
	0, 166, 0, 0, 245, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 305, 0, 310, 0, 0, 0, 0,
	216, 0, 249, 146, 162, 114, 159, 100, 110, 0,
	144, 192, 224, 228, 0, 0, 0, 124, 0, 226,
	203, 268, 0, 206, 225, 167, 257, 217, 267, 277,
	278, 253, 275, 286, 242, 103, 251, 265, 119, 236,
	0, 0, 0, 105, 263, 248, 181, 156, 157, 104,
	0, 222, 129, 140, 126, 194, 260, 261, 125, 289,
	111, 274, 107, 112, 273, 188, 256, 264, 182, 174,
	106, 262, 180, 173, 161, 135, 148, 214, 170, 215,
	149, 185, 184, 186, 0, 0, 0, 246, 271, 290,
	116, 0, 254, 282, 285, 0, 218, 117, 141, 134,
	213, 139, 164, 281, 283, 284, 187, 113, 151, 243,
	160, 168, 221, 288, 202, 227, 120, 270, 244, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	165, 287, 219, 138, 272, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 127, 133, 137, 143, 147,
	150, 153, 154, 155, 158, 172, 176, 177, 178, 179,
	189, 190, 191, 193, 196, 197, 198, 200, 201, 204,
	207, 208, 209, 210, 211, 212, 220, 223, 229, 230,
	231, 232, 233, 234, 235, 238, 239, 240, 241, 247,
	250, 258, 259, 269, 276, 279, 145, 266, 280, 195,
	0, 292, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 163, 0, 0, 0, 237, 123,
	171, 169, 255, 136, 132, 130, 122, 152, 175, 205,
	252, 199, 0, 166, 0, 0, 245, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 0, 0, 0, 310, 0, 0,
	0, 0, 216, 0, 249, 146, 162, 114, 159, 100,
	110, 0, 144, 192, 224, 228, 0, 0, 0, 124,
	0, 226, 203, 268, 0, 206, 225, 167, 257, 217,
	267, 277, 278, 253, 275, 286, 242, 103, 251, 265,
	119, 236, 0, 0, 0, 105, 263, 248, 181, 156,
	157, 104, 0, 222, 129, 140, 126, 194, 260, 261,
	125, 289, 111, 274, 107, 112, 273, 188, 256, 264,
	182, 174, 106, 262, 180, 173, 161, 135, 148, 214,
	170, 215, 149, 185, 184, 186, 0, 0, 0, 246,
	271, 290, 116, 0, 254, 282, 285, 0, 218, 117,
	141, 134, 213, 139, 164, 281, 283, 284, 187, 113,
	151, 243, 160, 168, 221, 288, 202, 227, 120, 270,
	244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 165, 287, 219, 138, 272, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 127, 133, 137,
	143, 147, 150, 153, 154, 155, 158, 172, 176, 177,
	178, 179, 189, 190, 191, 193, 196, 197, 198, 200,
	201, 204, 207, 208, 209, 210, 211, 212, 220, 223,
	229, 230, 231, 232, 233, 234, 235, 238, 239, 240,
	241, 247, 250, 258, 259, 269, 276, 279, 145, 266,
	280, 0, 0, 292,
}
var yyPact = [...]int{

	2742, -1000, -279, 1120, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1062,
	829, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 256, 12811,
	0, 145, 22, 18998, 144, 95, 19360, -1000, 24, -1000,
	14, 19360, 18, 18636, -1000, -1000, -56, -79, -1000, 10639,
	951, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 825,
	1035, 1034, 1049, 731, 1017, -1000, 9178, 9178, 117, 117,
	117, 7730, -1000, -1000, 15733, 19360, 140, 19360, -135, 120,
	120, 120, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40, -1000, 143, 19360, 34, 34, 263, 537, 19360,
	115, 34, 115, 115, 115, 19360, -1000, 185, -1000, -1000,
	-1000, 19360, 34, 966, 345, 32, 218, 218, 218, -1000,
	219, -1000, 5098, 38, 31, -51, 1076, 36, -7, -1000,
	345, 5098, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	130, -1000, -1000, 19360, 18274, 142, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, 564, 383, -1000, 10639, 1671, 759, 759,
	-1000, -1000, 172, -1000, -1000, 11725, 11725, 11725, 11725, 11725,
	11725, 11725, 11725, 11725, 11725, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 759,
	184, -1000, 10277, 759, 759, 759, 759, 759, 759, 759,
	759, 10639, 759, 759, 759, 759, 759, 759, 759, 759,
	759, 759, 759, 759, 759, 759, 759, 759, -1000, -1000,
	-1000, 1062, -1000, 829, -1000, -1000, -1000, 993, 10639, 10639,
	1062, -1000, 873, 9178, -1000, -1000, 978, -1000, -1000, -1000,
	-1000, 309, 1087, -1000, 12449, 183, 1085, 17912, -1000, 16457,
	17550, 754, 7354, -75, -1000, -1000, -1000, 257, 15371, -1000,
	-1000, -1000, 962, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 737, 19360, -1000, -1000, 333, 34,
	-1000, 771, -1000, 34, 5098, 134, 34, 277, 34, 19360,
	448, -1000, 19360, 5098, 5098, 5098, 52, 96, 71, 19360,
	534, 751, 128, 19360, 1025, 808, 19360, 34, 34, -1000,
	6602, -1000, 5098, 345, -1000, 533, 10639, 5098, 5098, 5098,
	19360, 5098, 5098, -1000, 529, -1000, -1000, 314, -1000, -1000,
	-1000, -1000, -1000, -1000, 5098, 5098, 313, 314, 313, -1000,
	-1000, -1000, -1000, 10639, 218, -1000, 807, -1000, -1000, 17,
	-1000, -1000, -1000, -1000, -1000, 1120, -1000, -1000, -1000, -112,
	-1000, -1000, 10639, 10639, 10639, 10639, 574, 221, 11725, 318,
	296, 11725, 11725, 11725, 11725, 11725, 11725, 11725, 11725, 11725,
	11725, 11725, 11725, 11725, 11725, 11725, 33, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 34, -1000, 1118, 679, 679,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 12087,
	8092, 6602, 731, 725, 1062, 9178, 9178, 10639, 10639, 9902,
	9540, 9178, 996, 269, 383, 19360, -1000, -1000, 11363, -1000,
	-1000, -1000, -1000, -1000, 512, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19360, 19360, 9178, 9178, 9178, 9178, 9178, -1000,
	1034, 731, 978, 1006, 1107, 215, 601, 750, -1000, 563,
	1034, 15009, 793, -1000, 978, -1000, -1000, -1000, 19360, -1000,
	-1000, 17181, -1000, -1000, 6226, 19360, 67, 19360, -1000, 762,
	847, -1000, -1000, -1000, 1018, 14285, 14647, 19360, 783, 782,
	-1000, -1000, 181, 6978, -75, -1000, 6978, 741, -1000, -113,
	-102, 8454, 193, -1000, -1000, -1000, -1000, 4722, 13173, 592,
	295, -40, -1000, -1000, -1000, 765, -1000, 765, 765, 765,
	765, -10, -10, -10, -10, -1000, -1000, -1000, -1000, -1000,
	788, 786, -1000, 765, 765, 765, 765, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 785, 785, 785, 769, 769, 102,
	10639, 794, -1000, 19360, 5098, 1024, 5098, -1000, -1000, 116,
	-1000, -1000, -1000, 19360, 19360, 19360, 19360, 19360, 159, -1000,
	19360, 19360, 748, -1000, 19360, 5098, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 383, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 19360, -1000, -1000, -1000, -1000, 345, 19360, 19360,
	19360, 345, 383, -1000, 19360, 19360, -1000, -1000, -1000, -1000,
	-1000, 383, 221, 405, 310, -1000, -1000, 547, -1000, -1000,
	1825, -1000, -1000, -1000, -1000, 318, 11725, 11725, 11725, 456,
	1825, 1761, 1566, 1252, 195, 520, 520, 197, 197, 197,
	197, 197, 610, 610, -1000, -1000, -1000, 512, -1000, -1000,
	-1000, 512, 9178, 9178, 747, 759, 180, -1000, 825, -1000,
	-1000, 1034, 715, 715, 578, 500, 446, 1084, 715, 360,
	1071, 715, 715, 9178, -1000, -1000, 270, -1000, 10639, 512,
	-1000, 175, -1000, 888, 743, 742, 715, 512, 512, 715,
	715, 993, -1000, -1000, 946, -1000, 868, 10639, 10639, 10639,
	-1000, -1000, -1000, 993, 1070, -1000, 894, 893, 1072, 9178,
	16457, 978, -1000, -1000, -1000, 171, 1072, 756, 759, -1000,
	19360, 16457, 16457, 16457, 16457, 16457, -1000, 855, 846, -1000,
	874, 856, 889, 19360, -1000, 717, 731, 14285, 194, 759,
	-1000, 16819, -1000, -1000, 67, 642, 16457, 19360, -1000, -1000,
	16457, 19360, 5850, -1000, 741, -75, -94, -1000, -1000, -1000,
	-1000, 383, -1000, 37, 735, 4346, -1000, -1000, -1000, -1000,
	90, -1000, -1000, 774, 34, -1000, 997, 253, 253, 83,
	34, 994, -1000, -1000, -1000, -1000, 968, -1000, 294, -45,
	-1000, -1000, 375, -10, -10, -1000, -1000, 193, 961, 193,
	193, 193, 523, 523, -1000, -1000, -1000, -1000, -1000, 370,
	-1000, -1000, -1000, 342, -1000, -1000, 771, 632, 805, 19360,
	5098, -1000, -1000, -1000, -1000, 73, 73, 250, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 64,
	791, -1000, -1000, -1000, -1000, 23, 50, 123, -1000, 5098,
	-1000, 313, -1000, -1000, -1000, 313, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 456, 1825, 367, -1000, 11725, 11725, -1000,
	-1000, 715, 715, 9178, 6602, 1062, 993, -1000, -1000, 509,
	33, 509, 11725, 11725, -1000, 11725, 11725, -1000, -149, 635,
	261, -1000, 10639, 609, -1000, 6602, -1000, 11725, 11725, -1000,
	-1000, -1000, -1000, -1000, -1000, 439, 518, 866, 383, 383,
	-1000, -1000, 19360, -1000, -1000, -1000, -1000, 1067, 10639, -1000,
	678, -1000, 5474, 1034, 802, 19360, 759, 1120, 13548, 19360,
	772, -1000, 237, 847, 779, 800, 1205, -1000, -1000, -1000,
	-1000, 822, -1000, 821, -1000, -1000, -1000, -1000, -1000, 731,
	-1000, 139, 138, 137, 19360, -1000, 1072, 16457, 690, -1000,
	690, -1000, 169, -1000, -1000, -1000, -103, -114, -1000, -1000,
	-1000, 4722, -1000, 4722, -1000, 19360, 88, -1000, 34, 34,
	34, -1000, -1000, -1000, 770, 799, 11725, -1000, -1000, -1000,
	552, 193, 193, -1000, 30, -1000, -1000, -1000, 709, -1000,
	703, 599, 701, 29, 19360, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19360, -1000, -1000, -1000, -1000, -1000,
	19360, -162, 34, 19360, 19360, 19360, 19360, -1000, 345, 345,
	-1000, 11725, 1825, 1825, -1000, -1000, 512, -1000, 1034, -1000,
	512, 765, 765, -1000, 765, 769, -1000, 765, 7, 765,
	6, 512, 512, 1777, 1588, 1366, 1294, 759, -143, -1000,
	383, 10639, -1000, 1069, 857, 472, -10, -1000, -1000, -1000,
	1065, 1048, 383, -1000, -1000, -1000, 1001, 676, 548, -1000,
	-1000, 8816, 699, 884, 165, 696, -1000, 1062, 19360, 10639,
	-1000, -1000, 10639, 767, -1000, 10639, -1000, -1000, -1000, 1062,
	759, 759, 759, 696, 1062, 690, -1000, -1000, 192, -1000,
	-1000, -1000, 4346, -1000, 694, -1000, 765, -1000, 994, -1000,
	-1000, -1000, 19360, -35, 1106, 1825, -1000, -1000, -1000, -1000,
	-1000, -10, 470, -10, 339, -1000, 335, -1000, -1000, -209,
	5098, -1000, -1000, -1000, -1000, 995, -1000, 6602, -1000, -1000,
	764, 792, -1000, -1000, -1000, -1000, 1825, -1000, 993, -1000,
	-1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11725, 11725, 11725, 11725, 11725, 1034, 457, 383, 11725, 11725,
	-10, -59, -1000, 10639, 10639, 991, -1000, 759, -1000, 775,
	19360, 759, 19360, -1000, 19360, 1034, -1000, 383, 383, 19360,
	383, 16095, 19360, 19360, 13910, 1034, -1000, 177, 19360, -1000,
	668, -1000, 232, -1000, -93, 193, -1000, 193, 550, 541,
	-1000, -1000, 759, 575, -1000, 234, 19360, 19360, -1000, -1000,
	-1000, 888, 888, 888, 888, 320, 512, -1000, 888, 888,
	-273, -1000, 944, 926, 383, 564, 1101, -1000, 759, 1120,
	153, 548, -1000, -1000, -1000, 637, 621, -1000, 621, 621,
	194, -1000, 177, -1000, 34, 233, 449, -1000, 79, 19360,
	305, 990, -1000, 987, -1000, -1000, -1000, -1000, -1000, 63,
	6602, 4722, 615, -1000, -1000, -1000, -1000, -1000, 512, 72,
	-165, -1000, -1000, -1000, -59, 157, -1000, 904, 890, 1047,
	19360, 548, 19360, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	315, -1000, -1000, 19360, -1000, -1000, 423, -1000, -1000, 605,
	-1000, 19360, -1000, -1000, 791, -1000, 861, -159, -169, 908,
	910, 910, 926, 1046, 924, 920, -1000, 401, 524, -1000,
	-1000, 760, -1000, -1000, 63, 882, -162, -1000, 833, -1000,
	906, 429, -1000, -1000, -1000, -1000, 394, -1000, 1044, 1042,
	-1000, 19360, -1000, 41, -1000, -163, -1000, 340, -1000, -1000,
	-1000, 384, 346, 590, 39, -167, -1000, -1000, -1000, -1000,
	798, 759, -170, 797, -1000, 1081, 11001, -1000, -1000, 1083,
	213, 213, 888, 512, -1000, -1000, -1000, 93, 434, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1424, 1423, 49, 72, 76, 1422, 1420, 1406, 1405,
	122, 121, 117, 1404, 1403, 1402, 1398, 1397, 1396, 1394,
	1391, 1385, 1384, 1383, 1381, 1377, 1364, 1363, 1362, 1361,
	1360, 1359, 1358, 1352, 101, 1350, 1349, 1348, 1347, 1346,
	1342, 1341, 1340, 1339, 87, 51, 174, 57, 79, 1338,
	66, 1378, 1337, 43, 89, 69, 1336, 38, 1335, 1334,
	99, 1333, 1332, 70, 1331, 1329, 74, 1324, 64, 1319,
	14, 32, 1318, 1317, 1316, 1306, 93, 1979, 1305, 1304,
	17, 1303, 1298, 107, 1297, 75, 34, 18, 42, 20,
	1293, 71, 1291, 9, 1290, 73, 1288, 1285, 1284, 1282,
	30, 1281, 68, 1280, 78, 1279, 7, 11, 1271, 1264,
	1263, 1262, 1260, 1258, 5, 1253, 1252, 1247, 23, 1246,
	21, 65, 37, 19, 10, 1245, 1244, 25, 90, 62,
	84, 1239, 1238, 1234, 504, 1230, 1229, 55, 1228, 120,
	1225, 29, 91, 124, 379, 1224, 1222, 1221, 1217, 1216,
	1215, 45, 942, 2087, 16, 83, 1214, 1213, 1212, 2788,
	41, 67, 15, 1210, 1209, 1208, 36, 53, 35, 520,
	1207, 39, 1200, 1199, 1198, 1197, 1180, 1179, 1178, 275,
	1177, 1176, 1175, 104, 31, 77, 24, 1174, 1173, 1171,
	1169, 48, 80, 1167, 1166, 63, 61, 1165, 96, 27,
	1164, 1163, 1162, 1158, 1157, 28, 8, 1156, 22, 1155,
	13, 1150, 26, 33, 1146, 4, 1145, 12, 1144, 3,
	0, 1139, 6, 59, 58, 56, 1137, 1, 1135, 2,
	1133, 1132, 1127, 1513, 1034, 81, 1126, 100,
}
var yyR1 = [...]int{

	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 220, 220, 220, 225, 224, 226, 21, 33, 3,
	3, 3, 3, 2, 2, 8, 9, 4, 5, 5,
	10, 10, 38, 38, 11, 12, 12, 12, 12, 235,
	235, 60, 60, 61, 61, 121, 121, 13, 14, 14,
	130, 130, 129, 129, 129, 131, 131, 131, 131, 169,
	169, 15, 15, 15, 15, 15, 15, 15, 222, 222,
	221, 219, 219, 218, 218, 217, 22, 201, 203, 203,
	202, 202, 202, 202, 202, 202, 192, 172, 172, 172,
	172, 175, 175, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 174, 174, 174, 174, 174, 176, 176, 176,
	176, 176, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 191, 191, 179, 179, 185,
	185, 186, 186, 186, 188, 188, 189, 189, 145, 145,
	145, 181, 181, 182, 182, 187, 187, 183, 183, 183,
	184, 184, 184, 190, 190, 190, 190, 190, 180, 180,
	193, 193, 211, 211, 210, 210, 210, 200, 200, 207,
	207, 207, 207, 207, 207, 197, 197, 197, 198, 198,
	196, 196, 199, 199, 209, 209, 208, 194, 194, 195,
	195, 212, 212, 212, 212, 212, 213, 228, 229, 227,
	227, 227, 227, 227, 146, 146, 146, 204, 204, 204,
	205, 205, 205, 206, 206, 206, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 216, 214, 214,
	215, 215, 17, 23, 23, 18, 18, 18, 18, 18,
	19, 19, 24, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 138, 138, 230, 230, 140, 140, 136,
	136, 139, 139, 137, 137, 137, 141, 141, 141, 142,
	142, 170, 170, 170, 26, 26, 28, 28, 29, 30,
	30, 164, 164, 165, 165, 31, 32, 37, 37, 37,
	37, 37, 37, 39, 39, 39, 7, 7, 7, 7,
	36, 36, 36, 6, 6, 27, 27, 27, 27, 20,
	236, 34, 35, 35, 44, 44, 44, 40, 40, 40,
	43, 43, 43, 47, 47, 49, 49, 49, 49, 49,
	50, 50, 50, 50, 50, 50, 46, 46, 48, 48,
	48, 48, 156, 156, 156, 155, 155, 52, 52, 53,
	53, 54, 54, 55, 55, 55, 92, 69, 69, 120,
	120, 122, 122, 56, 56, 56, 56, 57, 57, 58,
	58, 59, 59, 163, 163, 162, 162, 162, 161, 161,
	62, 62, 62, 64, 63, 63, 63, 63, 65, 65,
	67, 67, 66, 66, 68, 70, 70, 70, 70, 70,
	71, 71, 51, 51, 51, 51, 51, 51, 51, 51,
	133, 133, 73, 73, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 84, 84, 84, 84, 84, 84,
	74, 74, 74, 74, 74, 74, 74, 45, 45, 85,
	85, 85, 91, 86, 86, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 81,
	81, 81, 81, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 237, 237, 83, 82, 82, 82, 82, 82,
	82, 82, 42, 42, 42, 42, 42, 168, 168, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 96, 96, 41, 41, 94, 94, 95, 97,
	97, 93, 93, 93, 76, 76, 76, 76, 76, 76,
	76, 76, 78, 78, 78, 98, 98, 99, 99, 100,
	100, 101, 101, 102, 103, 103, 103, 104, 104, 104,
	104, 118, 118, 118, 105, 105, 105, 105, 110, 110,
	110, 106, 106, 108, 108, 108, 109, 109, 109, 107,
	113, 113, 115, 115, 114, 114, 112, 112, 117, 117,
	116, 116, 111, 111, 75, 75, 75, 75, 75, 119,
	119, 119, 119, 123, 123, 87, 87, 89, 89, 88,
	90, 124, 124, 127, 125, 125, 128, 128, 128, 128,
	128, 126, 126, 126, 158, 158, 158, 132, 132, 143,
	143, 144, 144, 134, 134, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 135, 135, 135, 148, 148,
	148, 149, 149, 150, 150, 150, 157, 157, 153, 153,
	154, 154, 159, 159, 160, 160, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 233,
	234, 166, 167, 167, 167,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 3, 2, 1, 2, 3, 5,
	6, 6, 7, 4, 6, 5, 7, 8, 1, 3,
	7, 8, 1, 1, 9, 9, 8, 7, 7, 1,
	1, 1, 3, 1, 3, 0, 4, 3, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 1, 3, 4, 3, 3, 8, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 0, 1,
	2, 0, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 2, 0, 2, 1, 2, 1, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 3,
	1, 10, 11, 11, 12, 1, 5, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 7,
	7, 4, 5, 4, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 3, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 2, 7, 2, 3, 4,
	5, 7, 5, 4, 2, 4, 4, 3, 3, 5,
	2, 3, 3, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	5, 0, 1, 0, 1, 2, 3, 0, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 3, 3, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 2, 3, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 0, 9, 3, 5, 0, 3,
	3, 0, 1, 0, 2, 2, 0, 2, 2, 2,
	0, 3, 0, 3, 0, 3, 0, 4, 0, 3,
	0, 4, 0, 1, 2, 1, 5, 4, 4, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 3, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -231, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -33, -4,
	-233, 6, 7, 8, -38, 10, 11, 31, -22, 137,
	138, 140, 139, 173, 141, 166, 69, 187, 188, 190,
	191, 192, 193, -39, 171, 172, 32, 33, 143, 35,
	40, 73, 9, 280, 168, 167, 26, -232, 382, -44,
	5, -100, 16, -3, -34, -236, -34, -34, -34, -34,
	-34, -34, -201, -203, 73, 110, -150, 147, 91, 272,
	144, 145, 151, -153, -220, -152, 76, -224, -225, 290,
	159, 322, 323, 187, 201, 195, 222, 214, 291, 324,
	160, 212, 215, 259, 157, 325, 242, 249, 85, 190,
	268, 326, 46, 39, 169, 210, 206, 327, 299, 204,
	45, 28, 44, 328, 251, 227, 43, 329, 295, 253,
	205, 250, 143, 330, 162, 378, 155, 331, 228, 232,
	332, 260, 47, 333, 334, 335, 199, 200, 336, 158,
	262, 226, 156, 34, 254, 292, 53, 177, 263, 41,
	230, 40, 337, 225, 221, 48, 338, 339, 340, 341,
	224, 198, 220, 57, 234, 233, 235, 258, 217, 342,
	343, 344, 163, 345, 207, 19, 346, 347, 348, 51,
	349, 350, 266, 172, 351, 49, 175, 352, 353, 354,
	355, 356, 357, 252, 229, 231, 152, 179, 248, 294,
	358, 264, 203, 359, 164, 176, 171, 267, 165, 360,
	361, 362, 363, 364, 365, 366, 191, 38, 367, 368,
	369, 370, 186, 261, 270, 56, 239, 371, 197, 154,
	372, 188, 50, 183, 244, 42, 218, 178, 373, 374,
	208, 209, 223, 196, 219, 189, 379, 180, 173, 375,
	269, 240, 296, 216, 213, 184, 376, 181, 182, 377,
	380, 255, 245, 256, 257, 246, 185, 293, 265, 211,
	241, -226, 383, -135, 147, 272, 144, 246, 293, 145,
	145, 146, 147, 272, 144, 145, -66, -159, -220, -152,
	147, 145, 128, 215, 259, 137, 243, 254, 255, 251,
	-140, 252, 179, -170, 145, -136, 242, 245, 246, 185,
	-230, -220, 253, 261, 260, 247, 257, 256, -159, 189,
	-164, 194, -153, 192, -66, -37, 378, 141, -166, -166,
	244, 244, -166, -86, -51, -72, 94, -77, 30, 24,
	-76, -73, -93, -90, -91, 128, 129, 131, 130, 132,
	117, 118, 125, 95, 133, -81, -79, -80, -82, 78,
	77, 86, 79, 80, 81, 82, 87, 88, 89, -153,
	-159, -88, -233, 63, 64, 281, 282, 283, 284, 289,
	285, 97, 52, 271, 279, 278, 277, 275, 276, 273,
	274, 287, 288, 150, 272, 144, 123, 280, -220, -152,
	39, -5, -4, -233, 6, 21, 22, -104, 18, 17,
	-234, 75, -40, -49, 58, 59, -50, 22, 36, 62,
	60, -35, -48, 119, -51, -159, -48, -134, 149, -134,
	-134, -125, -169, 189, -128, 261, 260, -154, -126, -153,
	-151, 259, 215, 258, 142, 297, 93, 23, 25, 237,
	96, 128, 17, 97, 127, 281, 137, 67, 298, 273,
	274, 271, 283, 284, 272, 243, 30, 11, 300, 26,
	167, 22, 36, 121, 139, 100, 101, 170, 24, 168,
	89, 303, 20, 70, 12, 14, 304, 305, 15, 150,
	149, 112, 146, 65, 9, 133, 27, 109, 61, 306,
	29, 307, 308, 309, 310, 63, 110, 18, 275, 276,
	32, 311, 289, 174, 123, 68, 54, 94, 312, 313,
	87, 314, 90, 71, 91, 16, 66, 37, 315, 316,
	317, 318, 111, 140, 280, 64, 319, 144, 6, 286,
	31, 166, 62, 320, 145, 99, 287, 288, 148, 88,
	5, 151, 33, 10, 69, 72, 277, 278, 279, 52,
	98, 13, 321, 92, -202, 110, -192, -195, -153, 161,
	-213, 157, -66, 146, -66, 280, -144, 150, -144, -144,
	383, 76, 145, -66, -220, -220, 137, 139, 142, 71,
	78, -23, -66, -143, 150, -220, -143, -143, -143, -66,
	134, -66, -220, 31, -141, 110, 13, 272, -220, 179,
	145, 180, 147, -142, 110, -142, -142, -197, 146, 34,
	158, -167, -233, -154, 183, 184, 183, -139, -138, 249,
	250, 244, 248, 13, 184, 244, 182, -141, -167, 148,
	-153, -36, -153, 78, -7, -3, -11, -10, -12, 102,
	-166, -166, 74, 93, 91, 92, 109, -51, -74, 112,
	94, 110, 111, 96, 114, 113, 124, 117, 118, 119,
	120, 121, 122, 123, 115, 116, 127, 102, 103, 104,
	105, 106, 107, 108, -133, -233, -91, -233, 135, 136,
	-77, -77, -77, -77, -77, -77, -77, -77, -77, -77,
	-233, 134, -2, -86, -4, -233, -233, -233, -233, -233,
	-233, -233, -233, -96, -51, -233, -237, -83, -233, -237,
	-83, -237, -83, -237, -233, -237, -83, -237, -83, -237,
	-237, -83, -233, -233, -233, -233, -233, -233, -233, -166,
	-100, -3, -34, -118, 20, 32, -51, -101, -102, -51,
	-100, 54, -46, -48, -50, 58, 59, 84, 12, -156,
	-155, 23, -153, 78, 134, 12, -67, 27, -66, -53,
	-54, -55, -56, -69, -92, -233, -66, 12, -60, -61,
	-66, -68, -159, 74, 189, -128, -169, -130, -129, 262,
	264, 102, -158, -153, 78, 30, 31, 75, 74, -66,
	-172, -175, -177, -176, -178, -173, -174, 212, 213, 128,
	216, 218, 219, 220, 221, 222, 223, 224, 225, 226,
	227, 31, 169, 208, 209, 210, 211, 228, 229, 230,
	231, 232, 233, 234, 235, 195, 214, 291, 196, 197,
	198, 199, 200, 201, 203, 204, 205, 206, 207, -220,
	73, -220, -167, 147, -220, 94, -220, -66, 76, -66,
	-167, -167, -167, 181, 181, 145, 145, 186, -66, 78,
	74, 148, -60, 24, 71, -66, -220, -220, -160, -159,
	-151, -167, -141, 78, -51, -167, -167, -167, -66, -167,
	-167, 78, -198, 12, 112, -167, -167, -137, 12, 112,
	-198, -137, -51, -142, 71, -165, 192, 226, 379, 380,
	381, -51, -51, -51, -51, -84, 87, 94, 88, 89,
	-77, -85, -88, -91, 83, 112, 110, 111, 96, -77,
	-77, -77, -77, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -77, -77, -168, -220, 78, -220, -76, -76,
	-153, -47, 22, 36, -46, -154, -160, -151, -44, -234,
	-234, -100, -46, -46, -51, -51, -93, 78, -46, -93,
	78, -46, -46, -43, 22, 36, -94, -95, 98, -93,
	-153, -159, -234, -77, -153, -153, -46, -47, -47, -46,
	-46, -104, -234, -105, 27, 10, 112, 74, 19, 74,
	-103, 25, 26, -104, -78, -153, 79, 82, -52, 74,
	12, -50, -66, -155, 119, -160, -66, -121, 175, -66,
	31, 74, -62, -64, -63, -65, 61, 65, 67, 62,
	63, 64, 68, -163, 23, -53, -3, -233, -162, 175,
	-161, 23, -159, 78, -66, -60, -235, 74, 12, 72,
	-235, 74, 134, -128, -130, 74, 263, 265, 266, 71,
	90, -51, -184, 127, -204, -205, -206, -154, 78, 79,
	-192, -193, -194, -207, 161, -212, 152, 154, 155, 151,
	-196, 162, -213, 146, 29, 75, -145, 87, 94, -188,
	240, -179, 73, -179, -179, -179, -179, -183, 215, -183,
	-183, -183, 73, 73, -179, -179, -179, -179, -185, 73,
	-185, -185, -186, 73, -186, -213, 157, -51, -157, 72,
	-66, -167, 24, -167, -147, 142, 139, 140, -216, 138,
	237, 215, 85, 30, 16, 281, 175, 296, -220, 176,
	-66, -66, -66, -66, -66, 142, 139, -66, -66, -66,
	-167, -66, -141, -159, -159, -66, -141, -66, -153, 87,
	88, 89, -85, -77, -77, -77, -45, 170, 93, -234,
	-234, -46, -46, -233, 134, -5, -104, -234, -234, 74,
	72, 23, 12, 12, -234, 12, 12, -234, -234, -46,
	-97, -95, 100, -51, -234, 134, -234, 74, 74, -234,
	-234, -234, -234, -234, -118, 37, 45, 56, -51, -51,
	-102, -118, -132, 20, 12, 52, 52, -71, 13, -48,
	-53, -50, 134, -71, -75, 31, 52, -3, -233, -233,
	-124, -127, -93, -54, -55, -55, -54, -55, 61, 61,
	61, 66, 61, 66, 61, -63, -159, -234, -234, -3,
	-70, 69, 149, 70, -233, -161, -121, 72, -53, -66,
	-53, -68, -159, 119, -129, -131, 267, 264, 270, -220,
	78, 74, -206, 102, -195, 73, -220, 29, -196, -196,
	-196, -199, -220, -199, 29, -181, 30, 87, -189, 241,
	79, -183, -183, -184, 31, -184, -184, -184, -191, 78,
	-191, 79, 79, 75, 71, -153, -167, -166, -223, 157,
	153, 161, 162, 155, 76, -224, -225, 146, 29, 152,
	154, 175, 151, -223, -148, -149, 148, 23, 146, 29,
	175, -222, 72, 181, 237, 181, 148, -167, -137, -137,
	-45, 93, -77, -77, -234, -234, -47, -154, -100, -118,
	-171, 128, 212, 169, 210, 206, 226, 217, 239, 208,
	240, -168, -171, -77, -77, -77, -77, 290, -100, 101,
	-51, 99, -154, -77, -77, 38, 78, 78, 57, -66,
	-98, 14, -51, 119, -104, -123, 71, -124, -87, -89,
	-88, -233, -119, -234, -153, -122, -153, -71, 74, 102,
	-58, -57, 71, 72, -59, 71, -57, 61, 61, -234,
	146, 146, 146, -122, -71, -53, -71, -71, 134, 264,
	268, 269, -205, -206, -209, -208, -153, -212, 162, -199,
	-199, -199, 73, -182, 71, -77, 75, -184, -184, -220,
	128, 75, 74, 75, 74, 75, 74, -146, 328, 94,
	-66, -166, -166, -66, -166, -153, -219, 293, -221, -220,
	-153, -153, -153, -66, -141, -141, -77, -234, -104, -234,
	-179, -179, -179, -186, -179, 200, -179, 200, -234, -234,
	20, 20, 20, 20, -233, -41, 286, -51, 74, 74,
	78, -183, -99, 15, 17, 28, -123, 74, -234, -234,
	74, 52, 134, -234, 74, -100, -127, -51, -51, 73,
	-51, -233, -233, -233, -234, -100, -71, 75, 74, -179,
	-120, -153, -187, 237, 10, -183, 78, -183, 79, 79,
	328, -167, 27, -218, -217, -154, 73, 72, -118, -183,
	-220, -77, -77, -77, -77, -77, -104, 78, -77, -77,
	-183, -107, -112, -139, -51, -86, 29, -89, 52, -3,
	-153, -87, -153, -153, -104, -120, -120, -234, -120, -120,
	-162, -104, -211, -210, 72, 156, 85, -208, 75, 74,
	-190, 152, 29, 151, -80, -184, -184, 75, 75, -233,
	74, 102, -120, -66, -234, -234, -234, -234, -42, 112,
	293, -234, -234, -234, -110, 378, -113, 41, -114, 42,
	10, -87, 134, 75, -234, -234, -234, -70, -210, -220,
	-200, 102, 78, 164, -153, -180, 85, 29, 29, -214,
	-215, 175, -217, -206, 75, -234, 291, 68, 294, -107,
	46, 218, -115, 50, -116, -111, 51, 17, -124, -153,
	79, -66, 78, -234, 74, -153, -222, 57, 292, 295,
	-108, 48, -106, 47, -106, -114, 17, -117, 43, 44,
	78, 73, -215, 52, -219, 57, -109, 49, 71, 90,
	78, 17, 17, -120, 177, 293, 71, 90, 78, 78,
	75, 178, 294, -228, -229, 71, -233, 295, -229, 71,
	11, 10, -77, 174, -227, 165, 160, 163, 31, -227,
	-234, -234, 159, 30, 87,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 639,
	0, 380, 380, 380, 380, 380, 380, 380, 0, 743,
	735, 0, 0, 0, 0, -2, 345, 346, 0, 348,
	-2, 0, 0, 357, 1071, 1071, 0, 0, 1071, 0,
	0, 1069, 52, 53, 363, 364, 365, 1, 3, 0,
	384, 647, 0, 0, -2, 382, 0, 0, 723, 723,
	723, 0, 81, 82, 0, 0, 0, 1054, 0, 721,
	721, 721, 744, 745, 748, 749, 31, 32, 33, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 0, 36, 0, 0, 0, 0, 0, 0, 0,
	719, 0, 719, 719, 719, 0, 291, 462, 752, 753,
	1054, 0, 0, 0, 336, 0, 339, 339, 339, 305,
	0, 307, 1072, 0, 0, 0, 314, 0, 0, 320,
	336, 1072, 328, 342, 343, 330, 325, 326, 344, 347,
	0, 352, 355, 0, 370, 0, 922, 362, 375, 376,
	1071, 1071, 379, 37, 513, 472, 0, 478, 480, 0,
	515, 516, 517, 518, 519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 545, 546, 547, 548, 624,
	625, 626, 627, 628, 629, 630, 631, 482, 483, 621,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 612, 0, 582, 582, 582, 582, 582, 582, 582,
	582, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	1071, 639, 48, 0, 380, 385, 386, 651, 0, 0,
	639, 1070, 0, 0, -2, -2, 396, 402, 403, 404,
	405, 381, 0, 408, 412, 0, 0, 0, 724, 0,
	0, 67, 0, 1042, 704, -2, -2, 0, 0, 750,
	751, -2, 889, -2, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 0, 0, 100, 101, 0, 0,
	220, 891, 98, 0, 1072, 0, 0, 0, 0, 0,
	0, 35, 0, 1072, 1072, 1072, 0, 0, 0, 0,
	736, 282, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 292, 1072, 336, 295, 0, 0, 1072, 1072, 1072,
	0, 1072, 1072, 302, 0, 303, 304, 0, 205, 206,
	207, 308, 1073, 1074, 1072, 1072, 333, 0, 333, 331,
	332, 323, 324, 0, 339, 317, 318, 321, 322, 353,
	356, 373, 371, 372, 374, 366, 367, 368, 369, 0,
	377, 378, 0, 0, 0, 0, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 500, 501, 502,
	503, 504, 505, 506, 479, 0, 493, 0, 0, 0,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 0,
	393, 0, 0, 0, 639, 0, 0, 0, 0, 0,
	0, 0, 390, 0, 613, 0, 566, 574, 0, 567,
	575, 568, 576, 569, 0, 570, 577, 571, 578, 572,
	573, 579, 0, 0, 0, 393, 393, 0, 0, 38,
	647, 0, 395, 654, 0, 0, 648, 640, 641, 644,
	647, 0, 417, 406, 397, 400, 401, 383, 0, 409,
	413, 0, 415, 416, 0, 0, 65, 0, 461, 0,
	419, 421, 422, 423, 443, 0, 445, 0, 0, 0,
	61, 63, 462, 0, 1042, 710, 0, 69, 70, 0,
	0, 0, 180, 714, 715, 716, 712, 237, 0, 0,
	168, 164, 108, 109, 110, 157, 112, 157, 157, 157,
	157, 177, 177, 177, 177, 140, 141, 142, 143, 144,
	0, 0, 127, 157, 157, 157, 157, 147, 148, 149,
	150, 151, 152, 153, 154, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 159, 159, 159, 161, 161, 0,
	0, 746, 84, 0, 1072, 0, 1072, 96, 34, 0,
	251, 253, 254, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 285, 720, 0, 1072, 288, 289, 463, 754,
	755, 293, 294, 337, 338, 296, 297, 298, 299, 300,
	301, 340, 0, 208, 209, 309, 313, 336, 0, 0,
	0, 336, 315, 316, 0, 0, 354, 358, 359, 360,
	361, 514, 473, 474, 475, 477, 494, 0, 496, 498,
	484, 485, 509, 510, 511, 0, 0, 0, 0, 507,
	489, 0, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 534, 597, 598, 0, 532, 533,
	544, 0, 0, 0, 394, 622, 0, -2, 0, 512,
	699, 647, 0, 0, 0, 0, 517, 624, 0, 517,
	624, 0, 0, 0, 391, 392, 619, 616, 0, 0,
	621, 0, 583, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 49, 39, 0, 652, 0, 0, 0, 0,
	643, 645, 646, 651, 0, 632, 0, 0, 470, 0,
	0, 398, 45, 414, 410, 0, 470, 0, 0, 460,
	0, 0, 0, 0, 0, 0, 450, 0, 0, 453,
	0, 0, 0, 0, 444, 0, 0, 0, 465, 983,
	446, 0, 448, 449, -2, 0, 0, 0, 59, 60,
	0, 0, 0, 705, 68, 0, 0, 73, 74, 706,
	707, 708, 709, 0, 97, 238, 240, 243, 244, 245,
	102, 104, 105, 0, 0, 218, 993, 1026, 923, 212,
	212, 921, 225, 210, 211, 99, 171, 169, 0, 166,
	165, 111, 0, 177, 177, 134, 135, 180, 0, 180,
	180, 180, 0, 0, 128, 129, 130, 131, 122, 0,
	123, 124, 125, 0, 126, 219, 0, 0, 0, 0,
	1072, 86, 722, 87, 1071, 0, 0, 738, 252, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 0,
	88, 256, 258, 257, 261, 0, 0, 0, 283, 1072,
	287, 333, 310, 334, 335, 333, 312, 319, 350, 495,
	497, 499, 486, 507, 490, 0, 487, 0, 0, 481,
	549, 0, 0, 393, 0, 639, 651, 553, 554, 0,
	0, 0, 0, 0, 590, 0, 0, 591, 0, 639,
	0, 617, 0, 0, 565, 0, 584, 0, 0, 585,
	586, 587, 588, 589, 41, 0, 0, 0, 649, 650,
	642, 40, 0, 717, 718, 633, 634, 635, 0, 407,
	418, 399, 0, 647, 693, 0, 0, 685, 0, 0,
	470, 701, 0, 420, 439, 441, 0, 436, 451, 452,
	454, 0, 456, 0, 458, 459, 424, 425, 426, 0,
	427, 0, 0, 0, 0, 447, 470, 0, 470, 62,
	470, 64, 0, 464, 71, 72, 0, 0, 78, 181,
	182, 0, 241, 0, 103, 0, 0, 199, 212, 212,
	212, 203, 213, 204, 0, 173, 0, 170, 107, 167,
	0, 180, 180, 136, 0, 137, 138, 139, 0, 155,
	0, 0, 0, 234, 0, 747, 85, 246, 1071, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 1071, 0, 1071, 739, 740, 741, 742,
	0, 91, 0, 0, 0, 0, 0, 286, 336, 336,
	488, 0, 508, 491, 550, 551, 0, 623, 647, 43,
	0, 157, 157, 602, 157, 161, 605, 157, 607, 157,
	610, 0, 0, 0, 0, 0, 0, 0, 614, 564,
	620, 0, 622, 0, 0, 0, 177, 656, 653, 42,
	637, 0, 471, 411, 46, 50, 0, 693, 684, 695,
	697, 0, 0, 0, 689, 0, 431, 639, 0, 0,
	433, 440, 0, 0, 434, 0, 435, 455, 457, -2,
	0, 0, 0, 0, 639, 470, 57, 58, 0, 75,
	76, 77, 239, 242, 0, 214, 157, 217, 0, 200,
	201, 202, 0, 175, 0, 172, 158, 132, 133, 178,
	179, 177, 0, 177, 0, 162, 0, 226, 235, 0,
	1072, 247, 248, 249, 250, 0, 255, 0, 89, 90,
	0, 0, 260, 284, 306, 311, 492, 552, 651, 555,
	599, 177, 603, 604, 606, 608, 609, 611, 557, 556,
	0, 0, 0, 0, 0, 647, 0, 618, 0, 0,
	177, 676, 47, 0, 0, 0, 51, 0, 698, 0,
	0, 0, 0, 66, 0, 647, 702, 703, 437, 0,
	442, 0, 0, 0, 445, 647, 56, 191, 0, 216,
	0, 429, 183, 176, 0, 180, 156, 180, 0, 0,
	236, 83, 0, 92, 93, 0, 0, 0, 44, 600,
	601, 0, 0, 0, 0, 592, 0, 615, 0, 0,
	658, 657, 670, 674, 638, 636, 0, 696, 0, 688,
	691, 687, 690, 432, 54, 0, 0, 467, 0, 0,
	465, 55, 190, 192, 0, 197, 0, 215, 0, 0,
	188, 0, 185, 187, 174, 145, 146, 160, 163, 0,
	0, 0, 0, 262, 558, 560, 559, 561, 0, 0,
	0, 563, 580, 581, 676, 0, 669, 672, -2, 0,
	0, 686, 0, 438, 466, 468, 469, 428, 193, 194,
	0, 198, 196, 0, 430, 106, 0, 184, 186, 0,
	278, 0, 94, 95, 88, 562, 0, 0, 0, 663,
	661, 661, 674, 0, 678, 0, 683, 0, 694, 692,
	195, 0, 189, 277, 0, 0, 91, 593, 0, 596,
	666, 0, 659, 662, 660, 671, 0, 677, 0, 0,
	675, 0, 279, 0, 259, 594, 655, 0, 664, 665,
	673, 0, 0, 0, 0, 0, 667, 668, 679, 681,
	221, 0, 0, 222, 223, 0, 0, 595, 224, 0,
	0, 0, 0, 0, 227, 229, 230, 0, 0, 228,
	280, 281, 231, 232, 233,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 95, 3, 3, 3, 122, 114, 3,
	73, 75, 119, 117, 74, 118, 134, 120, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 382,
	103, 102, 104, 3, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 124, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 113, 3, 125,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	96, 97, 98, 99, 100, 101, 105, 106, 107, 108,
	109, 110, 111, 112, 115, 116, 121, 123, 126, 127,
	128, 129, 130, 131, 132, 133, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:367
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:372
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:406
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:412
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:426
		{
			yyVAL.bytes = yyDollar[3].bytes
			setAllowCarrats(yylex, false)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:433
		{
			yyVAL.bytes = yyDollar[2].bytes
			setAllowCarrats(yylex, false)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			setAllowCarrats(yylex, true)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Load{}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:458
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:467
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:471
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:475
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:498
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:506
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:526
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:536
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:543
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:555
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.insertAction = InsertAct
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:609
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:619
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:624
		{
			yyVAL.partitions = nil
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:628
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:644
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:654
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:660
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.characteristic = ReadWrite
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:668
		{
			yyVAL.characteristic = ReadOnly
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:678
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:682
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.isolationLevel = Serializable
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.scope = SessionScope
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.scope = GlobalScope
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:707
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:713
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:718
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:722
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:726
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:730
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:735
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:745
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:750
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:766
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:778
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:785
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:796
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:812
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:816
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 106:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:831
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1058
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.literal = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1067
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1072
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1076
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1088
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1094
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.boolean = false
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.boolean = true
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1111
		{
			yyVAL.boolean = false
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.boolean = true
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.boolean = false
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.boolean = true
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.optVal = nil
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.optVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1147
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1152
		{
			yyVAL.boolean = false
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1156
		{
			yyVAL.boolean = true
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1161
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1178
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1182
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1187
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1191
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.colKeyOpt = colKey
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1199
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1208
		{
			yyVAL.literal = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1222
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1263
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1333
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1337
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1349
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1353
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1359
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 221:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1369
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 222:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1373
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 223:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1377
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 224:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1381
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1385
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1391
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1421
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1425
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1430
		{
			yyVAL.boolean = true
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.boolean = true
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1438
		{
			yyVAL.boolean = false
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1443
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.str = yyDollar[1].str
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1463
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1473
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1499
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1504
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1611
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1627
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1631
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1643
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1647
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1659
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &OtherRead{}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1698
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1725
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1733
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1743
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1752
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1765
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1769
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1777
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1791
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = "extended "
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = "full "
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1891
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1895
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.showFilter = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1913
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.showFilter = nil
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.scope = ImplicitScope
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.scope = SessionScope
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.scope = GlobalScope
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Begin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &Begin{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &Commit{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &Rollback{}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.empty = struct{}{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2001
		{
			yyVAL.explainType = EmptyType
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.explainType = JSONType
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.explainType = TreeType
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.explainType = VitessType
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.explainType = TraditionalType
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.explainType = AnalyzeType
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &OtherRead{}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2090
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2094
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2104
		{
			setAllowComments(yylex, true)
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2108
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2114
		{
			yyVAL.bytes2 = nil
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.boolean = true
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.boolean = false
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2132
		{
			yyVAL.boolean = true
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = SQLCacheStr
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.boolean = false
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.boolean = true
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.boolean = true
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2163
		{
			yyVAL.selectExprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2167
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2172
		{
			yyVAL.strs = nil
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2188
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = SQLCacheStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.str = DistinctStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = StraightJoinHint
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2242
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2247
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2291
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2305
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2311
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 428:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2315
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2335
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2356
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.empty = struct{}{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.empty = struct{}{}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.joinType = NormalJoinType
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.joinType = NormalJoinType
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2417
		{
			yyVAL.joinType = NormalJoinType
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.joinType = StraightJoinType
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2429
		{
			yyVAL.joinType = LeftJoinType
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.joinType = LeftJoinType
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.joinType = RightJoinType
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.joinType = RightJoinType
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2471
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2486
		{
			yyVAL.indexHints = nil
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2490
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2502
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = nil
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3056
		{
			yyVAL.matchExprOption = NoOption
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3064
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3068
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3152
		{
			yyVAL.str = string("")
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3172
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3191
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3195
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = &NullVal{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3253
		{
			yyVAL.exprs = nil
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3262
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3271
		{
			yyVAL.orderBy = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3296
		{
			yyVAL.orderDirection = AscOrder
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.orderDirection = AscOrder
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			yyVAL.orderDirection = DescOrder
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.limit = nil
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3317
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3321
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3326
		{
			yyVAL.lock = NoLock
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3330
		{
			yyVAL.lock = ForUpdateLock
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3334
		{
			yyVAL.lock = ShareModeLock
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3339
		{
			yyVAL.selectInto = nil
		}
	case 655:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3343
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3347
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3351
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3356
		{
			yyVAL.str = ""
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3360
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3364
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3369
		{
			yyVAL.str = ""
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			yyVAL.str = " header"
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3378
		{
			yyVAL.str = ""
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3382
		{
			yyVAL.str = " manifest on"
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3386
		{
			yyVAL.str = " manifest off"
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3391
		{
			yyVAL.str = ""
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3395
		{
			yyVAL.str = " overwrite on"
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyVAL.str = " overwrite off"
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3405
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3414
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3419
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3423
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3428
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3432
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3437
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3441
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3446
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3450
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3455
		{
			yyVAL.str = ""
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3459
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = ""
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3468
		{
			yyVAL.str = " optionally"
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3481
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3489
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3493
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3497
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3507
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3511
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3515
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3520
		{
			yyVAL.updateExprs = nil
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3524
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3534
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3540
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3544
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3550
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3566
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3570
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3576
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3586
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3592
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3596
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3600
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3604
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3616
		{
			yyVAL.bytes = []byte("charset")
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &Default{}
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3640
		{
			yyVAL.boolean = false
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3642
		{
			yyVAL.boolean = true
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3645
		{
			yyVAL.boolean = false
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3647
		{
			yyVAL.boolean = true
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3650
		{
			yyVAL.ignore = false
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3652
		{
			yyVAL.ignore = true
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3658
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3662
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3666
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3674
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3678
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3682
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3688
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3696
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3698
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3700
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3706
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3709
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3713
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3716
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3718
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3726
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3733
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3739
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3743
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4089
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4098
		{
			decNesting(yylex)
		}
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4103
		{
			skipToEnd(yylex)
		}
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4108
		{
			skipToEnd(yylex)
		}
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4112
		{
			skipToEnd(yylex)
		}
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4116
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
