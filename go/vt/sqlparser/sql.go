// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl DDLStatement) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func setAllowCarrats(yylex interface{}, val bool) {
	yylex.(*Tokenizer).allowCaratsInID = val
}

func setAllowBlanks(yylex interface{}, val bool) {
	yylex.(*Tokenizer).allowBlanks = val
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:61
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
	selectInto             *SelectInto
	createIndex            *CreateIndex
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const PARSER = 57379
const OUTFILE = 57380
const S3 = 57381
const DATA = 57382
const LOAD = 57383
const LINES = 57384
const TERMINATED = 57385
const ESCAPED = 57386
const ENCLOSED = 57387
const DUMPFILE = 57388
const CSV = 57389
const HEADER = 57390
const MANIFEST = 57391
const OVERWRITE = 57392
const STARTING = 57393
const OPTIONALLY = 57394
const VALUES = 57395
const LAST_INSERT_ID = 57396
const NEXT = 57397
const VALUE = 57398
const SHARE = 57399
const MODE = 57400
const SQL_NO_CACHE = 57401
const SQL_CACHE = 57402
const SQL_CALC_FOUND_ROWS = 57403
const JOIN = 57404
const STRAIGHT_JOIN = 57405
const LEFT = 57406
const RIGHT = 57407
const INNER = 57408
const OUTER = 57409
const CROSS = 57410
const NATURAL = 57411
const USE = 57412
const FORCE = 57413
const ON = 57414
const USING = 57415
const INPLACE = 57416
const COPY = 57417
const ALGORITHM = 57418
const NONE = 57419
const SHARED = 57420
const EXCLUSIVE = 57421
const ID = 57422
const HEX = 57423
const STRING = 57424
const INTEGRAL = 57425
const FLOAT = 57426
const HEXNUM = 57427
const VALUE_ARG = 57428
const LIST_ARG = 57429
const COMMENT = 57430
const COMMENT_KEYWORD = 57431
const BIT_LITERAL = 57432
const NULL = 57433
const TRUE = 57434
const FALSE = 57435
const OFF = 57436
const OR = 57437
const XOR = 57438
const AND = 57439
const NOT = 57440
const BETWEEN = 57441
const CASE = 57442
const WHEN = 57443
const THEN = 57444
const ELSE = 57445
const END = 57446
const LE = 57447
const GE = 57448
const NE = 57449
const NULL_SAFE_EQUAL = 57450
const IS = 57451
const LIKE = 57452
const REGEXP = 57453
const IN = 57454
const SHIFT_LEFT = 57455
const SHIFT_RIGHT = 57456
const DIV = 57457
const MOD = 57458
const UNARY = 57459
const COLLATE = 57460
const BINARY = 57461
const UNDERSCORE_BINARY = 57462
const UNDERSCORE_UTF8MB4 = 57463
const UNDERSCORE_UTF8 = 57464
const UNDERSCORE_LATIN1 = 57465
const INTERVAL = 57466
const JSON_EXTRACT_OP = 57467
const JSON_UNQUOTE_EXTRACT_OP = 57468
const CREATE = 57469
const ALTER = 57470
const DROP = 57471
const RENAME = 57472
const ANALYZE = 57473
const ADD = 57474
const FLUSH = 57475
const SCHEMA = 57476
const TABLE = 57477
const INDEX = 57478
const VIEW = 57479
const TO = 57480
const IGNORE = 57481
const IF = 57482
const UNIQUE = 57483
const PRIMARY = 57484
const COLUMN = 57485
const SPATIAL = 57486
const FULLTEXT = 57487
const KEY_BLOCK_SIZE = 57488
const CHECK = 57489
const INDEXES = 57490
const ACTION = 57491
const CASCADE = 57492
const CONSTRAINT = 57493
const FOREIGN = 57494
const NO = 57495
const REFERENCES = 57496
const RESTRICT = 57497
const SHOW = 57498
const DESCRIBE = 57499
const EXPLAIN = 57500
const DATE = 57501
const ESCAPE = 57502
const REPAIR = 57503
const OPTIMIZE = 57504
const TRUNCATE = 57505
const MAXVALUE = 57506
const PARTITION = 57507
const REORGANIZE = 57508
const LESS = 57509
const THAN = 57510
const PROCEDURE = 57511
const TRIGGER = 57512
const VINDEX = 57513
const VINDEXES = 57514
const STATUS = 57515
const VARIABLES = 57516
const WARNINGS = 57517
const SEQUENCE = 57518
const BEGIN = 57519
const START = 57520
const TRANSACTION = 57521
const COMMIT = 57522
const ROLLBACK = 57523
const SAVEPOINT = 57524
const RELEASE = 57525
const WORK = 57526
const BIT = 57527
const TINYINT = 57528
const SMALLINT = 57529
const MEDIUMINT = 57530
const INT = 57531
const INTEGER = 57532
const BIGINT = 57533
const INTNUM = 57534
const REAL = 57535
const DOUBLE = 57536
const FLOAT_TYPE = 57537
const DECIMAL = 57538
const NUMERIC = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const CHAR = 57544
const VARCHAR = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const TEXT = 57550
const TINYTEXT = 57551
const MEDIUMTEXT = 57552
const LONGTEXT = 57553
const BLOB = 57554
const TINYBLOB = 57555
const MEDIUMBLOB = 57556
const LONGBLOB = 57557
const JSON = 57558
const ENUM = 57559
const GEOMETRY = 57560
const POINT = 57561
const LINESTRING = 57562
const POLYGON = 57563
const GEOMETRYCOLLECTION = 57564
const MULTIPOINT = 57565
const MULTILINESTRING = 57566
const MULTIPOLYGON = 57567
const NULLX = 57568
const AUTO_INCREMENT = 57569
const APPROXNUM = 57570
const SIGNED = 57571
const UNSIGNED = 57572
const ZEROFILL = 57573
const COLLATION = 57574
const DATABASES = 57575
const TABLES = 57576
const VITESS_METADATA = 57577
const VSCHEMA = 57578
const FULL = 57579
const PROCESSLIST = 57580
const COLUMNS = 57581
const FIELDS = 57582
const ENGINES = 57583
const PLUGINS = 57584
const EXTENDED = 57585
const KEYSPACES = 57586
const VITESS_KEYSPACES = 57587
const VITESS_SHARDS = 57588
const VITESS_TABLETS = 57589
const NAMES = 57590
const CHARSET = 57591
const GLOBAL = 57592
const SESSION = 57593
const ISOLATION = 57594
const LEVEL = 57595
const READ = 57596
const WRITE = 57597
const ONLY = 57598
const REPEATABLE = 57599
const COMMITTED = 57600
const UNCOMMITTED = 57601
const SERIALIZABLE = 57602
const CURRENT_TIMESTAMP = 57603
const DATABASE = 57604
const CURRENT_DATE = 57605
const CURRENT_TIME = 57606
const LOCALTIME = 57607
const LOCALTIMESTAMP = 57608
const UTC_DATE = 57609
const UTC_TIME = 57610
const UTC_TIMESTAMP = 57611
const REPLACE = 57612
const CONVERT = 57613
const CAST = 57614
const SUBSTR = 57615
const SUBSTRING = 57616
const GROUP_CONCAT = 57617
const SEPARATOR = 57618
const TIMESTAMPADD = 57619
const TIMESTAMPDIFF = 57620
const MATCH = 57621
const AGAINST = 57622
const BOOLEAN = 57623
const LANGUAGE = 57624
const WITH = 57625
const QUERY = 57626
const EXPANSION = 57627
const UNUSED = 57628
const ARRAY = 57629
const CUME_DIST = 57630
const DESCRIPTION = 57631
const DENSE_RANK = 57632
const EMPTY = 57633
const EXCEPT = 57634
const FIRST_VALUE = 57635
const GROUPING = 57636
const GROUPS = 57637
const JSON_TABLE = 57638
const LAG = 57639
const LAST_VALUE = 57640
const LATERAL = 57641
const LEAD = 57642
const MEMBER = 57643
const NTH_VALUE = 57644
const NTILE = 57645
const OF = 57646
const OVER = 57647
const PERCENT_RANK = 57648
const RANK = 57649
const RECURSIVE = 57650
const ROW_NUMBER = 57651
const SYSTEM = 57652
const WINDOW = 57653
const ACTIVE = 57654
const ADMIN = 57655
const BUCKETS = 57656
const CLONE = 57657
const COMPONENT = 57658
const DEFINITION = 57659
const ENFORCED = 57660
const EXCLUDE = 57661
const FOLLOWING = 57662
const GEOMCOLLECTION = 57663
const GET_MASTER_PUBLIC_KEY = 57664
const HISTOGRAM = 57665
const HISTORY = 57666
const INACTIVE = 57667
const INVISIBLE = 57668
const LOCKED = 57669
const MASTER_COMPRESSION_ALGORITHMS = 57670
const MASTER_PUBLIC_KEY_PATH = 57671
const MASTER_TLS_CIPHERSUITES = 57672
const MASTER_ZSTD_COMPRESSION_LEVEL = 57673
const NESTED = 57674
const NETWORK_NAMESPACE = 57675
const NOWAIT = 57676
const NULLS = 57677
const OJ = 57678
const OLD = 57679
const OPTIONAL = 57680
const ORDINALITY = 57681
const ORGANIZATION = 57682
const OTHERS = 57683
const PATH = 57684
const PERSIST = 57685
const PERSIST_ONLY = 57686
const PRECEDING = 57687
const PRIVILEGE_CHECKS_USER = 57688
const PROCESS = 57689
const RANDOM = 57690
const REFERENCE = 57691
const REQUIRE_ROW_FORMAT = 57692
const RESOURCE = 57693
const RESPECT = 57694
const RESTART = 57695
const RETAIN = 57696
const REUSE = 57697
const ROLE = 57698
const SECONDARY = 57699
const SECONDARY_ENGINE = 57700
const SECONDARY_LOAD = 57701
const SECONDARY_UNLOAD = 57702
const SKIP = 57703
const SRID = 57704
const THREAD_PRIORITY = 57705
const TIES = 57706
const UNBOUNDED = 57707
const VCPU = 57708
const VISIBLE = 57709
const FORMAT = 57710
const TREE = 57711
const VITESS = 57712
const TRADITIONAL = 57713

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"PARSER",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"DUMPFILE",
	"CSV",
	"HEADER",
	"MANIFEST",
	"OVERWRITE",
	"STARTING",
	"OPTIONALLY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"INPLACE",
	"COPY",
	"ALGORITHM",
	"NONE",
	"SHARED",
	"EXCLUSIVE",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
	"'@'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	34, 330,
	153, 330,
	165, 330,
	190, 344,
	191, 344,
	-2, 332,
	-1, 51,
	155, 354,
	-2, 352,
	-1, 75,
	55, 390,
	-2, 398,
	-1, 425,
	141, 768,
	-2, 764,
	-1, 426,
	141, 769,
	-2, 765,
	-1, 441,
	55, 391,
	-2, 403,
	-1, 442,
	55, 392,
	-2, 404,
	-1, 462,
	109, 1042,
	-2, 79,
	-1, 463,
	109, 947,
	-2, 80,
	-1, 468,
	109, 907,
	-2, 726,
	-1, 470,
	109, 984,
	-2, 728,
	-1, 994,
	141, 771,
	-2, 767,
	-1, 1081,
	73, 61,
	81, 61,
	-2, 65,
	-1, 1465,
	5, 642,
	18, 642,
	20, 642,
	32, 642,
	82, 642,
	-2, 429,
	-1, 1668,
	45, 697,
	-2, 695,
}

const yyPrivate = 57344

const yyLast = 19254

var yyAct = [...]int{

	425, 1748, 1758, 1516, 1668, 1387, 1685, 1716, 384, 1275,
	1616, 1103, 1295, 1599, 1154, 1578, 736, 74, 3, 369,
	1075, 1444, 1276, 776, 1445, 1099, 637, 783, 1349, 1262,
	1355, 1441, 1326, 1112, 1451, 1148, 355, 597, 398, 600,
	1457, 981, 467, 1406, 1350, 109, 1072, 336, 109, 1102,
	1211, 914, 988, 348, 1156, 109, 113, 72, 112, 434,
	1364, 1342, 594, 934, 821, 1117, 1054, 814, 1077, 1061,
	781, 428, 786, 1014, 958, 804, 371, 360, 601, 1037,
	1144, 820, 793, 348, 29, 1083, 348, 109, 348, 109,
	803, 593, 818, 356, 70, 811, 359, 109, 616, 617,
	929, 109, 367, 626, 443, 646, 1179, 109, 1121, 1133,
	111, 111, 399, 30, 1374, 111, 944, 111, 111, 111,
	1178, 983, 69, 75, 633, 111, 750, 1315, 1665, 8,
	7, 656, 6, 1588, 1502, 1751, 1618, 1713, 1746, 1693,
	1739, 1517, 1712, 30, 749, 1692, 1423, 1546, 89, 31,
	449, 453, 63, 35, 36, 429, 77, 78, 79, 80,
	81, 82, 111, 604, 105, 101, 102, 103, 1370, 1493,
	317, 1476, 1477, 111, 822, 461, 823, 98, 1475, 320,
	96, 1093, 1177, 430, 643, 1334, 645, 329, 1659, 698,
	697, 707, 708, 700, 701, 702, 703, 704, 705, 706,
	699, 91, 92, 709, 88, 1312, 662, 663, 1311, 358,
	1157, 1313, 1094, 1095, 464, 357, 1581, 1127, 642, 644,
	664, 327, 1695, 62, 665, 662, 663, 334, 669, 1159,
	1134, 1537, 1120, 344, 1391, 1174, 1171, 1172, 1373, 1170,
	903, 346, 943, 1378, 1375, 1366, 1376, 1369, 1389, 1365,
	1134, 1535, 350, 1367, 1368, 657, 658, 318, 410, 667,
	416, 417, 414, 415, 413, 412, 411, 1377, 659, 945,
	946, 947, 1181, 1184, 418, 419, 1745, 902, 1738, 99,
	900, 904, 1686, 886, 331, 321, 1386, 332, 333, 340,
	668, 364, 104, 324, 326, 337, 322, 323, 342, 341,
	1158, 319, 339, 338, 1390, 97, 1055, 1678, 1407, 1152,
	1766, 640, 1176, 901, 1482, 1152, 652, 109, 635, 596,
	1152, 641, 1296, 1298, 1642, 625, 94, 610, 348, 90,
	611, 612, 1762, 606, 1175, 455, 1392, 348, 907, 672,
	1383, 889, 1468, 1467, 1466, 894, 1385, 614, 316, 1409,
	94, 348, 348, 1121, 100, 1191, 1230, 1672, 1190, 721,
	722, 1562, 670, 1474, 621, 1267, 1240, 1219, 1501, 1660,
	678, 1089, 797, 734, 1691, 1227, 631, 1100, 1180, 702,
	703, 704, 705, 706, 699, 709, 1411, 709, 1415, 1308,
	1410, 1033, 1408, 1182, 683, 684, 699, 1413, 647, 709,
	1696, 935, 85, 687, 688, 686, 1412, 639, 1297, 689,
	1425, 1427, 1651, 1356, 930, 1455, 824, 315, 315, 1414,
	1416, 689, 315, 682, 315, 315, 315, 891, 648, 649,
	64, 632, 315, 688, 686, 651, 618, 1160, 619, 86,
	655, 620, 1015, 719, 687, 688, 686, 653, 774, 655,
	689, 1740, 348, 1643, 1641, 109, 773, 109, 109, 1015,
	348, 1237, 689, 1332, 772, 30, 348, 660, 1760, 315,
	1384, 1761, 1382, 1759, 1124, 315, 1741, 1120, 718, 720,
	315, 1125, 681, 679, 737, 680, 721, 722, 698, 697,
	707, 708, 700, 701, 702, 703, 704, 705, 706, 699,
	1681, 790, 709, 802, 1767, 721, 722, 624, 936, 733,
	1587, 638, 1586, 738, 739, 740, 741, 742, 743, 744,
	745, 931, 748, 751, 751, 751, 757, 751, 751, 757,
	751, 765, 766, 767, 768, 769, 770, 771, 753, 755,
	438, 759, 761, 30, 764, 1212, 605, 1507, 787, 965,
	686, 1732, 1346, 1345, 1163, 775, 752, 754, 756, 758,
	760, 762, 763, 963, 964, 962, 689, 1743, 1768, 808,
	953, 955, 956, 1742, 1734, 1724, 1733, 954, 698, 697,
	707, 708, 700, 701, 702, 703, 704, 705, 706, 699,
	1706, 464, 709, 109, 1225, 62, 1612, 882, 1204, 1205,
	1206, 1584, 1224, 1550, 348, 961, 890, 1508, 892, 109,
	1433, 627, 628, 629, 1357, 109, 348, 348, 348, 687,
	688, 686, 109, 1343, 928, 109, 920, 895, 109, 912,
	913, 613, 109, 1431, 917, 1543, 348, 689, 607, 608,
	438, 348, 348, 348, 109, 348, 348, 697, 707, 708,
	700, 701, 702, 703, 704, 705, 706, 699, 348, 348,
	709, 1639, 1744, 919, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 916, 693, 1454, 696, 1648, 1432,
	1708, 438, 1647, 710, 711, 712, 713, 714, 715, 716,
	1359, 694, 695, 692, 698, 697, 707, 708, 700, 701,
	702, 703, 704, 705, 706, 699, 1038, 1039, 709, 1122,
	982, 1639, 1689, 1639, 438, 1085, 655, 1639, 1673, 984,
	908, 1639, 1638, 885, 1577, 938, 1564, 438, 655, 655,
	655, 959, 1263, 348, 1263, 698, 697, 707, 708, 700,
	701, 702, 703, 704, 705, 706, 699, 1557, 655, 709,
	1560, 438, 71, 655, 655, 655, 454, 655, 655, 1499,
	1498, 937, 1003, 1006, 685, 998, 348, 348, 1016, 960,
	655, 655, 1347, 940, 1495, 1496, 1086, 994, 1085, 687,
	688, 686, 1495, 1494, 1088, 348, 993, 1589, 687, 688,
	686, 819, 109, 1046, 438, 348, 1302, 689, 73, 109,
	1058, 109, 1454, 1019, 1084, 737, 689, 1058, 438, 109,
	109, 109, 1549, 685, 438, 885, 884, 348, 831, 830,
	348, 1024, 1025, 1057, 985, 986, 1073, 426, 62, 438,
	995, 348, 348, 1028, 1590, 1591, 1592, 456, 457, 1086,
	994, 1442, 1650, 1040, 1497, 1058, 1316, 1084, 1092, 1052,
	1454, 698, 697, 707, 708, 700, 701, 702, 703, 704,
	705, 706, 699, 1046, 1047, 709, 992, 1243, 1242, 1119,
	1226, 1046, 110, 1058, 459, 110, 1084, 1050, 437, 31,
	349, 1036, 110, 906, 431, 816, 348, 1725, 1035, 1601,
	109, 348, 1048, 348, 1569, 1168, 887, 1183, 1087, 1091,
	1149, 109, 109, 109, 109, 109, 1082, 109, 109, 1090,
	349, 109, 348, 349, 110, 349, 110, 1150, 1486, 883,
	1151, 1074, 1320, 1107, 110, 1145, 1623, 1352, 110, 992,
	109, 1548, 1464, 1046, 110, 1139, 109, 109, 109, 1138,
	87, 1388, 109, 348, 31, 687, 688, 686, 464, 1602,
	1034, 464, 1362, 62, 1753, 1135, 1136, 1137, 62, 1146,
	1147, 1197, 1104, 689, 1161, 1201, 1162, 687, 688, 686,
	698, 697, 707, 708, 700, 701, 702, 703, 704, 705,
	706, 699, 1749, 957, 709, 689, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 959, 1593, 655, 1509, 655, 698, 697, 707, 708,
	700, 701, 702, 703, 704, 705, 706, 699, 62, 31,
	709, 1351, 1458, 1459, 655, 1488, 707, 708, 700, 701,
	702, 703, 704, 705, 706, 699, 1461, 1207, 709, 960,
	1442, 941, 910, 1020, 1270, 1463, 1594, 1595, 109, 1287,
	991, 1729, 1249, 1289, 1288, 1067, 1068, 1284, 1221, 109,
	109, 109, 109, 109, 1256, 1352, 1271, 1220, 1285, 1283,
	1711, 109, 1272, 1286, 1434, 109, 1252, 1277, 784, 109,
	429, 1727, 1561, 1268, 109, 109, 1261, 1236, 109, 109,
	109, 1260, 1294, 62, 1265, 1701, 1698, 1731, 1715, 1717,
	1723, 1314, 1250, 348, 1722, 1218, 1669, 1255, 430, 1667,
	1251, 427, 1321, 1358, 1317, 1011, 777, 1327, 1327, 1264,
	1351, 1338, 1128, 829, 1129, 1130, 1131, 1132, 778, 1012,
	1303, 636, 916, 1331, 1305, 1279, 1280, 1683, 1282, 1290,
	1140, 1141, 1142, 1143, 110, 1682, 93, 1300, 1301, 1278,
	1328, 1621, 1281, 1266, 1329, 349, 1306, 1309, 1354, 1337,
	808, 1339, 1340, 1341, 349, 348, 1322, 1273, 1274, 1555,
	1319, 808, 808, 808, 808, 808, 1597, 1031, 349, 349,
	1323, 1324, 1325, 1038, 1039, 1166, 909, 1074, 95, 1299,
	1071, 432, 433, 435, 1259, 348, 808, 1736, 1735, 1553,
	808, 1344, 1258, 1720, 1702, 444, 1363, 1554, 436, 73,
	1353, 700, 701, 702, 703, 704, 705, 706, 699, 445,
	348, 709, 1437, 1263, 666, 1231, 982, 1372, 1372, 1371,
	1371, 1228, 1379, 798, 1104, 1755, 1754, 1755, 791, 1335,
	1336, 1670, 788, 789, 447, 1405, 446, 1582, 1404, 1032,
	431, 71, 76, 68, 1, 1208, 1209, 1210, 109, 1396,
	1394, 335, 1424, 1747, 1395, 314, 1518, 1417, 348, 1598,
	1418, 1402, 1173, 1684, 348, 348, 1348, 655, 1155, 349,
	1443, 1110, 110, 994, 110, 110, 1101, 349, 84, 591,
	1277, 83, 993, 349, 650, 1063, 1066, 1067, 1068, 1064,
	348, 1065, 1069, 109, 444, 1453, 1109, 655, 1108, 1640,
	1446, 1333, 1126, 1580, 1487, 1330, 1680, 348, 445, 348,
	837, 348, 1462, 835, 1327, 1327, 1327, 836, 1440, 834,
	1479, 1470, 839, 1472, 1469, 1473, 838, 833, 328, 1492,
	942, 441, 442, 447, 654, 446, 345, 1070, 825, 1471,
	792, 1403, 1381, 1380, 1169, 1481, 1483, 1484, 1485, 1119,
	1480, 1490, 1491, 348, 1500, 1123, 1478, 1063, 1066, 1067,
	1068, 1064, 1428, 1065, 1069, 325, 661, 1458, 1459, 1504,
	330, 109, 1505, 1506, 1447, 717, 30, 348, 1257, 1519,
	348, 348, 348, 109, 1503, 1310, 465, 458, 1448, 1403,
	1361, 1511, 387, 386, 389, 390, 391, 392, 609, 1721,
	1699, 388, 393, 1697, 1666, 808, 1512, 1617, 1514, 1700,
	110, 1524, 1525, 1664, 1730, 1714, 1030, 780, 1552, 1436,
	1235, 349, 746, 1013, 807, 370, 110, 952, 385, 382,
	383, 1041, 110, 349, 349, 349, 1269, 1533, 1104, 110,
	1104, 691, 110, 368, 362, 110, 806, 799, 1062, 110,
	1060, 1059, 812, 349, 1528, 1460, 1456, 805, 349, 349,
	349, 110, 349, 349, 1277, 1556, 1045, 1566, 440, 348,
	1010, 1565, 451, 1658, 1545, 349, 349, 348, 439, 54,
	1317, 785, 34, 352, 674, 448, 28, 23, 1575, 22,
	21, 1576, 20, 19, 1398, 1399, 25, 18, 17, 16,
	109, 39, 622, 38, 27, 26, 15, 14, 348, 1419,
	1420, 13, 1421, 1422, 12, 11, 10, 9, 5, 4,
	677, 24, 1605, 735, 1429, 1430, 1544, 2, 0, 996,
	997, 0, 1551, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
	349, 348, 0, 348, 0, 348, 0, 0, 0, 0,
	348, 1620, 348, 348, 348, 109, 0, 1624, 1029, 1571,
	1572, 1573, 1622, 1626, 0, 1630, 0, 1631, 1633, 1634,
	0, 1644, 1637, 349, 349, 1635, 1446, 0, 0, 0,
	1446, 0, 348, 109, 1583, 1611, 1585, 0, 0, 1645,
	1104, 1646, 349, 0, 0, 0, 0, 1652, 0, 110,
	0, 0, 349, 1489, 0, 1629, 110, 0, 110, 0,
	0, 0, 0, 0, 0, 1636, 110, 110, 110, 0,
	348, 1604, 0, 0, 349, 1671, 0, 349, 1677, 1600,
	0, 348, 348, 0, 396, 0, 0, 0, 349, 349,
	1615, 0, 1446, 1688, 1687, 0, 0, 0, 0, 0,
	1447, 0, 30, 348, 1447, 1694, 0, 0, 0, 109,
	1703, 671, 0, 0, 0, 0, 0, 348, 0, 1526,
	1277, 1530, 1531, 0, 1532, 1710, 0, 1534, 0, 1536,
	0, 0, 1719, 0, 1718, 0, 0, 347, 0, 0,
	1649, 0, 0, 349, 1728, 1726, 0, 110, 349, 0,
	349, 0, 0, 0, 0, 0, 348, 0, 110, 110,
	110, 110, 110, 0, 110, 110, 1447, 466, 110, 349,
	595, 1737, 602, 0, 0, 0, 0, 0, 0, 1752,
	0, 0, 0, 0, 0, 0, 0, 110, 1763, 0,
	0, 0, 0, 110, 110, 110, 0, 0, 0, 110,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 1104, 0, 0, 0, 0, 1214, 999,
	1000, 0, 1215, 1005, 1008, 1009, 0, 0, 0, 0,
	0, 0, 0, 1222, 1223, 0, 0, 0, 0, 1229,
	0, 0, 1232, 1233, 0, 0, 0, 0, 1023, 0,
	1239, 1026, 1027, 0, 1241, 0, 0, 1244, 1245, 1246,
	1247, 1248, 1606, 1607, 1608, 1609, 1610, 0, 0, 0,
	1613, 1614, 0, 0, 0, 0, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 0, 0, 110, 1292, 1293, 0, 0,
	0, 0, 361, 0, 0, 0, 110, 110, 110, 110,
	110, 747, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 110, 0, 0, 0, 110, 0, 0, 0,
	0, 110, 110, 107, 0, 110, 110, 110, 779, 782,
	0, 0, 0, 351, 1542, 0, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 888, 1541,
	0, 0, 0, 0, 0, 599, 0, 603, 0, 0,
	897, 898, 899, 0, 1540, 615, 0, 0, 0, 623,
	0, 0, 0, 0, 0, 630, 0, 0, 0, 0,
	918, 0, 466, 0, 0, 922, 923, 924, 0, 926,
	927, 466, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 932, 933, 0, 673, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1400, 1401, 349, 0, 698, 697, 707, 708, 700, 701,
	702, 703, 704, 705, 706, 699, 0, 0, 709, 0,
	1216, 1217, 1756, 0, 0, 0, 0, 349, 0, 698,
	697, 707, 708, 700, 701, 702, 703, 704, 705, 706,
	699, 1234, 0, 709, 698, 697, 707, 708, 700, 701,
	702, 703, 704, 705, 706, 699, 0, 1449, 709, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 1465, 0,
	0, 349, 349, 0, 0, 0, 795, 0, 0, 0,
	0, 1397, 0, 0, 466, 0, 0, 0, 0, 0,
	826, 0, 921, 0, 0, 0, 0, 349, 0, 0,
	110, 698, 697, 707, 708, 700, 701, 702, 703, 704,
	705, 706, 699, 0, 349, 709, 349, 0, 349, 939,
	0, 0, 1213, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 949,
	950, 951, 698, 697, 707, 708, 700, 701, 702, 703,
	704, 705, 706, 699, 0, 634, 709, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 110, 0,
	1529, 0, 0, 0, 349, 0, 0, 349, 349, 349,
	110, 1538, 1539, 1001, 1002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1165, 0, 1167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1558, 1559, 0, 0, 1563, 1195, 0, 466, 0,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 466, 466, 1574, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 0, 0, 0, 0, 466, 466, 466, 0, 466,
	466, 0, 0, 0, 0, 108, 349, 1098, 343, 0,
	0, 0, 466, 466, 349, 108, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 452, 452,
	0, 0, 0, 0, 0, 349, 0, 108, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 108, 0, 0, 0, 0, 1153, 108, 0, 0,
	0, 0, 0, 0, 0, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 349, 466,
	349, 0, 349, 0, 0, 0, 0, 349, 0, 349,
	349, 349, 110, 1017, 0, 0, 0, 0, 0, 0,
	1654, 1655, 1656, 1657, 0, 1661, 0, 1662, 1663, 854,
	1021, 1022, 0, 0, 0, 0, 0, 0, 0, 349,
	110, 0, 0, 0, 0, 1674, 0, 1675, 1676, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 795,
	0, 0, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 832, 1690, 0, 0, 0, 0, 349, 0, 0,
	0, 466, 0, 0, 466, 0, 0, 893, 349, 349,
	0, 0, 0, 896, 0, 466, 595, 0, 1707, 0,
	905, 0, 0, 813, 0, 0, 911, 0, 1238, 0,
	349, 0, 0, 0, 0, 0, 110, 0, 0, 1360,
	0, 0, 925, 0, 349, 0, 0, 1253, 1254, 782,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1393,
	602, 0, 0, 0, 0, 466, 0, 466, 0, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	1764, 1765, 0, 0, 855, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 871, 872, 873, 874, 875, 876, 1203, 877, 878,
	879, 880, 881, 856, 857, 858, 859, 840, 841, 869,
	0, 843, 0, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 860, 861, 862, 863, 864, 865, 866,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 1053, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 108, 0, 108, 815, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 1164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1185,
	1186, 1187, 1188, 1189, 0, 1192, 1193, 0, 0, 1194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 0,
	0, 0, 0, 0, 0, 0, 1200, 0, 0, 0,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 466,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 466, 108, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 108, 0, 0, 108, 0,
	0, 0, 915, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	1547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 0, 0, 1017, 0, 0, 1450, 1452,
	361, 0, 0, 0, 0, 0, 0, 0, 1567, 0,
	0, 1568, 0, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 466, 0, 466, 0, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 452, 915, 0, 0, 0, 452,
	452, 0, 0, 452, 452, 452, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 452,
	452, 452, 452, 0, 0, 0, 1619, 361, 0, 0,
	0, 1515, 0, 0, 1520, 1521, 1522, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 915, 108,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 108,
	1079, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 32, 33, 63, 35,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	37, 57, 58, 0, 60, 0, 1435, 0, 0, 0,
	61, 0, 0, 466, 0, 0, 0, 0, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 108, 108, 108, 108, 108, 0, 108, 108, 62,
	0, 108, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 1198, 1199, 108, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1625, 0, 1627, 0, 1628,
	0, 0, 0, 0, 1579, 0, 1579, 1579, 1579, 0,
	0, 0, 0, 40, 41, 43, 42, 45, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	452, 452, 0, 0, 0, 0, 1579, 0, 0, 0,
	0, 1523, 46, 66, 65, 0, 0, 55, 56, 44,
	0, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 48, 49, 0, 50, 51, 52, 53,
	0, 0, 0, 0, 1679, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 466, 452, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1018, 108,
	108, 108, 108, 108, 0, 1017, 0, 1704, 0, 0,
	0, 1291, 0, 0, 0, 108, 0, 0, 0, 1079,
	0, 1709, 0, 0, 108, 108, 0, 0, 108, 1307,
	915, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 1596, 0,
	1579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1653, 0, 0, 0, 0, 0, 0, 0, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1705, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 577, 565, 0, 108,
	521, 580, 494, 511, 588, 512, 515, 552, 479, 534,
	215, 509, 0, 498, 474, 505, 475, 496, 523, 148,
	527, 493, 567, 537, 579, 182, 0, 499, 226, 554,
	258, 140, 190, 188, 277, 153, 149, 147, 139, 170,
	194, 225, 274, 219, 586, 185, 543, 0, 266, 202,
	0, 0, 0, 525, 569, 532, 562, 520, 553, 484,
	542, 581, 510, 550, 582, 174, 138, 118, 212, 267,
	155, 0, 0, 0, 111, 0, 1105, 1106, 0, 0,
	0, 0, 0, 134, 0, 547, 576, 507, 549, 551,
	590, 473, 544, 0, 477, 480, 587, 572, 502, 503,
	1318, 0, 0, 0, 0, 0, 0, 524, 533, 559,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 541, 0, 0, 0, 481, 478, 0, 0, 0,
	0, 522, 0, 0, 0, 483, 0, 501, 560, 0,
	471, 160, 564, 571, 519, 299, 575, 517, 516, 578,
	237, 0, 271, 164, 181, 130, 178, 115, 126, 0,
	162, 211, 245, 249, 568, 497, 506, 141, 504, 247,
	223, 290, 540, 227, 246, 186, 279, 238, 289, 300,
	301, 275, 297, 309, 263, 119, 273, 287, 135, 257,
	0, 0, 0, 121, 285, 270, 200, 175, 176, 120,
	0, 243, 146, 158, 143, 214, 282, 283, 142, 312,
	127, 296, 123, 128, 295, 207, 278, 286, 201, 193,
	122, 284, 199, 192, 180, 152, 166, 235, 189, 236,
	167, 204, 203, 205, 0, 476, 0, 268, 293, 313,
	132, 492, 276, 305, 308, 0, 239, 133, 159, 151,
	234, 157, 183, 304, 306, 307, 206, 129, 169, 264,
	179, 187, 242, 311, 222, 248, 136, 292, 265, 488,
	491, 486, 487, 535, 536, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 539, 114, 124,
	184, 310, 240, 156, 294, 472, 485, 145, 495, 0,
	0, 508, 513, 514, 526, 528, 529, 530, 531, 538,
	545, 546, 548, 555, 556, 557, 558, 563, 570, 589,
	116, 117, 125, 131, 137, 144, 150, 154, 161, 165,
	168, 171, 172, 173, 177, 191, 195, 196, 197, 198,
	208, 209, 210, 213, 216, 217, 218, 220, 221, 224,
	228, 229, 230, 231, 232, 233, 241, 244, 250, 251,
	252, 253, 254, 255, 256, 259, 260, 261, 262, 269,
	272, 280, 281, 291, 298, 302, 163, 288, 303, 577,
	565, 315, 0, 521, 580, 494, 511, 588, 512, 515,
	552, 479, 534, 215, 509, 0, 498, 474, 505, 475,
	496, 523, 148, 527, 493, 567, 537, 579, 182, 0,
	499, 226, 554, 258, 140, 190, 188, 277, 153, 149,
	147, 139, 170, 194, 225, 274, 219, 586, 185, 543,
	0, 266, 202, 0, 0, 0, 525, 569, 532, 562,
	520, 553, 484, 542, 581, 510, 550, 582, 174, 138,
	118, 212, 267, 155, 0, 0, 0, 111, 0, 1105,
	1106, 0, 0, 0, 0, 0, 134, 0, 547, 576,
	507, 549, 551, 590, 473, 544, 0, 477, 480, 587,
	572, 502, 503, 0, 0, 0, 0, 0, 0, 0,
	524, 533, 559, 518, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 0, 541, 0, 0, 0, 481, 478,
	0, 0, 0, 0, 522, 0, 0, 0, 483, 0,
	501, 560, 0, 471, 160, 564, 571, 519, 299, 575,
	517, 516, 578, 237, 0, 271, 164, 181, 130, 178,
	115, 126, 0, 162, 211, 245, 249, 568, 497, 506,
	141, 504, 247, 223, 290, 540, 227, 246, 186, 279,
	238, 289, 300, 301, 275, 297, 309, 263, 119, 273,
	287, 135, 257, 0, 0, 0, 121, 285, 270, 200,
	175, 176, 120, 0, 243, 146, 158, 143, 214, 282,
	283, 142, 312, 127, 296, 123, 128, 295, 207, 278,
	286, 201, 193, 122, 284, 199, 192, 180, 152, 166,
	235, 189, 236, 167, 204, 203, 205, 0, 476, 0,
	268, 293, 313, 132, 492, 276, 305, 308, 0, 239,
	133, 159, 151, 234, 157, 183, 304, 306, 307, 206,
	129, 169, 264, 179, 187, 242, 311, 222, 248, 136,
	292, 265, 488, 491, 486, 487, 535, 536, 583, 584,
	585, 561, 482, 0, 489, 490, 0, 566, 573, 574,
	539, 114, 124, 184, 310, 240, 156, 294, 472, 485,
	145, 495, 0, 0, 508, 513, 514, 526, 528, 529,
	530, 531, 538, 545, 546, 548, 555, 556, 557, 558,
	563, 570, 589, 116, 117, 125, 131, 137, 144, 150,
	154, 161, 165, 168, 171, 172, 173, 177, 191, 195,
	196, 197, 198, 208, 209, 210, 213, 216, 217, 218,
	220, 221, 224, 228, 229, 230, 231, 232, 233, 241,
	244, 250, 251, 252, 253, 254, 255, 256, 259, 260,
	261, 262, 269, 272, 280, 281, 291, 298, 302, 163,
	288, 303, 577, 565, 315, 0, 521, 580, 494, 511,
	588, 512, 515, 552, 479, 534, 215, 509, 0, 498,
	474, 505, 475, 496, 523, 148, 527, 493, 567, 537,
	579, 182, 0, 499, 226, 554, 258, 140, 190, 188,
	277, 153, 149, 147, 139, 170, 194, 225, 274, 219,
	586, 185, 543, 0, 266, 202, 0, 0, 0, 525,
	569, 532, 562, 520, 553, 484, 542, 581, 510, 550,
	582, 174, 138, 118, 212, 267, 155, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 547, 576, 507, 549, 551, 590, 473, 544, 0,
	477, 480, 587, 572, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 524, 533, 559, 518, 0, 0, 0,
	0, 0, 0, 1439, 0, 500, 0, 541, 0, 0,
	0, 481, 478, 0, 0, 0, 0, 522, 0, 0,
	0, 483, 0, 501, 560, 0, 471, 160, 564, 571,
	519, 299, 575, 517, 516, 578, 237, 0, 271, 164,
	181, 130, 178, 115, 126, 0, 162, 211, 245, 249,
	568, 497, 506, 141, 504, 247, 223, 290, 540, 227,
	246, 186, 279, 238, 289, 300, 301, 275, 297, 309,
	263, 119, 273, 287, 135, 257, 0, 0, 0, 121,
	285, 270, 200, 175, 176, 120, 0, 243, 146, 158,
	143, 214, 282, 283, 142, 312, 127, 296, 123, 128,
	295, 207, 278, 286, 201, 193, 122, 284, 199, 192,
	180, 152, 166, 235, 189, 236, 167, 204, 203, 205,
	0, 476, 0, 268, 293, 313, 132, 492, 276, 305,
	308, 0, 239, 133, 159, 151, 234, 157, 183, 304,
	306, 307, 206, 129, 169, 264, 179, 187, 242, 311,
	222, 248, 136, 292, 265, 488, 491, 486, 487, 535,
	536, 583, 584, 585, 561, 482, 0, 489, 490, 0,
	566, 573, 574, 539, 114, 124, 184, 310, 240, 156,
	294, 472, 485, 145, 495, 0, 0, 508, 513, 514,
	526, 528, 529, 530, 531, 538, 545, 546, 548, 555,
	556, 557, 558, 563, 570, 589, 116, 117, 125, 131,
	137, 144, 150, 154, 161, 165, 168, 171, 172, 173,
	177, 191, 195, 196, 197, 198, 208, 209, 210, 213,
	216, 217, 218, 220, 221, 224, 228, 229, 230, 231,
	232, 233, 241, 244, 250, 251, 252, 253, 254, 255,
	256, 259, 260, 261, 262, 269, 272, 280, 281, 291,
	298, 302, 163, 288, 303, 577, 565, 315, 0, 521,
	580, 494, 511, 588, 512, 515, 552, 479, 534, 215,
	509, 0, 498, 474, 505, 475, 496, 523, 148, 527,
	493, 567, 537, 579, 182, 0, 499, 226, 554, 258,
	140, 190, 188, 277, 153, 149, 147, 139, 170, 194,
	225, 274, 219, 586, 185, 543, 0, 266, 202, 0,
	0, 0, 525, 569, 532, 562, 520, 553, 484, 542,
	581, 510, 550, 582, 174, 138, 118, 212, 267, 155,
	62, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 547, 576, 507, 549, 551, 590,
	473, 544, 0, 477, 480, 587, 572, 502, 503, 0,
	0, 0, 0, 0, 0, 0, 524, 533, 559, 518,
	0, 0, 0, 0, 0, 0, 0, 0, 500, 0,
	541, 0, 0, 0, 481, 478, 0, 0, 0, 0,
	522, 0, 0, 0, 483, 0, 501, 560, 0, 471,
	160, 564, 571, 519, 299, 575, 517, 516, 578, 237,
	0, 271, 164, 181, 130, 178, 115, 126, 0, 162,
	211, 245, 249, 568, 497, 506, 141, 504, 247, 223,
	290, 540, 227, 246, 186, 279, 238, 289, 300, 301,
	275, 297, 309, 263, 119, 273, 287, 135, 257, 0,
	0, 0, 121, 285, 270, 200, 175, 176, 120, 0,
	243, 146, 158, 143, 214, 282, 283, 142, 312, 127,
	296, 123, 128, 295, 207, 278, 286, 201, 193, 122,
	284, 199, 192, 180, 152, 166, 235, 189, 236, 167,
	204, 203, 205, 0, 476, 0, 268, 293, 313, 132,
	492, 276, 305, 308, 0, 239, 133, 159, 151, 234,
	157, 183, 304, 306, 307, 206, 129, 169, 264, 179,
	187, 242, 311, 222, 248, 136, 292, 265, 488, 491,
	486, 487, 535, 536, 583, 584, 585, 561, 482, 0,
	489, 490, 0, 566, 573, 574, 539, 114, 124, 184,
	310, 240, 156, 294, 472, 485, 145, 495, 0, 0,
	508, 513, 514, 526, 528, 529, 530, 531, 538, 545,
	546, 548, 555, 556, 557, 558, 563, 570, 589, 116,
	117, 125, 131, 137, 144, 150, 154, 161, 165, 168,
	171, 172, 173, 177, 191, 195, 196, 197, 198, 208,
	209, 210, 213, 216, 217, 218, 220, 221, 224, 228,
	229, 230, 231, 232, 233, 241, 244, 250, 251, 252,
	253, 254, 255, 256, 259, 260, 261, 262, 269, 272,
	280, 281, 291, 298, 302, 163, 288, 303, 577, 565,
	315, 0, 521, 580, 494, 511, 588, 512, 515, 552,
	479, 534, 215, 509, 0, 498, 474, 505, 475, 496,
	523, 148, 527, 493, 567, 537, 579, 182, 0, 499,
	226, 554, 258, 140, 190, 188, 277, 153, 149, 147,
	139, 170, 194, 225, 274, 219, 586, 185, 543, 0,
	266, 202, 0, 0, 0, 525, 569, 532, 562, 520,
	553, 484, 542, 581, 510, 550, 582, 174, 138, 118,
	212, 267, 155, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 547, 576, 507,
	549, 551, 590, 473, 544, 0, 477, 480, 587, 572,
	502, 503, 0, 0, 0, 0, 0, 0, 0, 524,
	533, 559, 518, 0, 0, 0, 0, 0, 0, 1308,
	0, 500, 0, 541, 0, 0, 0, 481, 478, 0,
	0, 0, 0, 522, 0, 0, 0, 483, 0, 501,
	560, 0, 471, 160, 564, 571, 519, 299, 575, 517,
	516, 578, 237, 0, 271, 164, 181, 130, 178, 115,
	126, 0, 162, 211, 245, 249, 568, 497, 506, 141,
	504, 247, 223, 290, 540, 227, 246, 186, 279, 238,
	289, 300, 301, 275, 297, 309, 263, 119, 273, 287,
	135, 257, 0, 0, 0, 121, 285, 270, 200, 175,
	176, 120, 0, 243, 146, 158, 143, 214, 282, 283,
	142, 312, 127, 296, 123, 128, 295, 207, 278, 286,
	201, 193, 122, 284, 199, 192, 180, 152, 166, 235,
	189, 236, 167, 204, 203, 205, 0, 476, 0, 268,
	293, 313, 132, 492, 276, 305, 308, 0, 239, 133,
	159, 151, 234, 157, 183, 304, 306, 307, 206, 129,
	169, 264, 179, 187, 242, 311, 222, 248, 136, 292,
	265, 488, 491, 486, 487, 535, 536, 583, 584, 585,
	561, 482, 0, 489, 490, 0, 566, 573, 574, 539,
	114, 124, 184, 310, 240, 156, 294, 472, 485, 145,
	495, 0, 0, 508, 513, 514, 526, 528, 529, 530,
	531, 538, 545, 546, 548, 555, 556, 557, 558, 563,
	570, 589, 116, 117, 125, 131, 137, 144, 150, 154,
	161, 165, 168, 171, 172, 173, 177, 191, 195, 196,
	197, 198, 208, 209, 210, 213, 216, 217, 218, 220,
	221, 224, 228, 229, 230, 231, 232, 233, 241, 244,
	250, 251, 252, 253, 254, 255, 256, 259, 260, 261,
	262, 269, 272, 280, 281, 291, 298, 302, 163, 288,
	303, 577, 565, 315, 0, 521, 580, 494, 511, 588,
	512, 515, 552, 479, 534, 215, 509, 0, 498, 474,
	505, 475, 496, 523, 148, 527, 493, 567, 537, 579,
	182, 0, 499, 226, 554, 258, 140, 190, 188, 277,
	153, 149, 147, 139, 170, 194, 225, 274, 219, 586,
	185, 543, 0, 266, 202, 0, 0, 0, 525, 569,
	532, 562, 520, 553, 484, 542, 581, 510, 550, 582,
	174, 138, 118, 212, 267, 155, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	547, 576, 507, 549, 551, 590, 473, 544, 0, 477,
	480, 587, 572, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 524, 533, 559, 518, 0, 0, 0, 0,
	0, 0, 1051, 0, 500, 0, 541, 0, 0, 0,
	481, 478, 0, 0, 0, 0, 522, 0, 0, 0,
	483, 0, 501, 560, 0, 471, 160, 564, 571, 519,
	299, 575, 517, 516, 578, 237, 0, 271, 164, 181,
	130, 178, 115, 126, 0, 162, 211, 245, 249, 568,
	497, 506, 141, 504, 247, 223, 290, 540, 227, 246,
	186, 279, 238, 289, 300, 301, 275, 297, 309, 263,
	119, 273, 287, 135, 257, 0, 0, 0, 121, 285,
	270, 200, 175, 176, 120, 0, 243, 146, 158, 143,
	214, 282, 283, 142, 312, 127, 296, 123, 128, 295,
	207, 278, 286, 201, 193, 122, 284, 199, 192, 180,
	152, 166, 235, 189, 236, 167, 204, 203, 205, 0,
	476, 0, 268, 293, 313, 132, 492, 276, 305, 308,
	0, 239, 133, 159, 151, 234, 157, 183, 304, 306,
	307, 206, 129, 169, 264, 179, 187, 242, 311, 222,
	248, 136, 292, 265, 488, 491, 486, 487, 535, 536,
	583, 584, 585, 561, 482, 0, 489, 490, 0, 566,
	573, 574, 539, 114, 124, 184, 310, 240, 156, 294,
	472, 485, 145, 495, 0, 0, 508, 513, 514, 526,
	528, 529, 530, 531, 538, 545, 546, 548, 555, 556,
	557, 558, 563, 570, 589, 116, 117, 125, 131, 137,
	144, 150, 154, 161, 165, 168, 171, 172, 173, 177,
	191, 195, 196, 197, 198, 208, 209, 210, 213, 216,
	217, 218, 220, 221, 224, 228, 229, 230, 231, 232,
	233, 241, 244, 250, 251, 252, 253, 254, 255, 256,
	259, 260, 261, 262, 269, 272, 280, 281, 291, 298,
	302, 163, 288, 303, 577, 565, 315, 0, 521, 580,
	494, 511, 588, 512, 515, 552, 479, 534, 215, 509,
	0, 498, 474, 505, 475, 496, 523, 148, 527, 493,
	567, 537, 579, 182, 0, 499, 226, 554, 258, 140,
	190, 188, 277, 153, 149, 147, 139, 170, 194, 225,
	274, 219, 586, 185, 543, 0, 266, 202, 0, 0,
	0, 525, 569, 532, 562, 520, 553, 484, 542, 581,
	510, 550, 582, 174, 138, 118, 212, 267, 155, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 547, 576, 507, 549, 551, 590, 473,
	544, 0, 477, 480, 587, 572, 502, 503, 0, 0,
	0, 0, 0, 0, 0, 524, 533, 559, 518, 0,
	0, 0, 0, 0, 0, 0, 0, 500, 0, 541,
	0, 0, 0, 481, 478, 0, 0, 0, 0, 522,
	0, 0, 0, 483, 0, 501, 560, 0, 471, 160,
	564, 571, 519, 299, 575, 517, 516, 578, 237, 0,
	271, 164, 181, 130, 178, 115, 126, 0, 162, 211,
	245, 249, 568, 497, 506, 141, 504, 247, 223, 290,
	540, 227, 246, 186, 279, 238, 289, 300, 301, 275,
	297, 309, 263, 119, 273, 287, 135, 257, 0, 0,
	0, 121, 285, 270, 200, 175, 176, 120, 0, 243,
	146, 158, 143, 214, 282, 283, 142, 312, 127, 296,
	123, 128, 295, 207, 278, 286, 201, 193, 122, 284,
	199, 192, 180, 152, 166, 235, 189, 236, 167, 204,
	203, 205, 0, 476, 0, 268, 293, 313, 132, 492,
	276, 305, 308, 0, 239, 133, 159, 151, 234, 157,
	183, 304, 306, 307, 206, 129, 169, 264, 179, 187,
	242, 311, 222, 248, 136, 292, 265, 488, 491, 486,
	487, 535, 536, 583, 584, 585, 561, 482, 0, 489,
	490, 0, 566, 573, 574, 539, 114, 124, 184, 310,
	240, 156, 294, 472, 485, 145, 495, 0, 0, 508,
	513, 514, 526, 528, 529, 530, 531, 538, 545, 546,
	548, 555, 556, 557, 558, 563, 570, 589, 116, 117,
	125, 131, 137, 144, 150, 154, 161, 165, 168, 171,
	172, 173, 177, 191, 195, 196, 197, 198, 208, 209,
	210, 213, 216, 217, 218, 220, 221, 224, 228, 229,
	230, 231, 232, 233, 241, 244, 250, 251, 252, 253,
	254, 255, 256, 259, 260, 261, 262, 269, 272, 280,
	281, 291, 298, 302, 163, 288, 303, 577, 565, 315,
	0, 521, 580, 494, 511, 588, 512, 515, 552, 479,
	534, 215, 509, 0, 498, 474, 505, 475, 496, 523,
	148, 527, 493, 567, 537, 579, 182, 0, 499, 226,
	554, 258, 140, 190, 188, 277, 153, 149, 147, 139,
	170, 194, 225, 274, 219, 586, 185, 543, 0, 266,
	202, 0, 0, 0, 525, 569, 532, 562, 520, 553,
	484, 542, 581, 510, 550, 582, 174, 138, 118, 212,
	267, 155, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 547, 576, 507, 549,
	551, 590, 473, 544, 0, 477, 480, 587, 572, 502,
	503, 0, 0, 0, 0, 0, 0, 0, 524, 533,
	559, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	500, 0, 541, 0, 0, 0, 481, 478, 0, 0,
	0, 0, 522, 0, 0, 0, 483, 0, 501, 560,
	0, 471, 160, 564, 571, 519, 299, 575, 517, 516,
	578, 237, 0, 271, 164, 181, 130, 178, 115, 126,
	0, 162, 211, 245, 249, 568, 497, 506, 141, 504,
	247, 223, 290, 540, 227, 246, 186, 279, 238, 289,
	300, 301, 275, 297, 309, 263, 119, 273, 287, 135,
	257, 0, 0, 0, 121, 285, 270, 200, 175, 176,
	120, 0, 243, 146, 158, 143, 214, 282, 283, 142,
	312, 127, 296, 123, 469, 295, 207, 278, 286, 201,
	193, 122, 284, 199, 192, 180, 152, 166, 235, 189,
	236, 167, 204, 203, 205, 0, 476, 0, 268, 293,
	313, 132, 492, 276, 305, 308, 0, 239, 133, 159,
	151, 234, 157, 183, 304, 306, 307, 470, 468, 463,
	462, 179, 187, 242, 311, 222, 248, 136, 292, 265,
	488, 491, 486, 487, 535, 536, 583, 584, 585, 561,
	482, 0, 489, 490, 0, 566, 573, 574, 539, 114,
	124, 184, 310, 240, 156, 294, 472, 485, 145, 495,
	0, 0, 508, 513, 514, 526, 528, 529, 530, 531,
	538, 545, 546, 548, 555, 556, 557, 558, 563, 570,
	589, 116, 117, 125, 131, 137, 144, 150, 154, 161,
	165, 168, 171, 172, 173, 177, 191, 195, 196, 197,
	198, 208, 209, 210, 213, 216, 217, 218, 220, 221,
	224, 228, 229, 230, 231, 232, 233, 241, 244, 250,
	251, 252, 253, 254, 255, 256, 259, 260, 261, 262,
	269, 272, 280, 281, 291, 298, 302, 163, 288, 303,
	577, 565, 315, 0, 521, 580, 494, 511, 588, 512,
	515, 552, 479, 534, 215, 509, 0, 498, 474, 505,
	475, 496, 523, 148, 527, 493, 567, 537, 579, 182,
	0, 499, 226, 554, 258, 140, 190, 188, 277, 153,
	149, 147, 139, 170, 194, 225, 274, 219, 586, 185,
	543, 0, 266, 202, 0, 0, 0, 525, 569, 532,
	562, 520, 553, 484, 542, 581, 510, 550, 582, 174,
	138, 118, 212, 267, 155, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 547,
	576, 507, 549, 551, 590, 473, 544, 0, 477, 480,
	587, 572, 502, 503, 0, 0, 0, 0, 0, 0,
	0, 524, 533, 559, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 541, 0, 0, 0, 481,
	478, 0, 0, 0, 0, 522, 0, 0, 0, 483,
	0, 501, 560, 0, 471, 160, 564, 571, 519, 299,
	575, 517, 516, 578, 237, 0, 271, 164, 181, 130,
	178, 115, 126, 0, 162, 211, 245, 249, 568, 497,
	506, 141, 504, 247, 223, 290, 540, 227, 246, 186,
	279, 238, 289, 300, 301, 275, 297, 309, 263, 119,
	273, 817, 135, 257, 0, 0, 0, 121, 285, 270,
	200, 175, 176, 120, 0, 243, 146, 158, 143, 214,
	282, 283, 142, 312, 127, 296, 123, 469, 295, 207,
	278, 286, 201, 193, 122, 284, 199, 192, 180, 152,
	166, 235, 189, 236, 167, 204, 203, 205, 0, 476,
	0, 268, 293, 313, 132, 492, 276, 305, 308, 0,
	239, 133, 159, 151, 234, 157, 183, 304, 306, 307,
	470, 468, 463, 462, 179, 187, 242, 311, 222, 248,
	136, 292, 265, 488, 491, 486, 487, 535, 536, 583,
	584, 585, 561, 482, 0, 489, 490, 0, 566, 573,
	574, 539, 114, 124, 184, 310, 240, 156, 294, 472,
	485, 145, 495, 0, 0, 508, 513, 514, 526, 528,
	529, 530, 531, 538, 545, 546, 548, 555, 556, 557,
	558, 563, 570, 589, 116, 117, 125, 131, 137, 144,
	150, 154, 161, 165, 168, 171, 172, 173, 177, 191,
	195, 196, 197, 198, 208, 209, 210, 213, 216, 217,
	218, 220, 221, 224, 228, 229, 230, 231, 232, 233,
	241, 244, 250, 251, 252, 253, 254, 255, 256, 259,
	260, 261, 262, 269, 272, 280, 281, 291, 298, 302,
	163, 288, 303, 577, 565, 315, 0, 521, 580, 494,
	511, 588, 512, 515, 552, 479, 534, 215, 509, 0,
	498, 474, 505, 475, 496, 523, 148, 527, 493, 567,
	537, 579, 182, 0, 499, 226, 554, 258, 140, 190,
	188, 277, 153, 149, 147, 139, 170, 194, 225, 274,
	219, 586, 185, 543, 0, 266, 202, 0, 0, 0,
	525, 569, 532, 562, 520, 553, 484, 542, 581, 510,
	550, 582, 174, 138, 118, 212, 267, 155, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 547, 576, 507, 549, 551, 590, 473, 544,
	0, 477, 480, 587, 572, 502, 503, 0, 0, 0,
	0, 0, 0, 0, 524, 533, 559, 518, 0, 0,
	0, 0, 0, 0, 0, 0, 500, 0, 541, 0,
	0, 0, 481, 478, 0, 0, 0, 0, 522, 0,
	0, 0, 483, 0, 501, 560, 0, 471, 160, 564,
	571, 519, 299, 575, 517, 516, 578, 237, 0, 271,
	164, 181, 130, 178, 115, 126, 0, 162, 211, 245,
	249, 568, 497, 506, 141, 504, 247, 223, 290, 540,
	227, 246, 186, 279, 238, 289, 300, 301, 275, 297,
	309, 263, 119, 273, 460, 135, 257, 0, 0, 0,
	121, 285, 270, 200, 175, 176, 120, 0, 243, 146,
	158, 143, 214, 282, 283, 142, 312, 127, 296, 123,
	469, 295, 207, 278, 286, 201, 193, 122, 284, 199,
	192, 180, 152, 166, 235, 189, 236, 167, 204, 203,
	205, 0, 476, 0, 268, 293, 313, 132, 492, 276,
	305, 308, 0, 239, 133, 159, 151, 234, 157, 183,
	304, 306, 307, 470, 468, 463, 462, 179, 187, 242,
	311, 222, 248, 136, 292, 265, 488, 491, 486, 487,
	535, 536, 583, 584, 585, 561, 482, 0, 489, 490,
	0, 566, 573, 574, 539, 114, 124, 184, 310, 240,
	156, 294, 472, 485, 145, 495, 0, 0, 508, 513,
	514, 526, 528, 529, 530, 531, 538, 545, 546, 548,
	555, 556, 557, 558, 563, 570, 589, 116, 117, 125,
	131, 137, 144, 150, 154, 161, 165, 168, 171, 172,
	173, 177, 191, 195, 196, 197, 198, 208, 209, 210,
	213, 216, 217, 218, 220, 221, 224, 228, 229, 230,
	231, 232, 233, 241, 244, 250, 251, 252, 253, 254,
	255, 256, 259, 260, 261, 262, 269, 272, 280, 281,
	291, 298, 302, 163, 288, 303, 215, 0, 315, 989,
	0, 366, 0, 0, 0, 148, 0, 365, 0, 0,
	0, 182, 0, 990, 226, 0, 258, 140, 190, 188,
	277, 153, 149, 147, 139, 170, 194, 225, 274, 219,
	409, 185, 0, 0, 266, 202, 0, 0, 0, 0,
	0, 400, 401, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 138, 118, 212, 267, 155, 62, 0, 0,
	111, 387, 386, 389, 390, 391, 392, 0, 0, 134,
	388, 393, 394, 395, 0, 0, 0, 0, 363, 380,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 377, 378, 450, 0, 0, 0, 423, 0, 379,
	0, 0, 372, 373, 375, 374, 376, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 422, 0,
	0, 299, 0, 0, 420, 0, 237, 0, 271, 164,
	181, 130, 178, 115, 126, 0, 162, 211, 245, 249,
	0, 0, 0, 141, 0, 247, 223, 290, 0, 227,
	246, 186, 279, 238, 289, 300, 301, 275, 297, 309,
	263, 119, 273, 287, 135, 257, 0, 0, 0, 121,
	285, 270, 200, 175, 176, 120, 0, 243, 146, 158,
	143, 214, 282, 283, 142, 312, 127, 296, 123, 128,
	295, 207, 278, 286, 201, 193, 122, 284, 199, 192,
	180, 152, 166, 235, 189, 236, 167, 204, 203, 205,
	0, 0, 0, 268, 293, 313, 132, 0, 276, 305,
	308, 0, 239, 133, 159, 151, 234, 157, 183, 304,
	306, 307, 206, 129, 169, 264, 179, 187, 242, 311,
	222, 248, 136, 292, 265, 410, 421, 416, 417, 414,
	415, 413, 412, 411, 424, 402, 403, 404, 405, 407,
	0, 418, 419, 406, 114, 124, 184, 310, 240, 156,
	294, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 144, 150, 154, 161, 165, 168, 171, 172, 173,
	177, 191, 195, 196, 197, 198, 208, 209, 210, 213,
	216, 217, 218, 220, 221, 224, 228, 229, 230, 231,
	232, 233, 241, 244, 250, 251, 252, 253, 254, 255,
	256, 259, 260, 261, 262, 269, 272, 280, 281, 291,
	298, 302, 163, 288, 303, 215, 0, 315, 0, 0,
	366, 0, 0, 0, 148, 0, 365, 0, 0, 0,
	182, 0, 0, 226, 0, 258, 140, 190, 188, 277,
	153, 149, 147, 139, 170, 194, 225, 274, 219, 409,
	185, 0, 0, 266, 202, 0, 0, 0, 0, 0,
	400, 401, 0, 0, 0, 0, 0, 0, 1096, 0,
	174, 138, 118, 212, 267, 155, 62, 0, 0, 111,
	387, 386, 389, 390, 391, 392, 0, 0, 134, 388,
	393, 394, 395, 1097, 0, 0, 0, 363, 380, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	377, 378, 0, 0, 0, 0, 423, 0, 379, 0,
	0, 372, 373, 375, 374, 376, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 422, 0, 0,
	299, 0, 0, 420, 0, 237, 0, 271, 164, 181,
	130, 178, 115, 126, 0, 162, 211, 245, 249, 0,
	0, 0, 141, 0, 247, 223, 290, 0, 227, 246,
	186, 279, 238, 289, 300, 301, 275, 297, 309, 263,
	119, 273, 287, 135, 257, 0, 0, 0, 121, 285,
	270, 200, 175, 176, 120, 0, 243, 146, 158, 143,
	214, 282, 283, 142, 312, 127, 296, 123, 128, 295,
	207, 278, 286, 201, 193, 122, 284, 199, 192, 180,
	152, 166, 235, 189, 236, 167, 204, 203, 205, 0,
	0, 0, 268, 293, 313, 132, 0, 276, 305, 308,
	0, 239, 133, 159, 151, 234, 157, 183, 304, 306,
	307, 206, 129, 169, 264, 179, 187, 242, 311, 222,
	248, 136, 292, 265, 410, 421, 416, 417, 414, 415,
	413, 412, 411, 424, 402, 403, 404, 405, 407, 0,
	418, 419, 406, 114, 124, 184, 310, 240, 156, 294,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	144, 150, 154, 161, 165, 168, 171, 172, 173, 177,
	191, 195, 196, 197, 198, 208, 209, 210, 213, 216,
	217, 218, 220, 221, 224, 228, 229, 230, 231, 232,
	233, 241, 244, 250, 251, 252, 253, 254, 255, 256,
	259, 260, 261, 262, 269, 272, 280, 281, 291, 298,
	302, 163, 288, 303, 215, 0, 315, 0, 0, 366,
	0, 0, 0, 148, 0, 365, 0, 0, 0, 182,
	0, 0, 226, 0, 258, 140, 190, 188, 277, 153,
	149, 147, 139, 170, 194, 225, 274, 219, 409, 185,
	0, 0, 266, 202, 0, 0, 0, 0, 0, 400,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	138, 118, 212, 267, 155, 62, 0, 438, 111, 387,
	386, 389, 390, 391, 392, 0, 0, 134, 388, 393,
	394, 395, 0, 0, 0, 0, 363, 380, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 377,
	378, 0, 0, 0, 0, 423, 0, 379, 0, 0,
	372, 373, 375, 374, 376, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 422, 0, 0, 299,
	0, 0, 420, 0, 237, 0, 271, 164, 181, 130,
	178, 115, 126, 0, 162, 211, 245, 249, 0, 0,
	0, 141, 0, 247, 223, 290, 0, 227, 246, 186,
	279, 238, 289, 300, 301, 275, 297, 309, 263, 119,
	273, 287, 135, 257, 0, 0, 0, 121, 285, 270,
	200, 175, 176, 120, 0, 243, 146, 158, 143, 214,
	282, 283, 142, 312, 127, 296, 123, 128, 295, 207,
	278, 286, 201, 193, 122, 284, 199, 192, 180, 152,
	166, 235, 189, 236, 167, 204, 203, 205, 0, 0,
	0, 268, 293, 313, 132, 0, 276, 305, 308, 0,
	239, 133, 159, 151, 234, 157, 183, 304, 306, 307,
	206, 129, 169, 264, 179, 187, 242, 311, 222, 248,
	136, 292, 265, 410, 421, 416, 417, 414, 415, 413,
	412, 411, 424, 402, 403, 404, 405, 407, 0, 418,
	419, 406, 114, 124, 184, 310, 240, 156, 294, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 144,
	150, 154, 161, 165, 168, 171, 172, 173, 177, 191,
	195, 196, 197, 198, 208, 209, 210, 213, 216, 217,
	218, 220, 221, 224, 228, 229, 230, 231, 232, 233,
	241, 244, 250, 251, 252, 253, 254, 255, 256, 259,
	260, 261, 262, 269, 272, 280, 281, 291, 298, 302,
	163, 288, 303, 215, 0, 315, 0, 0, 366, 0,
	0, 0, 148, 0, 365, 0, 0, 0, 182, 0,
	0, 226, 0, 258, 140, 190, 188, 277, 153, 149,
	147, 139, 170, 194, 225, 274, 219, 409, 185, 0,
	0, 266, 202, 0, 0, 0, 0, 0, 400, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 138,
	118, 212, 267, 155, 62, 0, 0, 111, 387, 386,
	389, 390, 391, 392, 0, 0, 134, 388, 393, 394,
	395, 0, 0, 0, 0, 363, 380, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	450, 0, 0, 0, 423, 0, 379, 0, 0, 372,
	373, 375, 374, 376, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 422, 0, 0, 299, 0,
	0, 420, 0, 237, 0, 271, 164, 181, 130, 178,
	115, 126, 0, 162, 211, 245, 249, 0, 0, 0,
	141, 0, 247, 223, 290, 0, 227, 246, 186, 279,
	238, 289, 300, 301, 275, 297, 309, 263, 119, 273,
	287, 135, 257, 0, 0, 0, 121, 285, 270, 200,
	175, 176, 120, 0, 243, 146, 158, 143, 214, 282,
	283, 142, 312, 127, 296, 123, 128, 295, 207, 278,
	286, 201, 193, 122, 284, 199, 192, 180, 152, 166,
	235, 189, 236, 167, 204, 203, 205, 0, 0, 0,
	268, 293, 313, 132, 0, 276, 305, 308, 0, 239,
	133, 159, 151, 234, 157, 183, 304, 306, 307, 206,
	129, 169, 264, 179, 187, 242, 311, 222, 248, 136,
	292, 265, 410, 421, 416, 417, 414, 415, 413, 412,
	411, 424, 402, 403, 404, 405, 407, 0, 418, 419,
	406, 114, 124, 184, 310, 240, 156, 294, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 144, 150,
	154, 161, 165, 168, 171, 172, 173, 177, 191, 195,
	196, 197, 198, 208, 209, 210, 213, 216, 217, 218,
	220, 221, 224, 228, 229, 230, 231, 232, 233, 241,
	244, 250, 251, 252, 253, 254, 255, 256, 259, 260,
	261, 262, 269, 272, 280, 281, 291, 298, 302, 163,
	288, 303, 215, 0, 315, 0, 0, 366, 0, 0,
	0, 148, 0, 365, 0, 0, 0, 182, 0, 0,
	226, 0, 258, 140, 190, 188, 277, 153, 149, 147,
	139, 170, 194, 225, 274, 219, 409, 185, 0, 0,
	266, 202, 0, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 138, 118,
	212, 267, 155, 62, 0, 0, 111, 387, 1007, 389,
	390, 391, 392, 0, 0, 134, 388, 393, 394, 395,
	0, 0, 0, 0, 363, 380, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 450,
	0, 0, 0, 423, 0, 379, 0, 0, 372, 373,
	375, 374, 376, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 422, 0, 0, 299, 0, 0,
	420, 0, 237, 0, 271, 164, 181, 130, 178, 115,
	126, 0, 162, 211, 245, 249, 0, 0, 0, 141,
	0, 247, 223, 290, 0, 227, 246, 186, 279, 238,
	289, 300, 301, 275, 297, 309, 263, 119, 273, 287,
	135, 257, 0, 0, 0, 121, 285, 270, 200, 175,
	176, 120, 0, 243, 146, 158, 143, 214, 282, 283,
	142, 312, 127, 296, 123, 128, 295, 207, 278, 286,
	201, 193, 122, 284, 199, 192, 180, 152, 166, 235,
	189, 236, 167, 204, 203, 205, 0, 0, 0, 268,
	293, 313, 132, 0, 276, 305, 308, 0, 239, 133,
	159, 151, 234, 157, 183, 304, 306, 307, 206, 129,
	169, 264, 179, 187, 242, 311, 222, 248, 136, 292,
	265, 410, 421, 416, 417, 414, 415, 413, 412, 411,
	424, 402, 403, 404, 405, 407, 0, 418, 419, 406,
	114, 124, 184, 310, 240, 156, 294, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 144, 150, 154,
	161, 165, 168, 171, 172, 173, 177, 191, 195, 196,
	197, 198, 208, 209, 210, 213, 216, 217, 218, 220,
	221, 224, 228, 229, 230, 231, 232, 233, 241, 244,
	250, 251, 252, 253, 254, 255, 256, 259, 260, 261,
	262, 269, 272, 280, 281, 291, 298, 302, 163, 288,
	303, 215, 0, 315, 0, 0, 366, 0, 0, 0,
	148, 0, 365, 0, 0, 0, 182, 0, 0, 226,
	0, 258, 140, 190, 188, 277, 153, 149, 147, 139,
	170, 194, 225, 274, 219, 409, 185, 0, 0, 266,
	202, 0, 0, 0, 0, 0, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 138, 118, 212,
	267, 155, 62, 0, 0, 111, 387, 1004, 389, 390,
	391, 392, 0, 0, 134, 388, 393, 394, 395, 0,
	0, 0, 0, 363, 380, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 378, 450, 0,
	0, 0, 423, 0, 379, 0, 0, 372, 373, 375,
	374, 376, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 422, 0, 0, 299, 0, 0, 420,
	0, 237, 0, 271, 164, 181, 130, 178, 115, 126,
	0, 162, 211, 245, 249, 0, 0, 0, 141, 0,
	247, 223, 290, 0, 227, 246, 186, 279, 238, 289,
	300, 301, 275, 297, 309, 263, 119, 273, 287, 135,
	257, 0, 0, 0, 121, 285, 270, 200, 175, 176,
	120, 0, 243, 146, 158, 143, 214, 282, 283, 142,
	312, 127, 296, 123, 128, 295, 207, 278, 286, 201,
	193, 122, 284, 199, 192, 180, 152, 166, 235, 189,
	236, 167, 204, 203, 205, 0, 0, 0, 268, 293,
	313, 132, 0, 276, 305, 308, 0, 239, 133, 159,
	151, 234, 157, 183, 304, 306, 307, 206, 129, 169,
	264, 179, 187, 242, 311, 222, 248, 136, 292, 265,
	410, 421, 416, 417, 414, 415, 413, 412, 411, 424,
	402, 403, 404, 405, 407, 0, 418, 419, 406, 114,
	124, 184, 310, 240, 156, 294, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 144, 150, 154, 161,
	165, 168, 171, 172, 173, 177, 191, 195, 196, 197,
	198, 208, 209, 210, 213, 216, 217, 218, 220, 221,
	224, 228, 229, 230, 231, 232, 233, 241, 244, 250,
	251, 252, 253, 254, 255, 256, 259, 260, 261, 262,
	269, 272, 280, 281, 291, 298, 302, 163, 288, 303,
	431, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 366, 0,
	0, 0, 148, 0, 365, 0, 0, 0, 182, 0,
	0, 226, 0, 258, 140, 190, 188, 277, 153, 149,
	147, 139, 170, 194, 225, 274, 219, 409, 185, 0,
	0, 266, 202, 0, 0, 0, 0, 0, 400, 401,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 138,
	118, 212, 267, 155, 62, 0, 0, 111, 387, 386,
	389, 390, 391, 392, 0, 0, 134, 388, 393, 394,
	395, 0, 0, 0, 0, 363, 380, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 377, 378,
	0, 0, 0, 0, 423, 0, 379, 0, 0, 372,
	373, 375, 374, 376, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 422, 0, 0, 299, 0,
	0, 420, 0, 237, 0, 271, 164, 181, 130, 178,
	115, 126, 0, 162, 211, 245, 249, 0, 0, 0,
	141, 0, 247, 223, 290, 0, 227, 246, 186, 279,
	238, 289, 300, 301, 275, 297, 309, 263, 119, 273,
	287, 135, 257, 0, 0, 0, 121, 285, 270, 200,
	175, 176, 120, 0, 243, 146, 158, 143, 214, 282,
	283, 142, 312, 127, 296, 123, 128, 295, 207, 278,
	286, 201, 193, 122, 284, 199, 192, 180, 152, 166,
	235, 189, 236, 167, 204, 203, 205, 0, 0, 0,
	268, 293, 313, 132, 0, 276, 305, 308, 0, 239,
	133, 159, 151, 234, 157, 183, 304, 306, 307, 206,
	129, 169, 264, 179, 187, 242, 311, 222, 248, 136,
	292, 265, 410, 421, 416, 417, 414, 415, 413, 412,
	411, 424, 402, 403, 404, 405, 407, 0, 418, 419,
	406, 114, 124, 184, 310, 240, 156, 294, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 144, 150,
	154, 161, 165, 168, 171, 172, 173, 177, 191, 195,
	196, 197, 198, 208, 209, 210, 213, 216, 217, 218,
	220, 221, 224, 228, 229, 230, 231, 232, 233, 241,
	244, 250, 251, 252, 253, 254, 255, 256, 259, 260,
	261, 262, 269, 272, 280, 281, 291, 298, 302, 163,
	288, 303, 215, 0, 315, 0, 0, 366, 0, 0,
	0, 148, 0, 365, 0, 0, 0, 182, 0, 0,
	226, 0, 258, 140, 190, 188, 277, 153, 149, 147,
	139, 170, 194, 225, 274, 219, 409, 185, 0, 0,
	266, 202, 0, 0, 0, 0, 0, 400, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 138, 118,
	212, 267, 155, 62, 0, 0, 111, 387, 386, 389,
	390, 391, 392, 0, 0, 134, 388, 393, 394, 395,
	0, 0, 0, 0, 363, 380, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 377, 378, 0,
	0, 0, 0, 423, 0, 379, 0, 0, 372, 373,
	375, 374, 376, 381, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 422, 0, 0, 299, 0, 0,
	420, 0, 237, 0, 271, 164, 181, 130, 178, 115,
	126, 0, 162, 211, 245, 249, 0, 0, 0, 141,
	0, 247, 223, 290, 0, 227, 246, 186, 279, 238,
	289, 300, 301, 275, 297, 309, 263, 119, 273, 287,
	135, 257, 0, 0, 0, 121, 285, 270, 200, 175,
	176, 120, 0, 243, 146, 158, 143, 214, 282, 283,
	142, 312, 127, 296, 123, 128, 295, 207, 278, 286,
	201, 193, 122, 284, 199, 192, 180, 152, 166, 235,
	189, 236, 167, 204, 203, 205, 0, 0, 0, 268,
	293, 313, 132, 0, 276, 305, 308, 0, 239, 133,
	159, 151, 234, 157, 183, 304, 306, 307, 206, 129,
	169, 264, 179, 187, 242, 311, 222, 248, 136, 292,
	265, 410, 421, 416, 417, 414, 415, 413, 412, 411,
	424, 402, 403, 404, 405, 407, 0, 418, 419, 406,
	114, 124, 184, 310, 240, 156, 294, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 144, 150, 154,
	161, 165, 168, 171, 172, 173, 177, 191, 195, 196,
	197, 198, 208, 209, 210, 213, 216, 217, 218, 220,
	221, 224, 228, 229, 230, 231, 232, 233, 241, 244,
	250, 251, 252, 253, 254, 255, 256, 259, 260, 261,
	262, 269, 272, 280, 281, 291, 298, 302, 163, 288,
	303, 215, 0, 315, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 182, 0, 0, 226,
	0, 258, 140, 190, 188, 277, 153, 149, 147, 139,
	170, 194, 225, 274, 219, 409, 185, 0, 0, 266,
	202, 0, 0, 0, 0, 0, 400, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 138, 118, 212,
	267, 155, 62, 0, 0, 111, 387, 386, 389, 390,
	391, 392, 0, 0, 134, 388, 393, 394, 395, 0,
	0, 0, 0, 0, 380, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 423, 0, 379, 0, 0, 372, 373, 375,
	374, 376, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 422, 0, 0, 299, 0, 0, 420,
	0, 237, 0, 271, 164, 181, 130, 178, 115, 126,
	0, 162, 211, 245, 249, 0, 0, 0, 141, 0,
	247, 223, 290, 1757, 227, 246, 186, 279, 238, 289,
	300, 301, 275, 297, 309, 263, 119, 273, 287, 135,
	257, 0, 0, 0, 121, 285, 270, 200, 175, 176,
	120, 0, 243, 146, 158, 143, 214, 282, 283, 142,
	312, 127, 296, 123, 128, 295, 207, 278, 286, 201,
	193, 122, 284, 199, 192, 180, 152, 166, 235, 189,
	236, 167, 204, 203, 205, 0, 0, 0, 268, 293,
	313, 132, 0, 276, 305, 308, 0, 239, 133, 159,
	151, 234, 157, 183, 304, 306, 307, 206, 129, 169,
	264, 179, 187, 242, 311, 222, 248, 136, 292, 265,
	410, 421, 416, 417, 414, 415, 413, 412, 411, 424,
	402, 403, 404, 405, 407, 0, 418, 419, 406, 114,
	124, 184, 310, 240, 156, 294, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 144, 150, 154, 161,
	165, 168, 171, 172, 173, 177, 191, 195, 196, 197,
	198, 208, 209, 210, 213, 216, 217, 218, 220, 221,
	224, 228, 229, 230, 231, 232, 233, 241, 244, 250,
	251, 252, 253, 254, 255, 256, 259, 260, 261, 262,
	269, 272, 280, 281, 291, 298, 302, 163, 288, 303,
	215, 0, 315, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 182, 0, 0, 226, 0,
	258, 140, 190, 188, 277, 153, 149, 147, 139, 170,
	194, 225, 274, 219, 409, 185, 0, 0, 266, 202,
	0, 0, 0, 0, 0, 400, 401, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 138, 118, 212, 267,
	155, 62, 0, 438, 111, 387, 386, 389, 390, 391,
	392, 0, 0, 134, 388, 393, 394, 395, 0, 0,
	0, 0, 0, 380, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 377, 378, 0, 0, 0,
	0, 423, 0, 379, 0, 0, 372, 373, 375, 374,
	376, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 160, 422, 0, 0, 299, 0, 0, 420, 0,
	237, 0, 271, 164, 181, 130, 178, 115, 126, 0,
	162, 211, 245, 249, 0, 0, 0, 141, 0, 247,
	223, 290, 0, 227, 246, 186, 279, 238, 289, 300,
	301, 275, 297, 309, 263, 119, 273, 287, 135, 257,
	0, 0, 0, 121, 285, 270, 200, 175, 176, 120,
	0, 243, 146, 158, 143, 214, 282, 283, 142, 312,
	127, 296, 123, 128, 295, 207, 278, 286, 201, 193,
	122, 284, 199, 192, 180, 152, 166, 235, 189, 236,
	167, 204, 203, 205, 0, 0, 0, 268, 293, 313,
	132, 0, 276, 305, 308, 0, 239, 133, 159, 151,
	234, 157, 183, 304, 306, 307, 206, 129, 169, 264,
	179, 187, 242, 311, 222, 248, 136, 292, 265, 410,
	421, 416, 417, 414, 415, 413, 412, 411, 424, 402,
	403, 404, 405, 407, 0, 418, 419, 406, 114, 124,
	184, 310, 240, 156, 294, 0, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 117, 125, 131, 137, 144, 150, 154, 161, 165,
	168, 171, 172, 173, 177, 191, 195, 196, 197, 198,
	208, 209, 210, 213, 216, 217, 218, 220, 221, 224,
	228, 229, 230, 231, 232, 233, 241, 244, 250, 251,
	252, 253, 254, 255, 256, 259, 260, 261, 262, 269,
	272, 280, 281, 291, 298, 302, 163, 288, 303, 215,
	0, 315, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 182, 0, 0, 226, 0, 258,
	140, 190, 188, 277, 153, 149, 147, 139, 170, 194,
	225, 274, 219, 409, 185, 0, 0, 266, 202, 0,
	0, 0, 0, 0, 400, 401, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 138, 118, 212, 267, 155,
	62, 0, 0, 111, 387, 386, 389, 390, 391, 392,
	0, 0, 134, 388, 393, 394, 395, 0, 0, 0,
	0, 0, 380, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 377, 378, 0, 0, 0, 0,
	423, 0, 379, 0, 0, 372, 373, 375, 374, 376,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 422, 0, 0, 299, 0, 0, 420, 0, 237,
	0, 271, 164, 181, 130, 178, 115, 126, 0, 162,
	211, 245, 249, 0, 0, 0, 141, 0, 247, 223,
	290, 0, 227, 246, 186, 279, 238, 289, 300, 301,
	275, 297, 309, 263, 119, 273, 287, 135, 257, 0,
	0, 0, 121, 285, 270, 200, 175, 176, 120, 0,
	243, 146, 158, 143, 214, 282, 283, 142, 312, 127,
	296, 123, 128, 295, 207, 278, 286, 201, 193, 122,
	284, 199, 192, 180, 152, 166, 235, 189, 236, 167,
	204, 203, 205, 0, 0, 0, 268, 293, 313, 132,
	0, 276, 305, 308, 0, 239, 133, 159, 151, 234,
	157, 183, 304, 306, 307, 206, 129, 169, 264, 179,
	187, 242, 311, 222, 248, 136, 292, 265, 410, 421,
	416, 417, 414, 415, 413, 412, 411, 424, 402, 403,
	404, 405, 407, 0, 418, 419, 406, 114, 124, 184,
	310, 240, 156, 294, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 144, 150, 154, 161, 165, 168,
	171, 172, 173, 177, 191, 195, 196, 197, 198, 208,
	209, 210, 213, 216, 217, 218, 220, 221, 224, 228,
	229, 230, 231, 232, 233, 241, 244, 250, 251, 252,
	253, 254, 255, 256, 259, 260, 261, 262, 269, 272,
	280, 281, 291, 298, 302, 163, 288, 303, 215, 0,
	315, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 182, 0, 0, 226, 0, 258, 140,
	190, 188, 277, 153, 149, 147, 139, 170, 194, 225,
	274, 219, 0, 185, 0, 0, 266, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 138, 118, 212, 267, 155, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	697, 707, 708, 700, 701, 702, 703, 704, 705, 706,
	699, 0, 0, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 0, 299, 0, 0, 0, 0, 237, 0,
	271, 164, 181, 130, 178, 115, 126, 0, 162, 211,
	245, 249, 0, 0, 0, 141, 0, 247, 223, 290,
	0, 227, 246, 186, 279, 238, 289, 300, 301, 275,
	297, 309, 263, 119, 273, 287, 135, 257, 0, 0,
	0, 121, 285, 270, 200, 175, 176, 120, 0, 243,
	146, 158, 143, 214, 282, 283, 142, 312, 127, 296,
	123, 128, 295, 207, 278, 286, 201, 193, 122, 284,
	199, 192, 180, 152, 166, 235, 189, 236, 167, 204,
	203, 205, 0, 0, 0, 268, 293, 313, 132, 0,
	276, 305, 308, 0, 239, 133, 159, 151, 234, 157,
	183, 304, 306, 307, 206, 129, 169, 264, 179, 187,
	242, 311, 222, 248, 136, 292, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 184, 310,
	240, 156, 294, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 144, 150, 154, 161, 165, 168, 171,
	172, 173, 177, 191, 195, 196, 197, 198, 208, 209,
	210, 213, 216, 217, 218, 220, 221, 224, 228, 229,
	230, 231, 232, 233, 241, 244, 250, 251, 252, 253,
	254, 255, 256, 259, 260, 261, 262, 269, 272, 280,
	281, 291, 298, 302, 163, 288, 303, 215, 0, 315,
	0, 794, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 182, 0, 0, 226, 0, 258, 140, 190,
	188, 277, 153, 149, 147, 139, 170, 194, 225, 274,
	219, 0, 185, 0, 0, 266, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 138, 118, 212, 267, 155, 0, 0,
	0, 111, 0, 796, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 687, 688, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 299, 0, 0, 0, 0, 237, 0, 271,
	164, 181, 130, 178, 115, 126, 0, 162, 211, 245,
	249, 0, 0, 0, 141, 0, 247, 223, 290, 0,
	227, 246, 186, 279, 238, 289, 300, 301, 275, 297,
	309, 263, 119, 273, 287, 135, 257, 0, 0, 0,
	121, 285, 270, 200, 175, 176, 120, 0, 243, 146,
	158, 143, 214, 282, 283, 142, 312, 127, 296, 123,
	128, 295, 207, 278, 286, 201, 193, 122, 284, 199,
	192, 180, 152, 166, 235, 189, 236, 167, 204, 203,
	205, 0, 0, 0, 268, 293, 313, 132, 0, 276,
	305, 308, 0, 239, 133, 159, 151, 234, 157, 183,
	304, 306, 307, 206, 129, 169, 264, 179, 187, 242,
	311, 222, 248, 136, 292, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 184, 310, 240,
	156, 294, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 144, 150, 154, 161, 165, 168, 171, 172,
	173, 177, 191, 195, 196, 197, 198, 208, 209, 210,
	213, 216, 217, 218, 220, 221, 224, 228, 229, 230,
	231, 232, 233, 241, 244, 250, 251, 252, 253, 254,
	255, 256, 259, 260, 261, 262, 269, 272, 280, 281,
	291, 298, 302, 163, 288, 303, 215, 0, 315, 0,
	0, 0, 0, 0, 0, 148, 1121, 0, 0, 0,
	0, 182, 0, 0, 226, 0, 258, 140, 190, 188,
	277, 153, 149, 147, 139, 170, 194, 225, 274, 219,
	0, 185, 0, 0, 266, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 138, 118, 212, 267, 155, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
	1120, 299, 0, 0, 0, 1116, 1113, 0, 1114, 1115,
	181, 598, 178, 115, 126, 1111, 1118, 211, 245, 249,
	0, 0, 0, 141, 0, 247, 223, 290, 0, 227,
	246, 186, 279, 238, 289, 300, 301, 275, 297, 309,
	263, 119, 273, 287, 135, 257, 0, 0, 0, 121,
	285, 270, 200, 175, 176, 120, 0, 243, 146, 158,
	143, 214, 282, 283, 142, 312, 127, 296, 123, 128,
	295, 207, 278, 286, 201, 193, 122, 284, 199, 192,
	180, 152, 166, 235, 189, 236, 167, 204, 203, 205,
	0, 0, 0, 268, 293, 313, 132, 0, 276, 305,
	308, 0, 239, 133, 159, 151, 234, 157, 183, 304,
	306, 307, 206, 129, 169, 264, 179, 187, 242, 311,
	222, 248, 136, 292, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 184, 310, 240, 156,
	294, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 144, 150, 154, 161, 165, 168, 171, 172, 173,
	177, 191, 195, 196, 197, 198, 208, 209, 210, 213,
	216, 217, 218, 220, 221, 224, 228, 229, 230, 231,
	232, 233, 241, 244, 250, 251, 252, 253, 254, 255,
	256, 259, 260, 261, 262, 269, 272, 280, 281, 291,
	298, 302, 163, 288, 303, 31, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 182, 0, 0, 226, 0, 258, 140,
	190, 188, 277, 153, 149, 147, 139, 170, 194, 225,
	274, 219, 0, 185, 0, 0, 266, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 138, 118, 212, 267, 155, 62,
	0, 438, 111, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 0, 299, 0, 0, 0, 0, 237, 0,
	271, 164, 181, 130, 178, 115, 126, 0, 162, 211,
	245, 249, 0, 0, 0, 141, 0, 247, 223, 290,
	0, 227, 246, 186, 279, 238, 289, 300, 301, 275,
	297, 309, 263, 119, 273, 287, 135, 257, 0, 0,
	0, 121, 285, 270, 200, 175, 176, 120, 0, 243,
	146, 158, 143, 214, 282, 283, 142, 312, 127, 296,
	123, 128, 295, 207, 278, 286, 201, 193, 122, 284,
	199, 192, 180, 152, 166, 235, 189, 236, 167, 204,
	203, 205, 0, 0, 0, 268, 293, 313, 132, 0,
	276, 305, 308, 0, 239, 133, 159, 151, 234, 157,
	183, 304, 306, 307, 206, 129, 169, 264, 179, 187,
	242, 311, 222, 248, 136, 292, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 184, 310,
	240, 156, 294, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 144, 150, 154, 161, 165, 168, 171,
	172, 173, 177, 191, 195, 196, 197, 198, 208, 209,
	210, 213, 216, 217, 218, 220, 221, 224, 228, 229,
	230, 231, 232, 233, 241, 244, 250, 251, 252, 253,
	254, 255, 256, 259, 260, 261, 262, 269, 272, 280,
	281, 291, 298, 302, 163, 288, 303, 215, 0, 315,
	0, 1078, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 182, 0, 0, 226, 0, 258, 140, 190,
	188, 277, 153, 149, 147, 139, 170, 194, 225, 274,
	219, 0, 185, 0, 0, 266, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 138, 118, 212, 267, 155, 0, 0,
	0, 111, 0, 1080, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 299, 0, 0, 0, 0, 237, 0, 271,
	164, 181, 130, 178, 115, 126, 0, 162, 211, 245,
	249, 0, 0, 0, 141, 0, 247, 223, 290, 0,
	227, 246, 186, 279, 238, 289, 300, 301, 275, 297,
	309, 263, 119, 273, 287, 135, 257, 0, 0, 0,
	121, 285, 270, 200, 175, 176, 120, 0, 243, 146,
	158, 143, 214, 282, 283, 142, 312, 127, 296, 123,
	128, 295, 207, 278, 286, 201, 193, 122, 284, 199,
	192, 180, 152, 166, 235, 189, 236, 167, 204, 203,
	205, 0, 0, 0, 268, 293, 313, 132, 0, 276,
	305, 308, 0, 239, 133, 159, 151, 234, 157, 183,
	304, 306, 307, 206, 129, 169, 264, 179, 187, 242,
	311, 222, 248, 136, 292, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 184, 310, 240,
	156, 294, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 144, 150, 154, 161, 165, 168, 171, 172,
	173, 177, 191, 195, 196, 197, 198, 208, 209, 210,
	213, 216, 217, 218, 220, 221, 224, 228, 229, 230,
	231, 232, 233, 241, 244, 250, 251, 252, 253, 254,
	255, 256, 259, 260, 261, 262, 269, 272, 280, 281,
	291, 298, 302, 163, 288, 303, 31, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 182, 0, 0, 226, 0, 258,
	140, 190, 188, 277, 153, 149, 147, 139, 170, 194,
	225, 274, 219, 0, 185, 0, 0, 266, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 138, 118, 212, 267, 155,
	62, 0, 0, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 0, 0, 0, 299, 0, 0, 0, 0, 237,
	0, 271, 164, 181, 130, 178, 115, 126, 0, 162,
	211, 245, 249, 0, 0, 0, 141, 0, 247, 223,
	290, 0, 227, 246, 186, 279, 238, 289, 300, 301,
	275, 297, 309, 263, 119, 273, 287, 135, 257, 0,
	0, 0, 121, 285, 270, 200, 175, 176, 120, 0,
	243, 146, 158, 143, 214, 282, 283, 142, 312, 127,
	296, 123, 128, 295, 207, 278, 286, 201, 193, 122,
	284, 199, 192, 180, 152, 166, 235, 189, 236, 167,
	204, 203, 205, 0, 0, 0, 268, 293, 313, 132,
	0, 276, 305, 308, 0, 239, 133, 159, 151, 234,
	157, 183, 304, 306, 307, 206, 129, 169, 264, 179,
	187, 242, 311, 222, 248, 136, 292, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 114, 124, 184,
	310, 240, 156, 294, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	117, 125, 131, 137, 144, 150, 154, 161, 165, 168,
	171, 172, 173, 177, 191, 195, 196, 197, 198, 208,
	209, 210, 213, 216, 217, 218, 220, 221, 224, 228,
	229, 230, 231, 232, 233, 241, 244, 250, 251, 252,
	253, 254, 255, 256, 259, 260, 261, 262, 269, 272,
	280, 281, 291, 298, 302, 163, 288, 303, 215, 0,
	315, 0, 1078, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 182, 0, 0, 226, 0, 258, 140,
	190, 188, 277, 153, 149, 147, 139, 170, 194, 225,
	274, 219, 0, 185, 0, 0, 266, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 138, 118, 212, 267, 155, 0,
	0, 0, 111, 0, 1080, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
	0, 0, 0, 299, 0, 0, 0, 0, 237, 0,
	271, 164, 181, 130, 178, 115, 126, 0, 162, 211,
	245, 249, 0, 0, 0, 141, 0, 247, 223, 290,
	0, 1076, 246, 186, 279, 238, 289, 300, 301, 275,
	297, 309, 263, 119, 273, 287, 135, 257, 0, 0,
	0, 121, 285, 270, 200, 175, 176, 120, 0, 243,
	146, 158, 143, 214, 282, 283, 142, 312, 127, 296,
	123, 128, 295, 207, 278, 286, 201, 193, 122, 284,
	199, 192, 180, 152, 166, 235, 189, 236, 167, 204,
	203, 205, 0, 0, 0, 268, 293, 313, 132, 0,
	276, 305, 308, 0, 239, 133, 159, 151, 234, 157,
	183, 304, 306, 307, 206, 129, 169, 264, 179, 187,
	242, 311, 222, 248, 136, 292, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 114, 124, 184, 310,
	240, 156, 294, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 117,
	125, 131, 137, 144, 150, 154, 161, 165, 168, 171,
	172, 173, 177, 191, 195, 196, 197, 198, 208, 209,
	210, 213, 216, 217, 218, 220, 221, 224, 228, 229,
	230, 231, 232, 233, 241, 244, 250, 251, 252, 253,
	254, 255, 256, 259, 260, 261, 262, 269, 272, 280,
	281, 291, 298, 302, 163, 288, 303, 215, 0, 315,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 182, 0, 0, 226, 0, 258, 140, 190,
	188, 277, 153, 149, 147, 139, 170, 194, 225, 274,
	219, 0, 185, 0, 0, 266, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 138, 118, 212, 267, 155, 0, 0,
	0, 111, 0, 0, 1043, 0, 0, 1044, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 299, 0, 0, 0, 0, 237, 0, 271,
	164, 181, 130, 178, 115, 126, 0, 162, 211, 245,
	249, 0, 0, 0, 141, 0, 247, 223, 290, 0,
	227, 246, 186, 279, 238, 289, 300, 301, 275, 297,
	309, 263, 119, 273, 287, 135, 257, 0, 0, 0,
	121, 285, 270, 200, 175, 176, 120, 0, 243, 146,
	158, 143, 214, 282, 283, 142, 312, 127, 296, 123,
	128, 295, 207, 278, 286, 201, 193, 122, 284, 199,
	192, 180, 152, 166, 235, 189, 236, 167, 204, 203,
	205, 0, 0, 0, 268, 293, 313, 132, 0, 276,
	305, 308, 0, 239, 133, 159, 151, 234, 157, 183,
	304, 306, 307, 206, 129, 169, 264, 179, 187, 242,
	311, 222, 248, 136, 292, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 184, 310, 240,
	156, 294, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 144, 150, 154, 161, 165, 168, 171, 172,
	173, 177, 191, 195, 196, 197, 198, 208, 209, 210,
	213, 216, 217, 218, 220, 221, 224, 228, 229, 230,
	231, 232, 233, 241, 244, 250, 251, 252, 253, 254,
	255, 256, 259, 260, 261, 262, 269, 272, 280, 281,
	291, 298, 302, 163, 288, 303, 215, 0, 315, 0,
	0, 0, 0, 0, 0, 148, 0, 828, 0, 0,
	0, 182, 0, 0, 226, 0, 258, 140, 190, 188,
	277, 153, 149, 147, 139, 170, 194, 225, 274, 219,
	0, 185, 0, 0, 266, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 138, 118, 212, 267, 155, 0, 0, 0,
	111, 0, 827, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
	0, 299, 0, 0, 0, 0, 237, 0, 271, 164,
	181, 130, 178, 115, 126, 0, 162, 211, 245, 249,
	0, 0, 0, 141, 0, 247, 223, 290, 0, 227,
	246, 186, 279, 238, 289, 300, 301, 275, 297, 309,
	263, 119, 273, 287, 135, 257, 0, 0, 0, 121,
	285, 270, 200, 175, 176, 120, 0, 243, 146, 158,
	143, 214, 282, 283, 142, 312, 127, 296, 123, 128,
	295, 207, 278, 286, 201, 193, 122, 284, 199, 192,
	180, 152, 166, 235, 189, 236, 167, 204, 203, 205,
	0, 0, 0, 268, 293, 313, 132, 0, 276, 305,
	308, 0, 239, 133, 159, 151, 234, 157, 183, 304,
	306, 307, 206, 129, 169, 264, 179, 187, 242, 311,
	222, 248, 136, 292, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 184, 310, 240, 156,
	294, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 144, 150, 154, 161, 165, 168, 171, 172, 173,
	177, 191, 195, 196, 197, 198, 208, 209, 210, 213,
	216, 217, 218, 220, 221, 224, 228, 229, 230, 231,
	232, 233, 241, 244, 250, 251, 252, 253, 254, 255,
	256, 259, 260, 261, 262, 269, 272, 280, 281, 291,
	298, 302, 163, 288, 303, 215, 0, 315, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	182, 0, 0, 226, 0, 258, 140, 190, 188, 277,
	153, 149, 147, 139, 170, 194, 225, 274, 219, 0,
	185, 0, 0, 266, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 138, 118, 212, 267, 155, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
	299, 0, 0, 0, 0, 237, 0, 271, 164, 181,
	598, 178, 115, 126, 596, 162, 211, 245, 249, 0,
	0, 0, 141, 0, 247, 223, 290, 0, 227, 246,
	186, 279, 238, 289, 300, 301, 275, 297, 309, 263,
	119, 273, 287, 135, 257, 0, 0, 0, 121, 285,
	270, 200, 175, 176, 120, 0, 243, 146, 158, 143,
	214, 282, 283, 142, 312, 127, 296, 123, 128, 295,
	207, 278, 286, 201, 193, 122, 284, 199, 192, 180,
	152, 166, 235, 189, 236, 167, 204, 203, 205, 0,
	0, 0, 268, 293, 313, 132, 0, 276, 305, 308,
	0, 239, 133, 159, 151, 234, 157, 183, 304, 306,
	307, 206, 129, 169, 264, 179, 187, 242, 311, 222,
	248, 136, 292, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 124, 184, 310, 240, 156, 294,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	144, 150, 154, 161, 165, 168, 171, 172, 173, 177,
	191, 195, 196, 197, 198, 208, 209, 210, 213, 216,
	217, 218, 220, 221, 224, 228, 229, 230, 231, 232,
	233, 241, 244, 250, 251, 252, 253, 254, 255, 256,
	259, 260, 261, 262, 269, 272, 280, 281, 291, 298,
	302, 163, 288, 303, 215, 0, 315, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 182,
	0, 0, 226, 0, 258, 140, 190, 188, 277, 153,
	149, 147, 139, 170, 194, 225, 274, 219, 0, 185,
	0, 0, 266, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	138, 118, 212, 267, 155, 0, 0, 438, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 160, 0, 0, 0, 299,
	0, 0, 0, 0, 237, 0, 271, 164, 181, 130,
	178, 115, 126, 0, 162, 211, 245, 249, 0, 0,
	0, 141, 0, 247, 223, 290, 0, 227, 246, 186,
	279, 238, 289, 300, 301, 275, 297, 309, 263, 119,
	273, 287, 135, 257, 0, 0, 0, 121, 285, 270,
	200, 175, 176, 120, 0, 243, 146, 158, 143, 214,
	282, 283, 142, 312, 127, 296, 123, 128, 295, 207,
	278, 286, 201, 193, 122, 284, 199, 192, 180, 152,
	166, 235, 189, 236, 167, 204, 203, 205, 0, 0,
	0, 268, 293, 313, 132, 0, 276, 305, 308, 0,
	239, 133, 159, 151, 234, 157, 183, 304, 306, 307,
	206, 129, 169, 264, 179, 187, 242, 311, 222, 248,
	136, 292, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 184, 310, 240, 156, 294, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 144,
	150, 154, 161, 165, 168, 171, 172, 173, 177, 191,
	195, 196, 197, 198, 208, 209, 210, 213, 216, 217,
	218, 220, 221, 224, 228, 229, 230, 231, 232, 233,
	241, 244, 250, 251, 252, 253, 254, 255, 256, 259,
	260, 261, 262, 269, 272, 280, 281, 291, 298, 302,
	163, 288, 303, 215, 0, 315, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 182, 0,
	0, 226, 0, 258, 140, 190, 188, 277, 153, 149,
	147, 139, 170, 194, 225, 274, 219, 0, 185, 0,
	0, 266, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 138,
	118, 212, 267, 155, 62, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 0, 0, 299, 0,
	0, 0, 0, 237, 0, 271, 164, 181, 130, 178,
	115, 126, 0, 162, 211, 245, 249, 0, 0, 0,
	141, 0, 247, 223, 290, 0, 227, 246, 186, 279,
	238, 289, 300, 301, 275, 297, 309, 263, 119, 273,
	287, 135, 257, 0, 0, 0, 121, 285, 270, 200,
	175, 176, 120, 0, 243, 146, 158, 143, 214, 282,
	283, 142, 312, 127, 296, 123, 128, 295, 207, 278,
	286, 201, 193, 122, 284, 199, 192, 180, 152, 166,
	235, 189, 236, 167, 204, 203, 205, 0, 0, 0,
	268, 293, 313, 132, 0, 276, 305, 308, 0, 239,
	133, 159, 151, 234, 157, 183, 304, 306, 307, 206,
	129, 169, 264, 179, 187, 242, 311, 222, 248, 136,
	292, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 124, 184, 310, 240, 156, 294, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 144, 150,
	154, 161, 165, 168, 171, 172, 173, 177, 191, 195,
	196, 197, 198, 208, 209, 210, 213, 216, 217, 218,
	220, 221, 224, 228, 229, 230, 231, 232, 233, 241,
	244, 250, 251, 252, 253, 254, 255, 256, 259, 260,
	261, 262, 269, 272, 280, 281, 291, 298, 302, 163,
	288, 303, 215, 0, 315, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 182, 0, 0,
	226, 0, 258, 140, 190, 188, 277, 153, 149, 147,
	139, 170, 194, 225, 274, 219, 0, 185, 0, 0,
	266, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 138, 118,
	212, 267, 155, 0, 0, 0, 111, 0, 1080, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 0, 299, 0, 0,
	0, 0, 237, 0, 271, 164, 181, 130, 178, 115,
	126, 0, 162, 211, 245, 249, 0, 0, 0, 141,
	0, 247, 223, 290, 0, 227, 246, 186, 279, 238,
	289, 300, 301, 275, 297, 309, 263, 119, 273, 287,
	135, 257, 0, 0, 0, 121, 285, 270, 200, 175,
	176, 120, 0, 243, 146, 158, 143, 214, 282, 283,
	142, 312, 127, 296, 123, 128, 295, 207, 278, 286,
	201, 193, 122, 284, 199, 192, 180, 152, 166, 235,
	189, 236, 167, 204, 203, 205, 0, 0, 0, 268,
	293, 313, 132, 0, 276, 305, 308, 0, 239, 133,
	159, 151, 234, 157, 183, 304, 306, 307, 206, 129,
	169, 264, 179, 187, 242, 311, 222, 248, 136, 292,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 184, 310, 240, 156, 294, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 144, 150, 154,
	161, 165, 168, 171, 172, 173, 177, 191, 195, 196,
	197, 198, 208, 209, 210, 213, 216, 217, 218, 220,
	221, 224, 228, 229, 230, 231, 232, 233, 241, 244,
	250, 251, 252, 253, 254, 255, 256, 259, 260, 261,
	262, 269, 272, 280, 281, 291, 298, 302, 163, 288,
	303, 215, 0, 315, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 182, 0, 0, 226,
	0, 258, 140, 190, 188, 277, 153, 149, 147, 139,
	170, 194, 225, 274, 219, 0, 185, 0, 0, 266,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 138, 118, 212,
	267, 155, 0, 0, 0, 111, 0, 796, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 160, 0, 0, 0, 299, 0, 0, 0,
	0, 237, 0, 271, 164, 181, 130, 178, 115, 126,
	0, 162, 211, 245, 249, 0, 0, 0, 141, 0,
	247, 223, 290, 0, 227, 246, 186, 279, 238, 289,
	300, 301, 275, 297, 309, 263, 119, 273, 287, 135,
	257, 0, 0, 0, 121, 285, 270, 200, 175, 176,
	120, 0, 243, 146, 158, 143, 214, 282, 283, 142,
	312, 127, 296, 123, 128, 295, 207, 278, 286, 201,
	193, 122, 284, 199, 192, 180, 152, 166, 235, 189,
	236, 167, 204, 203, 205, 0, 0, 0, 268, 293,
	313, 132, 0, 276, 305, 308, 0, 239, 133, 159,
	151, 234, 157, 183, 304, 306, 307, 206, 129, 169,
	264, 179, 187, 242, 311, 222, 248, 136, 292, 265,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	124, 184, 310, 240, 156, 294, 0, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 117, 125, 131, 137, 144, 150, 154, 161,
	165, 168, 171, 172, 173, 177, 191, 195, 196, 197,
	198, 208, 209, 210, 213, 216, 217, 218, 220, 221,
	224, 228, 229, 230, 231, 232, 233, 241, 244, 250,
	251, 252, 253, 254, 255, 256, 259, 260, 261, 262,
	269, 272, 280, 281, 291, 298, 302, 163, 288, 303,
	810, 0, 315, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 0, 182, 0, 0, 226, 0, 258, 140, 190,
	188, 277, 153, 149, 147, 139, 170, 194, 225, 274,
	219, 0, 185, 0, 0, 266, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 138, 118, 212, 267, 155, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 160, 0,
	0, 0, 299, 0, 0, 0, 0, 237, 0, 271,
	164, 181, 130, 178, 115, 126, 0, 162, 211, 245,
	249, 0, 0, 0, 141, 0, 247, 223, 290, 0,
	227, 246, 186, 279, 238, 289, 300, 301, 275, 297,
	309, 263, 119, 273, 287, 135, 257, 0, 0, 0,
	121, 285, 270, 200, 175, 176, 120, 0, 243, 146,
	158, 143, 214, 282, 283, 142, 312, 127, 296, 123,
	128, 295, 207, 278, 286, 201, 193, 122, 284, 199,
	192, 180, 152, 166, 235, 189, 236, 167, 204, 203,
	205, 0, 0, 0, 268, 293, 313, 132, 0, 276,
	305, 308, 0, 239, 133, 159, 151, 234, 157, 183,
	304, 306, 307, 206, 129, 169, 264, 179, 187, 242,
	311, 222, 248, 136, 292, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 114, 124, 184, 310, 240,
	156, 294, 0, 0, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 117, 125,
	131, 137, 144, 150, 154, 161, 165, 168, 171, 172,
	173, 177, 191, 195, 196, 197, 198, 208, 209, 210,
	213, 216, 217, 218, 220, 221, 224, 228, 229, 230,
	231, 232, 233, 241, 244, 250, 251, 252, 253, 254,
	255, 256, 259, 260, 261, 262, 269, 272, 280, 281,
	291, 298, 302, 163, 288, 303, 215, 0, 315, 0,
	0, 0, 0, 0, 800, 148, 0, 0, 0, 0,
	0, 182, 0, 0, 226, 0, 258, 140, 190, 188,
	277, 153, 149, 147, 139, 170, 194, 225, 274, 219,
	0, 185, 0, 0, 266, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 138, 118, 212, 267, 155, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 160, 0, 0,
	0, 299, 0, 0, 0, 0, 237, 0, 271, 164,
	181, 130, 178, 115, 126, 0, 162, 211, 245, 249,
	0, 0, 0, 141, 0, 247, 223, 290, 0, 227,
	246, 186, 279, 238, 289, 300, 301, 275, 297, 309,
	263, 119, 273, 287, 135, 257, 0, 0, 0, 121,
	285, 270, 200, 175, 176, 120, 0, 243, 146, 158,
	143, 214, 282, 283, 142, 312, 127, 296, 123, 128,
	295, 207, 278, 286, 201, 193, 122, 284, 199, 192,
	180, 152, 166, 235, 189, 236, 167, 204, 203, 205,
	0, 0, 0, 268, 293, 313, 132, 0, 276, 305,
	308, 0, 239, 133, 159, 151, 234, 157, 183, 304,
	306, 307, 206, 129, 169, 264, 179, 187, 242, 311,
	222, 248, 136, 292, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 114, 124, 184, 310, 240, 156,
	294, 0, 0, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 117, 125, 131,
	137, 144, 150, 154, 161, 165, 168, 171, 172, 173,
	177, 191, 195, 196, 197, 198, 208, 209, 210, 213,
	216, 217, 218, 220, 221, 224, 228, 229, 230, 231,
	232, 233, 241, 244, 250, 251, 252, 253, 254, 255,
	256, 259, 260, 261, 262, 269, 272, 280, 281, 291,
	298, 302, 163, 288, 303, 215, 0, 315, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	182, 0, 0, 226, 0, 258, 140, 190, 188, 277,
	153, 149, 147, 139, 170, 194, 225, 274, 219, 0,
	185, 0, 0, 266, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 138, 118, 212, 267, 155, 0, 0, 0, 111,
	0, 676, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
	299, 0, 0, 0, 0, 237, 0, 271, 164, 181,
	130, 178, 115, 126, 0, 162, 211, 245, 249, 0,
	0, 0, 141, 0, 247, 223, 290, 0, 227, 246,
	186, 279, 238, 289, 300, 301, 275, 297, 309, 263,
	119, 273, 287, 135, 257, 0, 0, 0, 121, 285,
	270, 200, 175, 176, 120, 0, 243, 146, 158, 143,
	214, 282, 283, 142, 312, 127, 296, 123, 128, 295,
	207, 278, 286, 201, 193, 122, 284, 199, 192, 180,
	152, 166, 235, 189, 236, 167, 204, 203, 205, 0,
	0, 0, 268, 293, 313, 132, 0, 276, 305, 308,
	0, 239, 133, 159, 151, 234, 157, 183, 304, 306,
	307, 206, 129, 169, 264, 179, 187, 242, 311, 222,
	248, 136, 292, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 114, 124, 184, 310, 240, 156, 294,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 117, 125, 131, 137,
	144, 150, 154, 161, 165, 168, 171, 172, 173, 177,
	191, 195, 196, 197, 198, 208, 209, 210, 213, 216,
	217, 218, 220, 221, 224, 228, 229, 230, 231, 232,
	233, 241, 244, 250, 251, 252, 253, 254, 255, 256,
	259, 260, 261, 262, 269, 272, 280, 281, 291, 298,
	302, 163, 288, 303, 215, 0, 315, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 182,
	0, 0, 226, 0, 258, 140, 190, 188, 277, 153,
	149, 147, 139, 170, 194, 225, 274, 219, 0, 185,
	0, 0, 266, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	138, 118, 212, 267, 155, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 160, 0, 0, 0, 299,
	0, 0, 0, 0, 237, 0, 271, 164, 181, 130,
	178, 115, 126, 0, 162, 211, 245, 249, 0, 0,
	0, 141, 0, 247, 223, 290, 0, 227, 246, 186,
	279, 238, 289, 300, 301, 275, 297, 309, 263, 119,
	273, 287, 135, 257, 0, 0, 0, 121, 285, 270,
	200, 175, 176, 120, 0, 243, 146, 158, 143, 214,
	282, 283, 142, 312, 127, 296, 123, 128, 295, 207,
	278, 286, 201, 193, 122, 284, 199, 192, 180, 152,
	166, 235, 189, 236, 167, 204, 203, 205, 0, 0,
	0, 268, 293, 313, 132, 0, 276, 305, 308, 0,
	239, 133, 159, 151, 234, 157, 183, 304, 306, 307,
	206, 129, 169, 264, 179, 187, 242, 311, 222, 248,
	136, 292, 265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 114, 124, 184, 310, 240, 156, 294, 0,
	0, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 117, 125, 131, 137, 144,
	150, 154, 161, 165, 168, 171, 172, 173, 177, 191,
	195, 196, 197, 198, 208, 209, 210, 213, 216, 217,
	218, 220, 221, 224, 228, 229, 230, 231, 232, 233,
	241, 244, 250, 251, 252, 253, 254, 255, 256, 259,
	260, 261, 262, 269, 272, 280, 281, 291, 298, 302,
	353, 288, 303, 215, 0, 315, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 182, 0,
	0, 226, 0, 258, 140, 190, 188, 277, 153, 149,
	147, 139, 170, 194, 225, 274, 219, 0, 185, 0,
	0, 266, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 138,
	118, 212, 267, 155, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 160, 0, 106, 0, 299, 0,
	0, 0, 0, 237, 0, 271, 164, 181, 130, 178,
	115, 126, 0, 162, 211, 245, 249, 0, 0, 0,
	141, 0, 247, 223, 290, 0, 227, 246, 186, 279,
	238, 289, 300, 301, 275, 297, 309, 263, 119, 273,
	287, 135, 257, 0, 0, 0, 121, 285, 270, 200,
	175, 176, 120, 0, 243, 146, 158, 143, 214, 282,
	283, 142, 312, 127, 296, 123, 128, 295, 207, 278,
	286, 201, 193, 122, 284, 199, 192, 180, 152, 166,
	235, 189, 236, 167, 204, 203, 205, 0, 0, 0,
	268, 293, 313, 132, 0, 276, 305, 308, 0, 239,
	133, 159, 151, 234, 157, 183, 304, 306, 307, 206,
	129, 169, 264, 179, 187, 242, 311, 222, 248, 136,
	292, 265, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 114, 124, 184, 310, 240, 156, 294, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 117, 125, 131, 137, 144, 150,
	154, 161, 165, 168, 171, 172, 173, 177, 191, 195,
	196, 197, 198, 208, 209, 210, 213, 216, 217, 218,
	220, 221, 224, 228, 229, 230, 231, 232, 233, 241,
	244, 250, 251, 252, 253, 254, 255, 256, 259, 260,
	261, 262, 269, 272, 280, 281, 291, 298, 302, 163,
	288, 303, 215, 0, 315, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 182, 0, 0,
	226, 0, 258, 140, 190, 188, 277, 153, 149, 147,
	139, 170, 194, 225, 274, 219, 0, 185, 0, 0,
	266, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 138, 118,
	212, 267, 155, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 160, 0, 0, 0, 299, 0, 0,
	0, 0, 237, 0, 271, 164, 181, 130, 178, 115,
	126, 0, 162, 211, 245, 249, 0, 0, 0, 141,
	0, 247, 223, 290, 0, 227, 246, 186, 279, 238,
	289, 300, 301, 275, 297, 309, 263, 119, 273, 287,
	135, 257, 0, 0, 0, 121, 285, 270, 200, 175,
	176, 120, 0, 243, 146, 158, 143, 214, 282, 283,
	142, 312, 127, 296, 123, 128, 295, 207, 278, 286,
	201, 193, 122, 284, 199, 192, 180, 152, 166, 235,
	189, 236, 167, 204, 203, 205, 0, 0, 0, 268,
	293, 313, 132, 0, 276, 305, 308, 0, 239, 133,
	159, 151, 234, 157, 183, 304, 306, 307, 206, 129,
	169, 264, 179, 187, 242, 311, 222, 248, 136, 292,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	114, 124, 184, 310, 240, 156, 294, 0, 0, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 117, 125, 131, 137, 144, 150, 154,
	161, 165, 168, 171, 172, 173, 177, 191, 195, 196,
	197, 198, 208, 209, 210, 213, 216, 217, 218, 220,
	221, 224, 228, 229, 230, 231, 232, 233, 241, 244,
	250, 251, 252, 253, 254, 255, 256, 259, 260, 261,
	262, 269, 272, 280, 281, 291, 298, 302, 163, 288,
	303, 0, 0, 315,
}
var yyPact = [...]int{

	3089, -1000, -267, 1246, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1193,
	938, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 322, 860,
	50, 26, 202, 13, 18494, 196, 35, 18863, -1000, 37,
	-1000, 40, 18863, 53, 18125, -1000, -1000, -36, -42, -1000,
	10343, 1071, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	878, 1170, 1175, 1191, 747, 1282, -1000, 8854, 8854, 179,
	179, 179, 7378, -1000, -1000, 15166, 18863, 18863, 18863, -124,
	176, 176, 176, 169, 546, 195, 18863, 27, 27, 292,
	18863, 168, 27, 168, 168, 168, 18863, -1000, 235, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 41, -1000, 18863, 27, 1100, 394,
	32, 281, 281, 281, -1000, 282, -1000, 5080, 65, 78,
	-31, 1211, 68, 39, -1000, 394, 5080, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 184, -1000, -1000, -1000, -1000,
	18863, 17756, 143, 314, -1000, -1000, -1000, -1000, -1000, -1000,
	683, 346, -1000, 10343, 574, 748, 748, -1000, -1000, 217,
	-1000, -1000, 11450, 11450, 11450, 11450, 11450, 11450, 11450, 11450,
	11450, 11450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 748, 232, -1000, 9974,
	748, 748, 748, 748, 748, 748, 748, 748, 10343, 748,
	748, 748, 748, 748, 748, 748, 748, 748, 748, 748,
	748, 748, 748, 748, 748, -1000, -1000, -1000, 1193, -1000,
	938, -1000, -1000, -1000, 1096, 10343, 10343, 1193, -1000, 1023,
	8854, -1000, -1000, 1183, -1000, -1000, -1000, -1000, 410, 1226,
	-1000, 12188, 231, 1221, 17387, -1000, 15904, 17018, 804, 6995,
	-95, -1000, -1000, -1000, 307, 14797, -1000, -1000, -1000, 1092,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 737, 18863, -1000, -1000, 2388, 27, -1000, 839, -1000,
	734, -1000, 816, 5080, 187, 27, 326, 27, 18863, 192,
	-1000, -1000, -1000, 542, 18863, 5080, 5080, 5080, 92, 125,
	88, 18863, 802, 183, 18863, 1162, 970, 18863, 27, 27,
	-1000, 6229, 551, -1000, -1000, 5080, 394, -1000, 541, 10343,
	5080, 5080, 5080, 18863, 5080, 5080, -1000, 539, -1000, -1000,
	402, -1000, -1000, -1000, -1000, -1000, -1000, 5080, 5080, 389,
	402, 389, -1000, -1000, -1000, -1000, 10343, 281, -1000, 969,
	-1000, -1000, 43, -1000, -1000, -1000, -1000, -1000, 1246, -1000,
	-1000, -1000, -117, -1000, -1000, 10343, 10343, 10343, 10343, 476,
	293, 11450, 515, 446, 11450, 11450, 11450, 11450, 11450, 11450,
	11450, 11450, 11450, 11450, 11450, 11450, 11450, 11450, 11450, 36,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27, -1000,
	1244, 1318, 1318, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 11819, 7747, 6229, 747, 732, 1193, 8854, 8854,
	10343, 10343, 9592, 9223, 8854, 1093, 337, 346, 18863, -1000,
	-1000, 11081, -1000, -1000, -1000, -1000, -1000, 558, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18863, 18863, 8854, 8854, 8854,
	8854, 8854, -1000, 1175, 747, 1183, 1150, 1239, 272, 869,
	800, -1000, 681, 1175, 14428, 852, -1000, 1183, -1000, -1000,
	-1000, 18863, -1000, -1000, 16642, -1000, -1000, 5846, 18863, 124,
	18863, -1000, 792, 1233, -1000, -1000, -1000, 1167, 13690, 14059,
	18863, 766, 703, -1000, -1000, 230, 6612, -95, -1000, 6612,
	767, -1000, -89, -60, 8116, 243, -1000, -1000, -1000, -1000,
	4314, 12557, 627, 380, -30, -1000, -1000, -1000, 816, -1000,
	816, 816, 816, 816, 8, 8, 8, 8, -1000, -1000,
	-1000, -1000, -1000, 859, 855, -1000, 816, 816, 816, 816,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 845, 845, 845,
	820, 820, 156, 10343, 137, 18863, 1158, 468, -1000, 18863,
	5080, 1161, 5080, -1000, 27, -1000, 90, -1000, -1000, -1000,
	18863, 18863, 18863, 18863, 18863, 209, 18863, 18863, 795, -1000,
	18863, 5080, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 346, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18863,
	-1000, -1000, -1000, -1000, 394, 18863, 18863, 18863, 394, 346,
	-1000, 18863, 18863, -1000, -1000, -1000, -1000, -1000, 346, 293,
	334, 450, -1000, -1000, 504, -1000, -1000, 886, -1000, -1000,
	-1000, -1000, 515, 11450, 11450, 11450, 368, 886, 2052, 904,
	526, 251, 253, 253, 265, 265, 265, 265, 265, 1087,
	1087, -1000, -1000, -1000, 558, -1000, -1000, -1000, 558, 8854,
	8854, 790, 748, 226, -1000, 878, -1000, -1000, 1175, 712,
	712, 521, 847, 363, 1219, 712, 344, 1213, 712, 712,
	8854, -1000, -1000, 354, -1000, 10343, 558, -1000, 225, -1000,
	458, 787, 786, 712, 558, 558, 712, 712, 1096, -1000,
	-1000, 1064, -1000, 1019, 10343, 10343, 10343, -1000, -1000, -1000,
	1096, 1182, -1000, 1038, 1033, 1210, 8854, 15904, 1183, -1000,
	-1000, -1000, 224, 1210, 1013, 748, -1000, 18863, 15904, 15904,
	15904, 15904, 15904, -1000, 1007, 995, -1000, 1006, 987, 991,
	18863, -1000, 726, 747, 13690, 252, 748, -1000, 16273, -1000,
	-1000, 124, 723, 15904, 18863, -1000, -1000, 15904, 18863, 5463,
	-1000, 767, -95, -66, -1000, -1000, -1000, -1000, 346, -1000,
	42, 765, 3931, -1000, -1000, -1000, -1000, 151, -1000, -1000,
	842, 27, -1000, 1137, 324, 324, 79, 27, 1125, -1000,
	-1000, -1000, -1000, 1103, -1000, 369, -63, -1000, -1000, 8,
	8, -1000, -1000, 243, 1090, 243, 243, 243, 538, 538,
	-1000, -1000, -1000, -1000, -1000, 467, -1000, -1000, -1000, 466,
	-1000, -1000, 839, 690, 989, 137, -1000, 27, 304, 529,
	1076, -1000, -1000, 608, 5080, -1000, -1000, -1000, 879, -1000,
	85, 85, 317, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 104, 868, -1000, -1000, -1000, -1000,
	60, 46, 181, -1000, 5080, -1000, 389, -1000, -1000, -1000,
	389, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, 886,
	2011, -1000, 11450, 11450, -1000, -1000, 712, 712, 8854, 6229,
	1193, 1096, -1000, -1000, 173, 36, 173, 11450, 11450, -1000,
	11450, 11450, -1000, -151, 782, 302, -1000, 10343, 305, -1000,
	6229, -1000, 11450, 11450, -1000, -1000, -1000, -1000, -1000, -1000,
	594, 525, 1016, 346, 346, -1000, -1000, 18863, -1000, -1000,
	-1000, -1000, 1208, 10343, -1000, 764, -1000, 4697, 1175, 968,
	18863, 748, 1246, 12939, 18863, 721, -1000, 306, 1233, 950,
	964, 1305, -1000, -1000, -1000, -1000, 983, -1000, 870, -1000,
	-1000, -1000, -1000, -1000, 747, -1000, 191, 190, 189, 18863,
	-1000, 1210, 15904, 719, -1000, 719, -1000, 222, -1000, -1000,
	-1000, -93, -104, -1000, -1000, -1000, 4314, -1000, 4314, -1000,
	18863, 145, -1000, 27, 27, 27, -1000, -1000, -1000, 838,
	953, 11450, -1000, -1000, -1000, 243, 243, -1000, 34, -1000,
	-1000, -1000, 701, -1000, 693, 763, 678, 33, -1000, 851,
	1088, 304, 304, -1000, -1000, 461, -1000, -1000, 522, -1000,
	-1000, 932, 18863, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18863, -1000, -1000, -1000, -1000, -1000, 18863, -159, 27, 18863,
	18863, 18863, 18863, -1000, 394, 394, -1000, 11450, 886, 886,
	-1000, -1000, 558, -1000, 1175, -1000, 558, 816, 816, -1000,
	816, 820, -1000, 816, 44, 816, 24, 558, 558, 1944,
	1929, 1904, 615, 748, -146, -1000, 346, 10343, -1000, 850,
	731, 518, 8, -1000, -1000, -1000, 1184, 1190, 346, -1000,
	-1000, -1000, 1141, 769, 666, -1000, -1000, 8485, 669, 1029,
	220, 645, -1000, 1193, 18863, 10343, -1000, -1000, 10343, 814,
	-1000, 10343, -1000, -1000, -1000, 1193, 748, 748, 748, 645,
	1193, 719, -1000, -1000, 263, -1000, -1000, -1000, 3931, -1000,
	642, -1000, 1125, -1000, -1000, -1000, 18863, -28, 1237, 886,
	-1000, -1000, -1000, -1000, 8, 516, 8, 426, -1000, 424,
	-1000, -1000, -202, -1000, -1000, 757, 972, -1000, -1000, 18863,
	-1000, -1000, -1000, -1000, -1000, 1149, -1000, 6229, -1000, -1000,
	809, 876, -1000, -1000, -1000, -1000, 886, -1000, 1096, -1000,
	-1000, 28, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11450, 11450, 11450, 11450, 11450, 1175, 511, 346, 11450, 11450,
	8, -50, -1000, 10343, 10343, 1122, -1000, 748, -1000, 873,
	18863, 748, 18863, -1000, 18863, 1175, -1000, 346, 346, 18863,
	346, 15535, 18863, 18863, 13308, 1175, -1000, 137, 640, -1000,
	295, -1000, -20, 243, -1000, 243, 600, 596, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 748, 761, -1000,
	303, 18863, 18863, -1000, -1000, -1000, 458, 458, 458, 458,
	69, 558, -1000, 458, 458, -257, -1000, 1067, 1063, 346,
	683, 1231, -1000, 748, 1246, 216, 666, -1000, -1000, -1000,
	636, 632, -1000, 632, 632, 252, -1000, -1000, 136, 18863,
	408, 1116, -1000, 1108, -1000, -1000, -1000, -1000, -1000, 100,
	6229, 4314, 630, -1000, -1000, -1000, -1000, -1000, 558, 76,
	-162, -1000, -1000, -1000, -50, 175, -1000, 1045, 1043, 1187,
	18863, 666, 18863, -1000, -1000, -1000, -1000, -1000, 18863, -1000,
	-1000, 505, -1000, -1000, 599, -1000, 18863, -1000, -1000, 868,
	-1000, 1012, -157, -165, 1049, 1051, 1051, 1063, 1186, 1060,
	1055, -1000, 490, 595, -1000, 807, -1000, -1000, 100, 1028,
	-159, -1000, 993, -1000, 1047, 479, -1000, -1000, -1000, -1000,
	489, -1000, 1181, 1180, -1000, 18863, -1000, 94, -1000, -160,
	-1000, 379, -1000, -1000, -1000, 488, 482, 580, 91, -163,
	-1000, -1000, -1000, -1000, 910, 748, -167, 882, -1000, 1225,
	10712, -1000, -1000, 1227, 301, 301, 458, 558, -1000, -1000,
	-1000, 144, 474, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1537, 1533, 17, 84, 71, 1531, 1530, 1529, 1528,
	132, 130, 129, 1527, 1526, 1525, 1524, 1521, 1517, 1516,
	1515, 1514, 1513, 1512, 1511, 1509, 1508, 1507, 1506, 1503,
	1502, 1500, 1499, 1497, 1496, 123, 1495, 1494, 1493, 1492,
	1489, 1488, 1484, 1483, 1480, 94, 50, 1050, 52, 72,
	1478, 104, 1482, 1476, 46, 90, 75, 1467, 40, 1466,
	1465, 95, 1462, 1461, 69, 1460, 1458, 1868, 1457, 67,
	1456, 12, 29, 1454, 1453, 1451, 1446, 102, 291, 1441,
	1440, 8, 1439, 1438, 126, 1437, 74, 16, 21, 38,
	24, 1435, 76, 1434, 19, 1433, 73, 1432, 1430, 1429,
	1428, 27, 1427, 70, 79, 59, 1426, 7, 10, 1425,
	1424, 1423, 1419, 1417, 1414, 4, 1413, 1410, 1409, 1408,
	1400, 23, 1398, 15, 66, 34, 31, 9, 1397, 1396,
	22, 92, 64, 81, 1395, 1388, 1385, 756, 1146, 1380,
	63, 1376, 136, 1375, 26, 105, 507, 546, 1365, 1364,
	1354, 1353, 1352, 42, 827, 1654, 131, 82, 1350, 1348,
	2260, 51, 68, 20, 1347, 1346, 1340, 36, 1344, 41,
	791, 1338, 43, 1337, 1336, 1332, 1329, 1327, 1323, 1320,
	283, 1316, 1315, 1314, 109, 25, 80, 35, 1313, 1312,
	1311, 1309, 61, 91, 1308, 1306, 62, 65, 1294, 100,
	32, 30, 1291, 1289, 1288, 1286, 49, 11, 1281, 78,
	39, 54, 28, 44, 1278, 14, 1276, 33, 37, 1273,
	6, 1272, 13, 1269, 3, 0, 1266, 5, 60, 58,
	56, 1265, 2, 1263, 1, 1261, 1254, 1253, 112, 803,
	85, 1252, 144,
}
var yyR1 = [...]int{

	0, 236, 237, 237, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 225, 225, 225, 230, 229, 231, 21, 34, 3,
	3, 3, 3, 2, 2, 8, 9, 4, 5, 5,
	10, 10, 39, 39, 11, 12, 12, 12, 12, 240,
	240, 61, 61, 62, 62, 124, 124, 13, 14, 14,
	133, 133, 132, 132, 132, 134, 134, 134, 134, 170,
	170, 15, 15, 15, 15, 15, 15, 15, 227, 227,
	226, 224, 224, 223, 223, 222, 22, 24, 202, 204,
	204, 203, 203, 203, 203, 203, 203, 193, 173, 173,
	173, 173, 176, 176, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 175, 175, 175, 175, 175, 177, 177,
	177, 177, 177, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 179, 179,
	179, 179, 179, 179, 179, 179, 192, 192, 180, 180,
	186, 186, 187, 187, 187, 189, 189, 190, 190, 148,
	148, 148, 182, 182, 183, 183, 188, 188, 184, 184,
	184, 185, 185, 185, 191, 191, 191, 191, 191, 181,
	181, 194, 215, 215, 214, 214, 211, 211, 211, 211,
	201, 201, 208, 208, 208, 208, 208, 208, 198, 198,
	198, 199, 199, 197, 197, 200, 200, 210, 210, 209,
	195, 195, 196, 196, 217, 217, 217, 217, 217, 218,
	233, 234, 232, 232, 232, 232, 232, 149, 149, 149,
	205, 205, 205, 206, 206, 206, 207, 207, 207, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	221, 219, 219, 220, 220, 17, 23, 23, 18, 18,
	18, 18, 18, 19, 19, 25, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 141, 141, 235, 235,
	143, 143, 139, 139, 142, 142, 140, 140, 140, 144,
	144, 144, 145, 145, 171, 171, 171, 27, 27, 29,
	29, 30, 31, 31, 165, 165, 166, 166, 32, 33,
	38, 38, 38, 38, 38, 38, 40, 40, 40, 7,
	7, 7, 7, 37, 37, 37, 6, 6, 28, 28,
	28, 28, 20, 241, 35, 36, 36, 45, 45, 45,
	41, 41, 41, 44, 44, 44, 48, 48, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 47,
	47, 49, 49, 49, 49, 158, 158, 158, 157, 157,
	53, 53, 54, 54, 55, 55, 56, 56, 56, 93,
	70, 70, 123, 123, 125, 125, 57, 57, 57, 57,
	58, 58, 59, 59, 60, 60, 164, 164, 163, 163,
	163, 162, 162, 63, 63, 63, 65, 64, 64, 64,
	64, 66, 66, 68, 68, 67, 67, 69, 71, 71,
	71, 71, 71, 72, 72, 52, 52, 52, 52, 52,
	52, 52, 52, 136, 136, 74, 74, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 85, 85, 85,
	85, 85, 85, 75, 75, 75, 75, 75, 75, 75,
	46, 46, 86, 86, 86, 92, 87, 87, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 82, 82, 82, 82, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 242, 242, 84, 83, 83,
	83, 83, 83, 83, 83, 43, 43, 43, 43, 43,
	169, 169, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 97, 97, 42, 42, 95,
	95, 96, 98, 98, 94, 94, 94, 77, 77, 77,
	77, 77, 77, 77, 77, 79, 79, 79, 99, 99,
	100, 100, 101, 101, 102, 102, 103, 104, 104, 104,
	105, 105, 105, 105, 216, 216, 216, 216, 216, 212,
	212, 212, 212, 213, 213, 213, 121, 121, 121, 106,
	106, 106, 106, 111, 111, 111, 107, 107, 109, 109,
	109, 110, 110, 110, 108, 114, 114, 116, 116, 115,
	115, 113, 113, 118, 118, 117, 117, 112, 112, 76,
	76, 76, 76, 76, 122, 122, 122, 122, 126, 126,
	88, 88, 90, 90, 89, 91, 127, 127, 130, 128,
	128, 131, 131, 131, 131, 131, 129, 129, 129, 159,
	159, 159, 135, 135, 146, 146, 147, 147, 137, 137,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	138, 138, 138, 151, 151, 151, 152, 152, 119, 119,
	119, 119, 120, 120, 155, 155, 156, 156, 160, 160,
	161, 161, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 238, 239, 167, 168, 168, 168,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 3, 2, 1, 2, 3, 5,
	6, 6, 7, 4, 6, 5, 7, 8, 1, 3,
	7, 8, 1, 1, 9, 9, 8, 7, 7, 1,
	1, 1, 3, 1, 3, 0, 4, 3, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 6, 4, 6, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 8, 4, 2,
	4, 1, 1, 3, 4, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 0, 1, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	3, 1, 3, 1, 10, 11, 11, 12, 1, 5,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 2, 7,
	2, 3, 4, 5, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 3, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 5, 0, 1, 0, 1, 2, 3,
	0, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	4, 5, 5, 0, 2, 1, 3, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 8, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 2, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 2, 4, 0,
	9, 3, 5, 0, 3, 3, 0, 1, 0, 2,
	2, 0, 2, 2, 2, 0, 3, 0, 3, 0,
	3, 0, 4, 0, 3, 0, 4, 0, 1, 2,
	1, 5, 4, 4, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 3, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -236, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -25, -26, -27, -29,
	-30, -31, -32, -33, -6, -28, -20, -21, -34, -4,
	-238, 6, 7, 8, -39, 10, 11, 31, -22, -24,
	144, 145, 147, 146, 180, 148, 173, 70, 194, 195,
	197, 198, 199, 200, -40, 178, 179, 32, 33, 150,
	35, 41, 80, 9, 287, 175, 174, 26, -237, 389,
	-45, 5, -101, 16, -3, -35, -241, -35, -35, -35,
	-35, -35, -35, -202, -204, 80, 117, 80, 154, 98,
	279, 151, 152, -138, 300, -138, 154, 279, 151, 253,
	152, 152, 153, 154, 279, 151, 152, -67, -160, -225,
	-154, 83, -229, -230, 297, 166, 329, 330, 76, 194,
	208, 202, 229, 221, 298, 331, 167, 219, 222, 266,
	164, 332, 249, 256, 92, 197, 275, 333, 75, 47,
	40, 176, 217, 213, 334, 306, 211, 46, 28, 45,
	335, 258, 234, 44, 336, 79, 302, 260, 212, 257,
	150, 337, 169, 385, 162, 338, 235, 239, 339, 267,
	48, 340, 341, 342, 74, 206, 207, 343, 165, 269,
	233, 163, 34, 261, 299, 54, 184, 270, 42, 237,
	41, 344, 232, 228, 49, 345, 346, 347, 348, 231,
	205, 227, 58, 241, 240, 242, 265, 224, 349, 350,
	351, 170, 77, 352, 214, 19, 353, 354, 355, 52,
	356, 357, 273, 179, 358, 50, 37, 182, 359, 360,
	361, 362, 363, 364, 259, 236, 238, 159, 186, 255,
	301, 365, 271, 210, 366, 171, 183, 178, 274, 172,
	367, 368, 369, 370, 371, 372, 373, 198, 39, 374,
	375, 376, 377, 193, 268, 277, 57, 78, 246, 378,
	204, 161, 379, 195, 51, 190, 251, 43, 225, 185,
	380, 381, 215, 216, 230, 203, 226, 196, 386, 187,
	180, 382, 276, 247, 303, 223, 220, 191, 383, 154,
	188, 189, 384, 387, 262, 252, 263, 264, 253, 192,
	300, 272, 218, 248, -231, 390, 152, 135, 222, 266,
	144, 250, 261, 262, 258, -143, 259, 186, -171, 152,
	-139, 249, 252, 253, 192, -235, -225, 260, 268, 267,
	254, 264, 263, -160, 196, -165, 201, -155, -225, -154,
	199, -67, -38, 385, 148, -167, -167, 251, 251, -167,
	-87, -52, -73, 101, -78, 30, 24, -77, -74, -94,
	-91, -92, 135, 136, 138, 137, 139, 124, 125, 132,
	102, 140, -82, -80, -81, -83, 85, 84, 93, 86,
	87, 88, 89, 94, 95, 96, -155, -160, -89, -238,
	64, 65, 288, 289, 290, 291, 296, 292, 104, 53,
	278, 286, 285, 284, 282, 283, 280, 281, 294, 295,
	157, 279, 151, 130, 287, -225, -154, 40, -5, -4,
	-238, 6, 21, 22, -105, 18, 17, -239, 82, -41,
	-50, 59, 60, -51, 22, 36, 63, 61, -36, -49,
	126, -52, -160, -49, -137, 156, -137, -137, -128, -170,
	196, -131, 268, 267, -156, -129, -155, -153, 266, 222,
	265, 149, 304, 100, 23, 25, 244, 103, 135, 17,
	104, 134, 288, 144, 68, 305, 280, 281, 278, 290,
	291, 279, 250, 30, 11, 307, 26, 174, 22, 36,
	128, 146, 107, 108, 177, 24, 175, 96, 310, 20,
	71, 12, 14, 311, 312, 15, 157, 156, 119, 153,
	66, 9, 140, 27, 116, 62, 313, 29, 314, 315,
	316, 317, 64, 117, 18, 282, 283, 32, 318, 296,
	181, 130, 69, 55, 101, 319, 320, 94, 321, 97,
	72, 98, 16, 67, 38, 322, 323, 324, 325, 118,
	147, 287, 65, 326, 151, 6, 293, 31, 173, 63,
	327, 152, 106, 294, 295, 155, 95, 5, 158, 33,
	10, 70, 73, 284, 285, 286, 53, 105, 13, 328,
	99, -203, 117, -193, -196, -155, 168, -218, 164, -67,
	-210, -209, -155, -67, 287, -147, 157, -147, -147, -119,
	158, 161, 162, 85, 152, -67, -225, -225, 144, 146,
	149, 72, -23, -67, -146, 157, -225, -146, -146, -146,
	-67, 141, 390, 83, -67, -225, 31, -144, 117, 13,
	279, -225, 186, 152, 187, 154, -145, 117, -145, -145,
	-198, 153, 34, 165, -168, -238, -156, 190, 191, 190,
	-142, -141, 256, 257, 251, 255, 13, 191, 251, 189,
	-144, -168, 155, -155, -37, -155, 85, -7, -3, -11,
	-10, -12, 109, -167, -167, 81, 100, 98, 99, 116,
	-52, -75, 119, 101, 117, 118, 103, 121, 120, 131,
	124, 125, 126, 127, 128, 129, 130, 122, 123, 134,
	109, 110, 111, 112, 113, 114, 115, -136, -238, -92,
	-238, 142, 143, -78, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -238, 141, -2, -87, -4, -238, -238,
	-238, -238, -238, -238, -238, -238, -97, -52, -238, -242,
	-84, -238, -242, -84, -242, -84, -242, -238, -242, -84,
	-242, -84, -242, -242, -84, -238, -238, -238, -238, -238,
	-238, -238, -167, -101, -3, -35, -121, 20, 32, -52,
	-102, -103, -52, -101, 55, -47, -49, -51, 59, 60,
	91, 12, -158, -157, 23, -155, 85, 141, 12, -68,
	27, -67, -54, -55, -56, -57, -70, -93, -238, -67,
	12, -61, -62, -67, -69, -160, 81, 196, -131, -170,
	-133, -132, 269, 271, 109, -159, -155, 85, 30, 31,
	82, 81, -67, -173, -176, -178, -177, -179, -174, -175,
	219, 220, 135, 223, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 31, 176, 215, 216, 217, 218,
	235, 236, 237, 238, 239, 240, 241, 242, 202, 221,
	298, 203, 204, 205, 206, 207, 208, 210, 211, 212,
	213, 214, -225, 80, 82, 81, -180, 80, -168, 154,
	-225, 101, -225, -67, 153, 85, -67, -168, -168, -168,
	188, 188, 152, 152, 193, -67, 81, 155, -61, 24,
	72, -67, -225, -225, -161, -160, -153, 83, -168, -144,
	85, -52, -168, -168, -168, -67, -168, -168, 85, -199,
	12, 119, -168, -168, -140, 12, 119, -199, -140, -52,
	-145, 72, -166, 199, 233, 386, 387, 388, -52, -52,
	-52, -52, -85, 94, 101, 95, 96, -78, -86, -89,
	-92, 90, 119, 117, 118, 103, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -169, -225, 85, -225, -77, -77, -155, -48, 22,
	36, -47, -156, -161, -153, -45, -239, -239, -101, -47,
	-47, -52, -52, -94, 85, -47, -94, 85, -47, -47,
	-44, 22, 36, -95, -96, 105, -94, -155, -160, -239,
	-78, -155, -155, -47, -48, -48, -47, -47, -105, -239,
	-106, 27, 10, 119, 81, 19, 81, -104, 25, 26,
	-105, -79, -155, 86, 89, -53, 81, 12, -51, -67,
	-157, 126, -161, -67, -124, 182, -67, 31, 81, -63,
	-65, -64, -66, 62, 66, 68, 63, 64, 65, 69,
	-164, 23, -54, -3, -238, -163, 182, -162, 23, -160,
	85, -67, -61, -240, 81, 12, 73, -240, 81, 141,
	-131, -133, 81, 270, 272, 273, 72, 97, -52, -185,
	134, -205, -206, -207, -156, 85, 86, -193, -194, -195,
	-208, 168, -217, 159, 161, 162, 158, -197, 169, -218,
	153, 29, 82, -148, 94, 101, -189, 247, -180, -180,
	-180, -180, -180, -184, 222, -184, -184, -184, 80, 80,
	-180, -180, -180, -180, -186, 80, -186, -186, -187, 80,
	-187, -218, 164, -52, -215, -214, -211, 73, 163, 92,
	300, -209, -104, 86, -67, -168, 24, -168, -225, -150,
	149, 146, 147, -221, 145, 244, 222, 92, 30, 16,
	288, 182, 303, -225, 183, -67, -67, -67, -67, -67,
	149, 146, -67, -67, -67, -168, -67, -144, -160, -160,
	-67, -144, -67, -155, 94, 95, 96, -86, -78, -78,
	-78, -46, 177, 100, -239, -239, -47, -47, -238, 141,
	-5, -105, -239, -239, 81, 73, 23, 12, 12, -239,
	12, 12, -239, -239, -47, -98, -96, 107, -52, -239,
	141, -239, 81, 81, -239, -239, -239, -239, -239, -121,
	38, 46, 57, -52, -52, -103, -121, -135, 20, 12,
	53, 53, -72, 13, -49, -54, -51, 141, -72, -76,
	31, 53, -3, -238, -238, -127, -130, -94, -55, -56,
	-56, -55, -56, 62, 62, 62, 67, 62, 67, 62,
	-64, -160, -239, -239, -3, -71, 70, 156, 71, -238,
	-162, -124, 73, -54, -67, -54, -69, -160, 126, -132,
	-134, 274, 271, 277, -225, 85, 81, -207, 109, -196,
	80, -225, 29, -197, -197, -197, -200, -225, -200, 29,
	-182, 30, 94, -190, 248, -184, -184, -185, 31, -185,
	-185, -185, -192, 85, -192, 86, 86, 82, -216, -212,
	-213, 32, 76, -211, -225, -201, 109, 85, 37, 82,
	-168, -120, 73, -167, -228, 164, 160, 168, 169, 162,
	83, -229, -230, 153, 29, 159, 161, 182, 158, -228,
	-151, -152, 155, 23, 153, 29, 182, -227, 73, 188,
	244, 188, 155, -168, -140, -140, -46, 100, -78, -78,
	-239, -239, -48, -156, -101, -121, -172, 135, 219, 176,
	217, 213, 233, 224, 246, 215, 247, -169, -172, -78,
	-78, -78, -78, 297, -101, 108, -52, 106, -156, -78,
	-78, 39, 85, 85, 58, -67, -99, 14, -52, 126,
	-105, -126, 72, -127, -88, -90, -89, -238, -122, -239,
	-155, -125, -155, -72, 81, 109, -59, -58, 72, 73,
	-60, 72, -58, 62, 62, -239, 153, 153, 153, -125,
	-72, -54, -72, -72, 141, 271, 275, 276, -206, -207,
	-210, -217, 169, -200, -200, -200, 80, -183, 72, -78,
	-185, -185, -225, 135, 82, 81, 82, 81, 82, 81,
	-149, 335, 101, -213, -212, -201, -201, 86, 85, 72,
	-155, -167, -167, -67, -167, -155, -224, 300, -226, -225,
	-155, -155, -155, -67, -144, -144, -78, -239, -105, -239,
	-180, -180, -180, -187, -180, 207, -180, 207, -239, -239,
	20, 20, 20, 20, -238, -42, 293, -52, 81, 81,
	85, -184, -100, 15, 17, 28, -126, 81, -239, -239,
	81, 53, 141, -239, 81, -101, -130, -52, -52, 80,
	-52, -238, -238, -238, -239, -101, -72, 82, -123, -155,
	-188, 244, 10, -184, 85, -184, 86, 86, 335, 30,
	77, 78, 79, 30, 74, 75, -67, 27, -223, -222,
	-156, 80, 73, -121, -184, -225, -78, -78, -78, -78,
	-78, -105, 85, -78, -78, -184, -108, -113, -142, -52,
	-87, 29, -90, 53, -3, -155, -88, -155, -155, -105,
	-123, -123, -239, -123, -123, -163, -105, -215, 82, 81,
	-191, 159, 29, 158, -81, -185, -185, 82, 82, -238,
	81, 109, -123, -67, -239, -239, -239, -239, -43, 119,
	300, -239, -239, -239, -111, 385, -114, 42, -115, 43,
	10, -88, 141, 82, -239, -239, -239, -71, 171, -155,
	-181, 92, 29, 29, -219, -220, 182, -222, -207, 82,
	-239, 298, 69, 301, -108, 47, 225, -116, 51, -117,
	-112, 52, 17, -127, -155, -67, 85, -239, 81, -155,
	-227, 58, 299, 302, -109, 49, -107, 48, -107, -115,
	17, -118, 44, 45, 85, 80, -220, 53, -224, 58,
	-110, 50, 72, 97, 85, 17, 17, -123, 184, 300,
	72, 97, 85, 85, 82, 185, 301, -233, -234, 72,
	-238, 302, -234, 72, 11, 10, -78, 181, -232, 172,
	167, 170, 31, -232, -239, -239, 166, 30, 94,
}
var yyDef = [...]int{

	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 642,
	0, 383, 383, 383, 383, 383, 383, 383, 0, 0,
	750, 750, 0, 0, 0, 0, -2, 348, 349, 0,
	351, -2, 0, 0, 360, 1094, 1094, 0, 0, 1094,
	0, 0, 1092, 52, 53, 366, 367, 368, 1, 3,
	0, 387, 650, 0, 0, -2, 385, 0, 0, 738,
	738, 738, 0, 81, 82, 0, 0, 0, 0, 0,
	736, 736, 736, 758, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 734, 734, 734, 0, 294, 465, 768,
	769, 31, 32, 33, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 0, 36, 0, 0, 0, 339,
	0, 342, 342, 342, 308, 0, 310, 1095, 0, 0,
	0, 317, 0, 0, 323, 339, 1095, 331, 345, 346,
	333, 328, 329, 347, 350, 0, 355, 358, 764, 765,
	0, 373, 0, 941, 365, 378, 379, 1094, 1094, 382,
	37, 516, 475, 0, 481, 483, 0, 518, 519, 520,
	521, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 548, 549, 550, 551, 627, 628, 629, 630,
	631, 632, 633, 634, 485, 486, 624, 0, 715, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	585, 585, 585, 585, 585, 585, 585, 585, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 1094, 642, 48,
	0, 383, 388, 389, 666, 0, 0, 642, 1093, 0,
	0, -2, -2, 399, 405, 406, 407, 408, 384, 0,
	411, 415, 0, 0, 0, 739, 0, 0, 67, 0,
	1065, 719, -2, -2, 0, 0, 766, 767, -2, 906,
	-2, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 0, 0, 101, 102, 0, 0, 223, 908, 99,
	0, 217, 158, 1095, 0, 0, 0, 0, 0, 0,
	759, 760, 761, 751, 0, 1095, 1095, 1095, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 0,
	293, 0, 0, 35, 295, 1095, 339, 298, 0, 0,
	1095, 1095, 1095, 0, 1095, 1095, 305, 0, 306, 307,
	0, 208, 209, 210, 311, 1096, 1097, 1095, 1095, 336,
	0, 336, 334, 335, 326, 327, 0, 342, 320, 321,
	324, 325, 356, 359, 376, 374, 375, 377, 369, 370,
	371, 372, 0, 380, 381, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	503, 504, 505, 506, 507, 508, 509, 482, 0, 496,
	0, 0, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 0, 396, 0, 0, 0, 642, 0, 0,
	0, 0, 0, 0, 0, 393, 0, 616, 0, 569,
	577, 0, 570, 578, 571, 579, 572, 0, 573, 580,
	574, 581, 575, 576, 582, 0, 0, 0, 396, 396,
	0, 0, 38, 650, 0, 398, 669, 0, 0, 651,
	643, 644, 647, 650, 0, 420, 409, 400, 403, 404,
	386, 0, 412, 416, 0, 418, 419, 0, 0, 65,
	0, 464, 0, 422, 424, 425, 426, 446, 0, 448,
	0, 0, 0, 61, 63, 465, 0, 1065, 725, 0,
	69, 70, 0, 0, 0, 181, 729, 730, 731, 727,
	240, 0, 0, 169, 165, 109, 110, 111, 158, 113,
	158, 158, 158, 158, 178, 178, 178, 178, 141, 142,
	143, 144, 145, 0, 0, 128, 158, 158, 158, 158,
	148, 149, 150, 151, 152, 153, 154, 155, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 160, 160, 160,
	162, 162, 0, 0, 192, 0, 647, 0, 84, 0,
	1095, 0, 1095, 96, 0, 752, 0, 254, 256, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 735,
	0, 1095, 291, 292, 466, 770, 771, 34, 296, 297,
	340, 341, 299, 300, 301, 302, 303, 304, 343, 0,
	211, 212, 312, 316, 339, 0, 0, 0, 339, 318,
	319, 0, 0, 357, 361, 362, 363, 364, 517, 476,
	477, 478, 480, 497, 0, 499, 501, 487, 488, 512,
	513, 514, 0, 0, 0, 0, 510, 492, 0, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 537, 600, 601, 0, 535, 536, 547, 0, 0,
	0, 397, 625, 0, -2, 0, 515, 714, 650, 0,
	0, 0, 0, 520, 627, 0, 520, 627, 0, 0,
	0, 394, 395, 622, 619, 0, 0, 624, 0, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 666, 49,
	39, 0, 667, 0, 0, 0, 0, 646, 648, 649,
	666, 0, 635, 0, 0, 473, 0, 0, 401, 45,
	417, 413, 0, 473, 0, 0, 463, 0, 0, 0,
	0, 0, 0, 453, 0, 0, 456, 0, 0, 0,
	0, 447, 0, 0, 0, 468, 1005, 449, 0, 451,
	452, -2, 0, 0, 0, 59, 60, 0, 0, 0,
	720, 68, 0, 0, 73, 74, 721, 722, 723, 724,
	0, 98, 241, 243, 246, 247, 248, 103, 105, 106,
	0, 0, 221, 1015, 1049, 942, 215, 215, 940, 228,
	213, 214, 100, 172, 170, 0, 167, 166, 112, 178,
	178, 135, 136, 181, 0, 181, 181, 181, 0, 0,
	129, 130, 131, 132, 123, 0, 124, 125, 126, 0,
	127, 222, 0, 0, 654, 193, 194, 0, 200, 0,
	0, 218, 219, 0, 1095, 86, 737, 87, 762, 1094,
	0, 0, 753, 255, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 0, 88, 259, 261, 260, 264,
	0, 0, 0, 286, 1095, 290, 336, 313, 337, 338,
	336, 315, 322, 353, 498, 500, 502, 489, 510, 493,
	0, 490, 0, 0, 484, 552, 0, 0, 396, 0,
	642, 666, 556, 557, 0, 0, 0, 0, 0, 593,
	0, 0, 594, 0, 642, 0, 620, 0, 0, 568,
	0, 587, 0, 0, 588, 589, 590, 591, 592, 41,
	0, 0, 0, 652, 653, 645, 40, 0, 732, 733,
	636, 637, 638, 0, 410, 421, 402, 0, 650, 708,
	0, 0, 700, 0, 0, 473, 716, 0, 423, 442,
	444, 0, 439, 454, 455, 457, 0, 459, 0, 461,
	462, 427, 428, 429, 0, 430, 0, 0, 0, 0,
	450, 473, 0, 473, 62, 473, 64, 0, 467, 71,
	72, 0, 0, 78, 182, 183, 0, 244, 0, 104,
	0, 0, 202, 215, 215, 215, 206, 216, 207, 0,
	174, 0, 171, 108, 168, 181, 181, 137, 0, 138,
	139, 140, 0, 156, 0, 0, 0, 237, 83, 658,
	657, 200, 200, 195, 196, 0, 201, 198, 0, 159,
	85, 0, 0, 249, 1094, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 1094,
	0, 1094, 754, 755, 756, 757, 0, 91, 0, 0,
	0, 0, 0, 289, 339, 339, 491, 0, 511, 494,
	553, 554, 0, 626, 650, 43, 0, 158, 158, 605,
	158, 162, 608, 158, 610, 158, 613, 0, 0, 0,
	0, 0, 0, 0, 617, 567, 623, 0, 625, 0,
	0, 0, 178, 671, 668, 42, 640, 0, 474, 414,
	46, 50, 0, 708, 699, 710, 712, 0, 0, 0,
	704, 0, 434, 642, 0, 0, 436, 443, 0, 0,
	437, 0, 438, 458, 460, -2, 0, 0, 0, 0,
	642, 473, 57, 58, 0, 75, 76, 77, 242, 245,
	0, 220, 0, 203, 204, 205, 0, 176, 0, 173,
	133, 134, 179, 180, 178, 0, 178, 0, 163, 0,
	229, 238, 0, 655, 656, 0, 0, 197, 199, 0,
	763, 250, 251, 252, 253, 0, 258, 0, 89, 90,
	0, 0, 263, 287, 309, 314, 495, 555, 666, 558,
	602, 178, 606, 607, 609, 611, 612, 614, 560, 559,
	0, 0, 0, 0, 0, 650, 0, 621, 0, 0,
	178, 691, 47, 0, 0, 0, 51, 0, 713, 0,
	0, 0, 0, 66, 0, 650, 717, 718, 440, 0,
	445, 0, 0, 0, 448, 650, 56, 192, 0, 432,
	184, 177, 0, 181, 157, 181, 0, 0, 239, 659,
	660, 661, 662, 663, 664, 665, 97, 0, 92, 93,
	0, 0, 0, 44, 603, 604, 0, 0, 0, 0,
	595, 0, 618, 0, 0, 673, 672, 685, 689, 641,
	639, 0, 711, 0, 703, 706, 702, 705, 435, 54,
	0, 0, 470, 0, 0, 468, 55, 191, 0, 0,
	189, 0, 186, 188, 175, 146, 147, 161, 164, 0,
	0, 0, 0, 265, 561, 563, 562, 564, 0, 0,
	0, 566, 583, 584, 691, 0, 684, 687, -2, 0,
	0, 701, 0, 441, 469, 471, 472, 431, 0, 433,
	107, 0, 185, 187, 0, 281, 0, 94, 95, 88,
	565, 0, 0, 0, 678, 676, 676, 689, 0, 693,
	0, 698, 0, 709, 707, 0, 190, 280, 0, 0,
	91, 596, 0, 599, 681, 0, 674, 677, 675, 686,
	0, 692, 0, 0, 690, 0, 282, 0, 262, 597,
	670, 0, 679, 680, 688, 0, 0, 0, 0, 0,
	682, 683, 694, 696, 224, 0, 0, 225, 226, 0,
	0, 598, 227, 0, 0, 0, 0, 0, 230, 232,
	233, 0, 0, 231, 283, 284, 234, 235, 236,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 102, 3, 3, 3, 129, 121, 3,
	80, 82, 126, 124, 81, 125, 141, 127, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 389,
	110, 109, 111, 3, 390, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 131, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 132,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 103, 104, 105,
	106, 107, 108, 112, 113, 114, 115, 116, 117, 118,
	119, 122, 123, 128, 130, 133, 134, 135, 136, 137,
	138, 139, 140, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:373
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:378
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:379
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:412
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:432
		{
			yyVAL.bytes = yyDollar[3].bytes
			setAllowCarrats(yylex, false)
			setAllowBlanks(yylex, true)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:440
		{
			yyVAL.bytes = yyDollar[2].bytes
			setAllowCarrats(yylex, false)
			setAllowBlanks(yylex, true)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			setAllowCarrats(yylex, true)
			setAllowBlanks(yylex, false)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:461
		{
			yyVAL.statement = &Load{}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:467
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.Into = yyDollar[5].selectInto
			yyVAL.selStmt = sel
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:476
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:484
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:507
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:515
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].boolean, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:521
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:527
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:535
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:545
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:552
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:564
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:576
		{
			yyVAL.insertAction = InsertAct
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:592
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:604
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:609
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:633
		{
			yyVAL.partitions = nil
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:637
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:649
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:663
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:669
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:673
		{
			yyVAL.characteristic = ReadWrite
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.characteristic = ReadOnly
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:687
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.isolationLevel = Serializable
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.scope = SessionScope
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.scope = GlobalScope
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:711
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:716
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:722
		{
			yyDollar[1].createIndex.Columns = yyDollar[3].indexColumns
			yyDollar[1].createIndex.Options = append(yyDollar[5].indexOptions, yyDollar[6].indexOptions...)
			yyDollar[1].createIndex.FullyParsed = true
			yyVAL.statement = yyDollar[1].createIndex
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:729
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 85:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:737
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:741
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:746
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:761
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:783
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:789
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:796
		{
			yyVAL.createIndex = &CreateIndex{Constraint: yyDollar[3].str, Name: yyDollar[5].colIdent, IndexType: yyDollar[6].str, Table: yyDollar[8].tableName, OnlineHint: yyDollar[2].OnlineDDLHint}
			setDDL(yylex, yyVAL.createIndex)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:804
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:811
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:815
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:831
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:835
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:850
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1077
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1082
		{
			yyVAL.literal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1095
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1103
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1113
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.boolean = false
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.boolean = true
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1130
		{
			yyVAL.boolean = false
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.boolean = true
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1140
		{
			yyVAL.boolean = false
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.boolean = false
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.boolean = true
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.optVal = nil
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1162
		{
			yyVAL.optVal = nil
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.boolean = false
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.boolean = true
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1206
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.colKeyOpt = colKey
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1218
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1227
		{
			yyVAL.literal = nil
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1237
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1242
		{
			yyVAL.indexOptions = nil
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1262
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[2].colIdent.String())}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1266
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Value: NewStrLiteral(yyDollar[3].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1281
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1291
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1295
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1299
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Fulltext: true, Unique: false}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1321
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1332
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1336
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1346
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1351
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1371
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal, Direction: yyDollar[3].orderDirection}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 224:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1397
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 225:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1401
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 226:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1405
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 227:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1409
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
			yyVAL.constraintInfo = yyDollar[1].constraintInfo
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1419
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1431
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1445
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1449
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1453
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1458
		{
			yyVAL.boolean = true
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.boolean = true
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.boolean = false
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1479
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1487
		{
			yyVAL.str = yyDollar[1].str
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1495
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1501
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1527
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1532
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1549
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1639
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1655
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1659
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1671
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1675
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1687
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1715
		{
			yyVAL.statement = &OtherRead{}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1726
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1749
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 309:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1780
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1797
		{
			yyVAL.statement = &Show{&ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1801
		{
			yyVAL.statement = &Show{&ShowColumns{Full: yyDollar[2].str, Table: yyDollar[5].tableName, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1805
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, Scope: ImplicitScope}}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}}
			}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1815
		{
			yyVAL.statement = &Show{&ShowLegacy{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1827
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{&ShowLegacy{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Show{&ShowLegacy{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1889
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.str = "extended "
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = "full "
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1923
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1933
		{
			yyVAL.showFilter = nil
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1937
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1947
		{
			yyVAL.showFilter = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1951
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1957
		{
			yyVAL.scope = ImplicitScope
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.scope = SessionScope
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.scope = GlobalScope
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &Begin{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &Begin{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.statement = &Commit{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &Rollback{}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2006
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.empty = struct{}{}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2011
		{
			yyVAL.empty = struct{}{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.empty = struct{}{}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2029
		{
			yyVAL.explainType = EmptyType
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2033
		{
			yyVAL.explainType = JSONType
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2037
		{
			yyVAL.explainType = TreeType
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2041
		{
			yyVAL.explainType = VitessType
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2045
		{
			yyVAL.explainType = TraditionalType
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.explainType = AnalyzeType
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &OtherRead{}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2104
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2132
		{
			setAllowComments(yylex, true)
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.bytes2 = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.boolean = true
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2156
		{
			yyVAL.boolean = false
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.boolean = true
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2165
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = SQLCacheStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2178
		{
			yyVAL.boolean = false
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.boolean = true
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.boolean = true
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2191
		{
			yyVAL.selectExprs = nil
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2200
		{
			yyVAL.strs = nil
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2216
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = SQLCacheStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = DistinctStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.str = DistinctStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.str = StraightJoinHint
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2270
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2275
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2283
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2339
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 431:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2343
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2349
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2359
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2376
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2380
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2384
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2388
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2396
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2400
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2402
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2406
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2411
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2416
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2420
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2424
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2437
		{
			yyVAL.joinType = NormalJoinType
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.joinType = NormalJoinType
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.joinType = NormalJoinType
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.joinType = StraightJoinType
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.joinType = LeftJoinType
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.joinType = LeftJoinType
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.joinType = RightJoinType
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.joinType = RightJoinType
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2499
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2503
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2514
		{
			yyVAL.indexHints = nil
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2518
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2522
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2526
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2530
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = nil
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2579
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2661
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2679
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 565:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3084
		{
			yyVAL.matchExprOption = NoOption
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3092
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3096
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3120
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = nil
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3180
		{
			yyVAL.str = string("")
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3200
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3219
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3223
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = &NullVal{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3272
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3276
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3281
		{
			yyVAL.exprs = nil
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3290
		{
			yyVAL.expr = nil
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3299
		{
			yyVAL.orderBy = nil
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3303
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3309
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3313
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3324
		{
			yyVAL.orderDirection = AscOrder
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3328
		{
			yyVAL.orderDirection = AscOrder
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3332
		{
			yyVAL.orderDirection = DescOrder
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3337
		{
			yyVAL.limit = nil
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3345
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3349
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3354
		{
			yyVAL.indexOptions = nil
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3358
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption, yyDollar[2].indexOption}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3377
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3385
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3389
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3395
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3399
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3403
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), String: string(yyDollar[3].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3408
		{
			yyVAL.lock = NoLock
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3412
		{
			yyVAL.lock = ForUpdateLock
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3416
		{
			yyVAL.lock = ShareModeLock
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3421
		{
			yyVAL.selectInto = nil
		}
	case 670:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3425
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfileS3, FileName: string(yyDollar[4].bytes), Charset: yyDollar[5].str, FormatOption: yyDollar[6].str, ExportOption: yyDollar[7].str, Manifest: yyDollar[8].str, Overwrite: yyDollar[9].str}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3429
		{
			yyVAL.selectInto = &SelectInto{Type: IntoDumpfile, FileName: string(yyDollar[3].bytes), Charset: "", FormatOption: "", ExportOption: "", Manifest: "", Overwrite: ""}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3433
		{
			yyVAL.selectInto = &SelectInto{Type: IntoOutfile, FileName: string(yyDollar[3].bytes), Charset: yyDollar[4].str, FormatOption: "", ExportOption: yyDollar[5].str, Manifest: "", Overwrite: ""}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3438
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3442
		{
			yyVAL.str = " format csv" + yyDollar[3].str
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3446
		{
			yyVAL.str = " format text" + yyDollar[3].str
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3451
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.str = " header"
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3460
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = " manifest on"
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3468
		{
			yyVAL.str = " manifest off"
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3473
		{
			yyVAL.str = ""
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3477
		{
			yyVAL.str = " overwrite on"
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3481
		{
			yyVAL.str = " overwrite off"
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3487
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].str
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3492
		{
			yyVAL.str = ""
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3496
		{
			yyVAL.str = " lines" + yyDollar[2].str + yyDollar[3].str
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3501
		{
			yyVAL.str = ""
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.str = " starting by '" + string(yyDollar[3].bytes) + "'"
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ""
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = " terminated by '" + string(yyDollar[3].bytes) + "'"
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3519
		{
			yyVAL.str = ""
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3523
		{
			yyVAL.str = " " + yyDollar[1].str + yyDollar[2].str + yyDollar[3].str + yyDollar[4].str
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3528
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3532
		{
			yyVAL.str = " escaped by '" + string(yyDollar[3].bytes) + "'"
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3537
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3541
		{
			yyVAL.str = yyDollar[1].str + " enclosed by '" + string(yyDollar[4].bytes) + "'"
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3546
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.str = " optionally"
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3563
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3571
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3575
		{
			yyVAL.ins = &Insert{Rows: yyDollar[4].values}
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3589
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3593
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3597
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3602
		{
			yyVAL.updateExprs = nil
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3606
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3616
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3622
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3626
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3632
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3638
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3648
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3652
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3658
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3668
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3674
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3678
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3682
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3686
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3690
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3698
		{
			yyVAL.bytes = []byte("charset")
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3705
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3709
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3713
		{
			yyVAL.expr = &Default{}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3722
		{
			yyVAL.boolean = false
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3724
		{
			yyVAL.boolean = true
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3727
		{
			yyVAL.boolean = false
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3729
		{
			yyVAL.boolean = true
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3732
		{
			yyVAL.ignore = false
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3734
		{
			yyVAL.ignore = true
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3738
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3742
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3748
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3752
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3754
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3756
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3760
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3770
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3778
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3780
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3782
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3786
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3788
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3791
		{
			yyVAL.str = ""
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3793
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3795
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3800
		{
			yyVAL.str = ""
		}
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3802
		{
			yyVAL.str = yyDollar[2].colIdent.val
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3806
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3810
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3817
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3823
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3827
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4180
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4189
		{
			decNesting(yylex)
		}
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4194
		{
			skipToEnd(yylex)
		}
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4199
		{
			skipToEnd(yylex)
		}
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4203
		{
			skipToEnd(yylex)
		}
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4207
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
